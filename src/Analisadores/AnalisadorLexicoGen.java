/* The following code was generated by JFlex 1.6.1 */

/* Código do Usuário */

package Analisadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/* Opções e Declarações */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalisadorLexico.jflex</tt>
 */
public class AnalisadorLexicoGen implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 58, 58, 59, 58, 58,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 49, 10,  0,  0, 42, 36,  8, 43, 44, 47, 45,  9, 46,  3, 48, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 57, 56, 39, 40, 41, 51, 
     0, 11, 12, 17,  4,  6,  5, 31, 24, 26, 34, 22, 19, 29, 20, 18, 
    30,  1, 16, 14, 15, 27, 32, 33, 28, 23, 35, 52,  0, 53, 37,  1, 
     0, 11, 12, 17,  4,  6,  5, 31, 24, 26, 34, 22, 19, 29, 20, 18, 
    30,  1, 16, 14, 15, 27, 32, 33, 28, 23, 35, 54, 38, 55, 50,  0, 
     0,  0,  0,  0,  0, 59,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\2\1\5\1\1"+
    "\1\6\1\1\2\2\1\1\6\2\1\1\5\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\0\1\3\1\2"+
    "\1\35\3\2\1\0\3\2\2\0\1\3\4\2\5\0"+
    "\17\2\1\36\2\0\1\36\10\2\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\0\3\2\1\62\1\2\1\0\1\2\1\0\2\2"+
    "\1\0\4\2\5\0\6\2\1\63\2\2\1\0\2\2"+
    "\1\0\6\2\1\64\1\2\1\0\1\65\1\0\1\2"+
    "\1\65\3\2\1\0\3\2\1\0\1\2\1\0\2\2"+
    "\1\66\1\67\1\70\1\3\2\2\1\0\1\2\1\0"+
    "\1\2\2\71\1\2\1\0\3\2\1\72\5\0\6\2"+
    "\1\73\1\2\2\74\1\2\2\75\2\2\1\0\1\2"+
    "\1\76\1\77\1\0\1\2\4\0\4\2\1\0\2\2"+
    "\1\0\3\2\2\100\1\0\2\2\1\101\2\2\1\73"+
    "\1\102\2\103\1\2\1\0\1\2\2\104\1\2\2\0"+
    "\1\105\1\106\1\0\2\2\1\105\1\106\1\2\1\0"+
    "\1\2\1\107\1\2\1\110\1\0\1\2\2\111\1\0"+
    "\1\2\4\0\4\2\1\0\2\2\1\0\1\2\1\0"+
    "\2\2\2\112\1\113\1\2\1\114\1\0\2\2\1\0"+
    "\2\2\1\115\1\0\1\116\1\115\1\2\1\116\1\0"+
    "\1\2\2\117\1\120\1\0\1\2\2\121\2\0\1\122"+
    "\1\0\2\2\1\122\1\2\1\0\2\2\1\0\1\2"+
    "\2\123\1\0\1\2\1\124\2\125\2\126\1\0\1\2"+
    "\1\127\1\0\1\2\1\0\1\2\1\0\1\2\3\0"+
    "\3\2\2\130\1\2\2\131\1\0\1\2\2\132\1\0"+
    "\1\2\1\0\1\2\2\133\3\0\4\2\2\134\1\0"+
    "\1\2\2\135\1\0\1\136\1\0\1\2\1\136\1\2"+
    "\1\137\1\0\1\2\1\140\1\141\1\140\1\141\1\0"+
    "\1\2\2\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\74\0\u01e0\0\74\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\74\0\74\0\u0780\0\u07bc\0\u07f8\0\u0834"+
    "\0\u0870\0\74\0\74\0\u08ac\0\74\0\74\0\74\0\74"+
    "\0\74\0\360\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u021c\0\74\0\u0b7c"+
    "\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\74"+
    "\0\u111c\0\u1158\0\170\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\74\0\74\0\74\0\74\0\74"+
    "\0\u1374\0\74\0\74\0\74\0\u13b0\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\170\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac"+
    "\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c"+
    "\0\u19c8\0\170\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\170\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u20d0\0\74\0\74\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\u2274\0\u22b0\0\74\0\170\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\170\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508"+
    "\0\u2544\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\170\0\u26ac"+
    "\0\74\0\170\0\u26e8\0\74\0\170\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\170\0\170\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904"+
    "\0\u2940\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4"+
    "\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\74\0\170\0\u2c10\0\u2c4c"+
    "\0\u2c88\0\74\0\u2cc4\0\u2d00\0\74\0\170\0\u2d3c\0\u2d78"+
    "\0\u2db4\0\u2df0\0\u2e2c\0\74\0\170\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\74\0\74\0\u2f1c\0\u2f58\0\u2f94\0\170\0\170\0\u2fd0"+
    "\0\u300c\0\u3048\0\u3084\0\u30c0\0\170\0\u30fc\0\u3138\0\74"+
    "\0\170\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc"+
    "\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480\0\u34bc"+
    "\0\u34f8\0\u3534\0\u3570\0\74\0\170\0\170\0\u35ac\0\170"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\u36d8\0\u3714\0\74\0\u3750"+
    "\0\74\0\170\0\u378c\0\170\0\u37c8\0\u3804\0\74\0\170"+
    "\0\170\0\u3840\0\u387c\0\74\0\170\0\u38b8\0\u38f4\0\74"+
    "\0\u3930\0\u396c\0\u39a8\0\170\0\u39e4\0\u3a20\0\u3a5c\0\u3a98"+
    "\0\u3ad4\0\u3b10\0\74\0\170\0\u3b4c\0\u3b88\0\170\0\74"+
    "\0\170\0\74\0\170\0\u3bc4\0\u3c00\0\170\0\u3c3c\0\u3c78"+
    "\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58"+
    "\0\u3e94\0\u3ed0\0\74\0\170\0\u3f0c\0\74\0\170\0\u3f48"+
    "\0\u3f84\0\74\0\170\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\74"+
    "\0\170\0\u40b0\0\u40ec\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218"+
    "\0\74\0\170\0\u4254\0\u4290\0\74\0\170\0\u42cc\0\74"+
    "\0\u4308\0\u4344\0\170\0\u4380\0\170\0\u43bc\0\u43f8\0\74"+
    "\0\74\0\170\0\170\0\u4434\0\u4470\0\74\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\3\1\24\1\25\1\2\3\3\1\26"+
    "\1\27\3\3\1\30\1\3\1\31\1\32\1\33\1\3"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\11\76\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\32\0\1\4\1\62\72\0\1\63"+
    "\72\0\2\3\1\0\2\3\1\64\4\0\2\3\1\0"+
    "\4\3\1\65\2\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\1\66\1\3\1\0\4\3"+
    "\1\67\1\70\1\3\1\0\3\3\1\71\1\72\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\5\3"+
    "\1\73\1\3\1\0\3\3\1\0\2\3\1\74\7\3"+
    "\31\0\6\75\2\0\1\75\1\0\2\75\1\0\7\75"+
    "\1\0\3\75\1\0\12\75\31\0\6\76\2\0\1\76"+
    "\1\77\2\76\1\0\7\76\1\0\3\76\1\0\12\76"+
    "\31\0\2\3\1\0\3\3\4\0\1\3\1\100\1\0"+
    "\7\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\2\3\1\101\1\3\1\102"+
    "\2\3\1\0\1\3\1\103\1\3\1\0\12\3\47\0"+
    "\1\104\7\0\1\105\1\106\2\0\1\107\5\0\1\110"+
    "\33\0\2\3\1\0\3\3\4\0\2\3\1\0\1\3"+
    "\1\111\5\3\1\0\1\3\1\112\1\113\1\0\1\3"+
    "\1\114\5\3\1\115\2\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\2\3\1\116\4\3\1\0\2\3"+
    "\1\117\1\0\12\3\31\0\2\3\1\0\2\3\1\120"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\1\121\1\3\1\0"+
    "\4\3\1\122\1\123\1\3\1\0\2\3\1\124\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\4\3\1\125\2\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\2\3\1\126\4\0\1\127\1\3\1\0"+
    "\7\3\1\0\3\3\1\0\12\3\35\0\1\130\16\0"+
    "\1\131\10\0\1\132\37\0\2\3\1\0\1\3\1\133"+
    "\1\3\4\0\2\3\1\0\6\3\1\134\1\0\3\3"+
    "\1\0\3\3\1\135\6\3\31\0\2\3\1\0\3\3"+
    "\4\0\1\136\1\3\1\0\2\3\1\137\4\3\1\0"+
    "\3\3\1\0\1\3\1\140\10\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\4\3\1\141\2\3\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\2\3\1\142\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\6\3"+
    "\1\143\1\0\3\3\1\0\12\3\74\0\1\144\3\0"+
    "\1\145\73\0\1\146\71\0\1\147\1\0\1\150\72\0"+
    "\1\151\1\152\73\0\1\153\73\0\1\154\1\155\72\0"+
    "\1\156\73\0\1\157\4\0\1\160\66\0\1\161\5\0"+
    "\1\162\65\0\1\163\73\0\1\164\73\0\1\165\110\0"+
    "\1\166\10\0\1\63\1\0\2\77\1\167\66\0\2\3"+
    "\1\0\1\3\1\170\1\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\1\3"+
    "\1\171\10\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\5\3\1\172\1\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\2\3"+
    "\1\173\4\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\4\3\1\174\2\3"+
    "\1\0\3\3\1\0\12\3\54\0\1\175\50\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\6\3\1\176\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\177\1\200\6\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\1\3"+
    "\1\201\5\3\1\0\3\3\1\0\12\3\40\0\1\77"+
    "\64\0\2\3\1\0\3\3\4\0\2\3\1\202\1\203"+
    "\6\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\2\3\1\204\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\4\3\1\205\2\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\1\3"+
    "\1\206\5\3\1\0\3\3\1\0\12\3\43\0\1\207"+
    "\104\0\1\210\71\0\1\211\107\0\1\212\66\0\2\213"+
    "\42\0\2\3\1\0\3\3\4\0\1\214\1\3\1\0"+
    "\7\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\6\3\1\215\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\4\3\1\216\2\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\4\3\1\217\5\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\213\1\220\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\1\221\1\3\1\0\7\3\1\0\1\3\1\222\1\3"+
    "\1\0\1\3\1\223\10\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\2\3\1\224\4\3\1\0\3\3"+
    "\1\225\1\226\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\1\3\1\227\5\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\230"+
    "\1\231\1\232\5\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\6\3\1\233"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\1\234\1\3\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\1\235\1\3"+
    "\1\0\7\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\6\3\1\236\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\7\3\1\237"+
    "\2\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\1\3\1\240\5\3\1\0\3\3\1\0\12\3\45\0"+
    "\2\241\1\242\112\0\1\243\36\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\241\1\244\1\245\5\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\4\3\1\246\5\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\3\3"+
    "\1\247\3\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\4\3\1\250\2\3"+
    "\1\0\3\3\1\251\1\252\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\1\3\1\253\1\0\7\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\5\3\1\254\1\3\1\0\3\3\1\255\1\256"+
    "\11\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\257\1\260\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\1\3\1\261\10\3\100\0\1\262\73\0\1\263"+
    "\1\264\31\0\1\265\36\0\1\265\6\0\2\265\16\0"+
    "\2\3\1\0\3\3\4\0\1\266\1\3\1\0\7\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\1\3\1\267\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\270"+
    "\1\223\6\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\1\271\1\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\43\0\1\272\61\0\2\3\1\0"+
    "\3\3\4\0\1\273\1\3\1\0\7\3\1\0\3\3"+
    "\1\0\12\3\36\0\1\274\66\0\2\3\1\0\2\3"+
    "\1\275\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\2\3\1\276\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\12\3\47\0\1\277"+
    "\55\0\2\3\1\0\3\3\4\0\2\3\1\0\1\3"+
    "\1\300\5\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\1\301\1\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\5\3\1\302\1\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\2\3\1\303\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\12\3\47\0\1\304"+
    "\75\0\1\305\72\0\1\306\61\0\1\307\104\0\1\310"+
    "\55\0\2\3\1\0\3\3\4\0\2\3\1\0\1\3"+
    "\1\311\5\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\3\3\1\312\3\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\2\3\1\313\4\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\2\3\1\314\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\1\3\1\315"+
    "\5\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\6\3\1\316\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\2\3\1\317\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\4\3\1\320"+
    "\2\3\1\0\3\3\1\0\12\3\45\0\2\321\56\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\321\1\322\6\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\1\3"+
    "\1\323\10\3\36\0\1\324\66\0\2\3\1\0\2\3"+
    "\1\325\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\3\3\1\326\3\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\1\3\1\327"+
    "\5\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\330\1\331\6\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\2\3\1\332\4\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\5\3\1\333\4\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\334\1\335\11\3\47\0\1\336\62\0\1\337\107\0"+
    "\1\340\1\341\51\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\1\3\1\342\5\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\2\3\1\343\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\4\3\1\344\1\345\1\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\346\1\347\2\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\1\3\1\350\5\3\1\0\3\3\1\0\12\3\70\0"+
    "\1\351\34\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\6\3\1\352\3\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\5\3\1\353"+
    "\1\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\1\354\1\3\1\0\7\3\1\0\3\3"+
    "\1\0\12\3\34\0\1\355\70\0\2\3\1\0\1\356"+
    "\2\3\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\53\0\1\357\51\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\5\3\1\360\1\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\5\3\1\361\1\3\1\0\3\3\1\0\12\3\100\0"+
    "\1\362\27\0\2\77\67\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\1\3\1\363"+
    "\10\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\5\3\1\364\1\3\1\0\3\3\1\0\12\3\36\0"+
    "\1\365\66\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\1\3\1\366\5\3\1\0\3\3\1\0\12\3\53\0"+
    "\1\367\51\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\5\3\1\370\1\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\6\3\1\371"+
    "\1\0\3\3\1\0\12\3\50\0\1\372\54\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\2\3\1\373\4\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\374\1\375\2\3\1\0"+
    "\12\3\31\0\2\3\1\0\2\3\1\376\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\12\3\61\0\2\377"+
    "\71\0\1\u0100\62\0\1\u0101\74\0\1\u0102\74\0\1\u0103"+
    "\53\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\377\1\u0104\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\7\3\1\0\2\3\1\u0105"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\1\3\1\u0106\5\3\1\0\3\3\1\0\12\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\2\3"+
    "\1\u0107\4\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\3\3\1\u0108\3\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\u0109\1\u010a\6\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\7\3\1\u010b\2\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\2\3\1\u010c"+
    "\4\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\7\3\1\0\2\3\1\u010d"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\u010e\1\u010f\11\3\45\0"+
    "\2\u0110\56\0\2\3\1\0\3\3\4\0\2\3\1\u0110"+
    "\1\u0111\6\3\1\0\3\3\1\0\12\3\70\0\1\u0112"+
    "\34\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\6\3\1\u0113\3\3\43\0\1\u0114"+
    "\100\0\1\u0115\73\0\1\u0116\61\0\1\u0117\66\0\2\3"+
    "\1\0\3\3\4\0\1\u0118\1\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\2\3\1\u0119\4\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\2\3\1\u011a\4\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\2\3\1\u011b\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\12\3\43\0\1\u011c\61\0\2\3"+
    "\1\0\3\3\4\0\1\u011d\1\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\2\3\1\u011e"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\12\3"+
    "\43\0\1\u011f\61\0\2\3\1\0\3\3\4\0\1\u0120"+
    "\1\3\1\0\7\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\u0121\1\u0122\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\u0123\5\3\1\0\3\3"+
    "\1\0\12\3\36\0\1\u0124\66\0\2\3\1\0\2\3"+
    "\1\u0125\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\5\3\1\u0126\1\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\5\3\1\u0127"+
    "\1\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\2\3\1\u0128\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\12\3\53\0\1\u0129\51\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\5\3\1\u012a\1\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\1\u012b\2\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\12\3\43\0"+
    "\1\u012c\61\0\2\3\1\0\3\3\4\0\1\u012d\1\3"+
    "\1\0\7\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\1\u012e\1\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\51\0\1\u012f\72\0\1\u0130\103\0"+
    "\1\u0131\44\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\3\3\1\u0132\3\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\2\3\1\u0133"+
    "\4\3\1\0\3\3\1\0\12\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\7\3\1\0\2\3\1\u0134"+
    "\1\0\12\3\61\0\2\u0135\42\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\u0135\1\u0136"+
    "\11\3\31\0\2\3\1\0\3\3\4\0\2\3\1\u0137"+
    "\1\u0138\6\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\6\3\1\u0139\1\0"+
    "\3\3\1\0\12\3\54\0\1\u013a\50\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\6\3\1\u013b\1\0\3\3"+
    "\1\0\12\3\36\0\1\u013c\66\0\2\3\1\0\2\3"+
    "\1\u013d\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\54\0\1\u013e\54\0\1\u013f\105\0\1\u0140\111\0"+
    "\1\u0141\37\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\6\3\1\u0142\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\1\3\1\u0143\1\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\u0144\5\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\3\3\1\u0145\6\3"+
    "\67\0\1\u0146\35\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\5\3\1\u0147\4\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\3\3"+
    "\1\u0148\3\3\1\0\3\3\1\0\12\3\47\0\1\u0149"+
    "\55\0\2\3\1\0\3\3\4\0\2\3\1\0\1\3"+
    "\1\u014a\5\3\1\0\3\3\1\0\12\3\51\0\1\u014b"+
    "\53\0\2\3\1\0\3\3\4\0\2\3\1\0\3\3"+
    "\1\u014c\3\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\u014d\1\u014e\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\1\3\1\u014f\5\3\1\0\3\3\1\0"+
    "\12\3\57\0\1\u0150\45\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\1\3\1\u0151\1\3\1\0"+
    "\12\3\31\0\2\3\1\0\3\3\4\0\2\3\1\u0152"+
    "\1\u0153\6\3\1\0\3\3\1\0\12\3\51\0\1\u0154"+
    "\53\0\2\3\1\0\3\3\4\0\2\3\1\0\3\3"+
    "\1\u0155\3\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\6\3\1\u0156\1\0"+
    "\3\3\1\0\12\3\52\0\1\u0157\52\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\4\3\1\u0158\2\3\1\0"+
    "\3\3\1\0\12\3\36\0\1\u0159\66\0\2\3\1\0"+
    "\2\3\1\u015a\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\12\3\63\0\1\u015b\41\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\1\3"+
    "\1\u015c\10\3\51\0\1\u015d\65\0\1\u015e\66\0\1\u015f"+
    "\66\0\2\3\1\0\3\3\4\0\2\3\1\0\3\3"+
    "\1\u0160\3\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\3\3\4\0\1\u0161\1\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\2\3\1\u0162"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\12\3"+
    "\36\0\1\u0163\66\0\2\3\1\0\2\3\1\u0164\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\1\3\1\u0165"+
    "\5\3\1\0\3\3\1\0\12\3\36\0\1\u0166\66\0"+
    "\2\3\1\0\2\3\1\u0167\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\12\3\53\0\1\u0168\51\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\5\3\1\u0169\1\3"+
    "\1\0\3\3\1\0\12\3\47\0\1\u016a\55\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\1\3\1\u016b\5\3"+
    "\1\0\3\3\1\0\12\3\54\0\1\u016c\50\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\6\3\1\u016d\1\0"+
    "\3\3\1\0\12\3\54\0\1\u016e\50\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\6\3\1\u016f\1\0\3\3"+
    "\1\0\12\3\36\0\1\u0170\66\0\2\3\1\0\2\3"+
    "\1\u0171\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\12\3\36\0\1\u0172\106\0\1\u0173\76\0\1\u0174\50\0"+
    "\2\3\1\0\2\3\1\u0175\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\12\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\3\3\1\u0176\3\3\1\0\3\3"+
    "\1\0\12\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\6\3\1\u0177\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\2\3\1\u0178\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\12\3\36\0\1\u0179\66\0\2\3"+
    "\1\0\2\3\1\u017a\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\61\0\2\u017b\42\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\7\3\1\0\3\3\1\u017b"+
    "\1\u017c\11\3\47\0\1\u017d\55\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\u017e\5\3\1\0\3\3"+
    "\1\0\12\3\52\0\1\u017f\57\0\1\u0180\104\0\1\u0181"+
    "\55\0\2\3\1\0\3\3\4\0\2\3\1\0\4\3"+
    "\1\u0182\2\3\1\0\3\3\1\0\12\3\31\0\2\3"+
    "\1\0\2\3\1\u0183\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\1\3\1\u0184\5\3\1\0\3\3\1\0"+
    "\12\3\31\0\2\3\1\0\1\u0185\2\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\12\3\73\0\1\u0186"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\11\3\1\u0187\35\0\1\u0188\103\0"+
    "\2\u0189\56\0\2\3\1\0\1\3\1\u018a\1\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\12\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\u0189\1\u018b\6\3"+
    "\1\0\3\3\1\0\12\3\36\0\1\u018c\66\0\2\3"+
    "\1\0\2\3\1\u018d\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\12\3\34\0\1\u018e\70\0\2\3\1\0"+
    "\1\u018f\2\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\12\3\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17580];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\1\1\1\11\27\1\2\11"+
    "\5\1\2\11\1\1\5\11\1\0\6\1\1\0\3\1"+
    "\2\0\1\11\4\1\5\0\17\1\1\11\2\0\11\1"+
    "\5\11\1\1\3\11\1\1\11\11\1\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\4\1\5\0\11\1\1\0"+
    "\2\1\1\0\10\1\1\0\1\1\1\0\5\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\2\11\4\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\1\0\4\1\5\0"+
    "\10\1\1\11\2\1\1\11\3\1\1\0\3\1\1\0"+
    "\1\1\4\0\4\1\1\0\2\1\1\0\3\1\1\11"+
    "\1\1\1\0\2\1\1\11\2\1\1\11\4\1\1\0"+
    "\1\1\1\11\2\1\2\0\2\11\1\0\5\1\1\0"+
    "\4\1\1\0\1\1\1\11\1\1\1\0\1\1\4\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\2\1\1\11"+
    "\4\1\1\0\2\1\1\0\2\1\1\11\1\0\1\11"+
    "\3\1\1\0\1\1\1\11\2\1\1\0\1\1\1\11"+
    "\1\1\2\0\1\11\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\3\0\3\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\3\0\4\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\4\1\1\0\1\1\2\11"+
    "\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[399];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de Sintaxe Java
    public static LinkedList<TError> TabelaER = new  LinkedList<TError>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalisadorLexicoGen(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro Lexico " + yytext() + " Linha " + (yyline+1) +  " Coluna " + (yycolumn+1));
                                     TError dados = new TError(yytext(), yyline, yycolumn, "Erro Lexico", "Simbolo nao permitido");
                                     TabelaER.add(dados);
            }
          case 99: break;
          case 2: 
            { return new Symbol(Simbolos.IDENTIFIER, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 3: 
            { return new Symbol(Simbolos.LITERAL, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 4: 
            { return new Symbol(Simbolos.DOT, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 5: 
            { /*Espacos em branco devem ser ignorados*/
            }
          case 103: break;
          case 6: 
            { return new Symbol(Simbolos.COMMA, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 7: 
            { return new Symbol(Simbolos.AMPER, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 8: 
            { return new Symbol(Simbolos.XOR, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 9: 
            { return new Symbol(Simbolos.SOR, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 10: 
            { return new Symbol(Simbolos.LTHEN, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 11: 
            { return new Symbol(Simbolos.EQU, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 12: 
            { return new Symbol(Simbolos.BTHEN, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 13: 
            { return new Symbol(Simbolos.MOD, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 14: 
            { return new Symbol(Simbolos.OPENPAR, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 15: 
            { return new Symbol(Simbolos.CLOSEPAR, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 16: 
            { return new Symbol(Simbolos.PLUS, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 17: 
            { return new Symbol(Simbolos.MINUS, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 18: 
            { return new Symbol(Simbolos.MULT, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 19: 
            { return new Symbol(Simbolos.DIV, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 20: 
            { return new Symbol(Simbolos.NE, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 21: 
            { return new Symbol(Simbolos.TIL, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 22: 
            { return new Symbol(Simbolos.QUE, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 23: 
            { return new Symbol(Simbolos.OPENBRAC, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 24: 
            { return new Symbol(Simbolos.CLOSEBRAC, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 25: 
            { return new Symbol(Simbolos.OPENKEYS, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 26: 
            { return new Symbol(Simbolos.CLOSEKEYS, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 27: 
            { return new Symbol(Simbolos.SEMIC, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 28: 
            { return new Symbol(Simbolos.COLON, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 29: 
            { return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 30: 
            { return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 31: 
            { return new Symbol(Simbolos.OP_LAND, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 32: 
            { return new Symbol(Simbolos.ASS_AND, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 33: 
            { return new Symbol(Simbolos.ASS_XOR, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 34: 
            { return new Symbol(Simbolos.OP_LOR, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 35: 
            { return new Symbol(Simbolos.ASS_OR, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 36: 
            { return new Symbol(Simbolos.OP_SHL, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 37: 
            { return new Symbol(Simbolos.OP_LE, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 38: 
            { return new Symbol(Simbolos.OP_EQ, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 39: 
            { return new Symbol(Simbolos.OP_GE, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 40: 
            { return new Symbol(Simbolos.OP_SHR, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 41: 
            { return new Symbol(Simbolos.ASS_MOD, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 42: 
            { return new Symbol(Simbolos.ASS_ADD, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 43: 
            { return new Symbol(Simbolos.OP_INC, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 44: 
            { return new Symbol(Simbolos.ASS_SUB, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 45: 
            { return new Symbol(Simbolos.OP_DEC, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 46: 
            { return new Symbol(Simbolos.ASS_MUL, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 47: 
            { return new Symbol(Simbolos.ASS_DIV, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 48: 
            { return new Symbol(Simbolos.OP_NE, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 49: 
            { return new Symbol(Simbolos.OP_DIM, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 50: 
            { return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 51: 
            { return new Symbol(Simbolos.TRY, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 52: 
            { return new Symbol(Simbolos.NEW, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 53: 
            { return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 54: 
            { return new Symbol(Simbolos.ASS_SHL, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 55: 
            { return new Symbol(Simbolos.ASS_SHR, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 56: 
            { return new Symbol(Simbolos.OP_SHRR, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 57: 
            { return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 58: 
            { return new Symbol(Simbolos.BYTE, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 59: 
            { return new Symbol(Simbolos.BOOLLIT, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 60: 
            { return new Symbol(Simbolos.THIS, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 61: 
            { return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 62: 
            { return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 63: 
            { return new Symbol(Simbolos.LONG, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 64: 
            { return new Symbol(Simbolos.VOID, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 65: 
            { return new Symbol(Simbolos.ASS_SHRR, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 66: 
            { return new Symbol(Simbolos.FLOAT, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 67: 
            { return new Symbol(Simbolos.FINAL, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 68: 
            { return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 69: 
            { return new Symbol(Simbolos.SHORT, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 70: 
            { return new Symbol(Simbolos.SUPER, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 71: 
            { return new Symbol(Simbolos.THROW, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 72: 
            { return new Symbol(Simbolos.CATCH, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 73: 
            { return new Symbol(Simbolos.CLASS, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 74: 
            { return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 75: 
            { return new Symbol(Simbolos.JNULL, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 76: 
            { return new Symbol(Simbolos.DOUBLE, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 77: 
            { return new Symbol(Simbolos.STATIC, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 78: 
            { return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 79: 
            { return new Symbol(Simbolos.THROWS, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 80: 
            { return new Symbol(Simbolos.RETURN, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 81: 
            { return new Symbol(Simbolos.NATIVE, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 82: 
            { return new Symbol(Simbolos.IMPORT, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 83: 
            { return new Symbol(Simbolos.PUBLIC, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 84: 
            { return new Symbol(Simbolos.DEFAULT, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 85: 
            { return new Symbol(Simbolos.FINALLY, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 86: 
            { return new Symbol(Simbolos.EXTENDS, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 87: 
            { return new Symbol(Simbolos.BOOLEAN, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 88: 
            { return new Symbol(Simbolos.PACKAGE, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 89: 
            { return new Symbol(Simbolos.PRIVATE, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 90: 
            { return new Symbol(Simbolos.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 91: 
            { return new Symbol(Simbolos.CONTINUE, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 92: 
            { return new Symbol(Simbolos.VOLATILE, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 93: 
            { return new Symbol(Simbolos.TRANSIENT, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 94: 
            { return new Symbol(Simbolos.INTERFACE, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 95: 
            { return new Symbol(Simbolos.PROTECTED, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 96: 
            { return new Symbol(Simbolos.INSTANCEOF, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 97: 
            { return new Symbol(Simbolos.IMPLEMENTS, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 98: 
            { return new Symbol(Simbolos.SYNCHRONIZED, yycolumn, yyline, yytext());
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
