/* The following code was generated by JFlex 1.6.1 */

/* Código do Usuário */

package Analisadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/* Opções e Declarações */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalisadorLexico_1.jflex</tt>
 */
public class Analisador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 56, 56, 57, 56, 56,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    56, 45,  0,  0,  0, 38, 32, 55, 39, 40, 43, 41, 52, 42,  3, 44, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 54, 53, 35, 36, 37, 47, 
     0,  4,  5, 10, 22, 13, 23, 25, 18, 20, 30, 16, 12, 26, 14, 11, 
    27,  1,  9,  7,  8, 21, 28, 29, 24, 17, 31, 48,  0, 49, 33,  1, 
     0,  4,  5, 10, 22, 13, 23, 25, 18, 20, 30, 16, 12, 26, 14, 11, 
    27,  1,  9,  7,  8, 21, 28, 29, 24, 17, 31, 50, 34, 51, 46,  0, 
     0,  0,  0,  0,  0, 57,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\2\1\1\10\2\1\1"+
    "\10\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\1\1\33\1\2\1\34\4\2\5\0\17\2\1\0"+
    "\5\2\1\0\1\35\1\0\1\2\1\35\1\2\1\36"+
    "\4\2\1\0\13\2\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\0\4\2\5\0\6\2\1\64\2\2\1\0\1\2"+
    "\1\0\2\2\1\0\10\2\1\0\1\2\1\0\3\2"+
    "\1\65\1\0\1\66\2\0\1\2\1\66\5\2\1\67"+
    "\1\2\1\0\6\2\1\0\2\2\1\70\1\2\1\0"+
    "\1\2\1\0\2\2\1\71\1\72\1\73\1\74\1\0"+
    "\3\2\1\75\5\0\6\2\1\76\1\2\2\77\2\100"+
    "\1\2\1\101\1\102\1\101\1\102\1\2\1\0\2\2"+
    "\1\0\1\2\1\103\2\2\1\104\1\0\1\2\2\105"+
    "\1\2\1\0\1\2\5\0\7\2\1\0\1\2\1\0"+
    "\2\2\1\106\1\2\1\0\2\2\1\0\3\2\2\107"+
    "\1\0\2\2\1\110\1\0\1\2\2\111\1\2\2\0"+
    "\1\112\1\113\1\0\2\2\1\112\1\113\1\2\1\0"+
    "\1\2\1\114\1\2\1\115\2\116\1\0\1\2\2\117"+
    "\1\120\1\2\1\0\2\2\1\0\1\2\2\0\1\121"+
    "\2\0\2\2\1\121\4\2\1\76\1\122\2\123\2\2"+
    "\1\0\2\2\1\0\1\2\1\0\2\2\2\124\1\125"+
    "\1\0\2\2\1\126\1\0\1\127\1\126\1\2\1\127"+
    "\1\0\1\2\2\130\1\131\1\0\2\2\1\0\2\2"+
    "\2\132\2\0\1\133\1\0\2\2\1\133\1\2\1\134"+
    "\1\2\1\0\1\2\1\135\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\2\136\1\0\1\2\1\0\1\2\1\137"+
    "\1\0\1\2\1\0\1\2\1\0\2\2\2\34\2\140"+
    "\3\0\3\2\1\141\2\142\2\143\2\144\1\2\2\145"+
    "\1\0\1\2\2\146\1\0\1\2\1\0\1\2\2\147"+
    "\1\150\3\0\4\2\2\151\1\0\1\2\2\152\1\0"+
    "\1\153\1\0\1\2\1\153\1\2\1\154\1\0\1\2"+
    "\1\155\1\156\1\155\1\156\1\0\1\2\2\157";

  private static int [] zzUnpackAction() {
    int [] result = new int[454];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\72"+
    "\0\72\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\72\0\72"+
    "\0\u0828\0\72\0\72\0\72\0\72\0\72\0\72\0\u0862"+
    "\0\72\0\u089c\0\256\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be"+
    "\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e"+
    "\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\72\0\u0fdc\0\u1016\0\164\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a"+
    "\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\72\0\72\0\72\0\72\0\72\0\u1464\0\72\0\72"+
    "\0\72\0\u149e\0\72\0\72\0\72\0\72\0\72\0\72"+
    "\0\72\0\u14d8\0\72\0\72\0\72\0\u1512\0\u154c\0\u1586"+
    "\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756"+
    "\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\164\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\164\0\u1dae\0\u1de8\0\u1e22"+
    "\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\164\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\164\0\u22aa\0\u22e4\0\u231e"+
    "\0\u2358\0\u2392\0\u23cc\0\72\0\72\0\u2406\0\72\0\u2440"+
    "\0\u247a\0\u24b4\0\u24ee\0\164\0\u2528\0\u2562\0\u259c\0\u25d6"+
    "\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\164"+
    "\0\u27a6\0\72\0\164\0\72\0\164\0\u27e0\0\72\0\72"+
    "\0\164\0\164\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c"+
    "\0\164\0\u2976\0\u29b0\0\164\0\u29ea\0\u2a24\0\72\0\164"+
    "\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46\0\u2b80\0\u2bba\0\u2bf4"+
    "\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16\0\u2d50\0\u2d8a\0\u2dc4"+
    "\0\u2dfe\0\u2e38\0\u2e72\0\u2eac\0\164\0\u2ee6\0\u2f20\0\u2f5a"+
    "\0\u2f94\0\u2fce\0\u3008\0\u3042\0\u307c\0\72\0\164\0\u30b6"+
    "\0\u30f0\0\u312a\0\72\0\u3164\0\u319e\0\72\0\164\0\u31d8"+
    "\0\u3212\0\u324c\0\72\0\72\0\u3286\0\u32c0\0\u32fa\0\164"+
    "\0\164\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c\0\164\0\72"+
    "\0\164\0\u3456\0\u3490\0\72\0\164\0\164\0\u34ca\0\u3504"+
    "\0\u353e\0\u3578\0\u35b2\0\u35ec\0\u3626\0\u3660\0\72\0\u369a"+
    "\0\u36d4\0\u370e\0\u3748\0\164\0\u3782\0\u37bc\0\u37f6\0\u3830"+
    "\0\72\0\164\0\u386a\0\u38a4\0\u38de\0\u3918\0\u3952\0\u398c"+
    "\0\u39c6\0\u3a00\0\u3a3a\0\u3a74\0\u3aae\0\u3ae8\0\72\0\164"+
    "\0\164\0\u3b22\0\u3b5c\0\u3b96\0\72\0\u3bd0\0\72\0\164"+
    "\0\u3c0a\0\164\0\u3c44\0\u3c7e\0\72\0\164\0\164\0\u3cb8"+
    "\0\u3cf2\0\u3d2c\0\u3d66\0\u3da0\0\u3dda\0\72\0\164\0\u3e14"+
    "\0\u3e4e\0\72\0\u3e88\0\u3ec2\0\u3efc\0\164\0\u3f36\0\164"+
    "\0\u3f70\0\u3faa\0\u3fe4\0\164\0\u401e\0\u4058\0\u4092\0\u40cc"+
    "\0\u4106\0\u4140\0\u417a\0\72\0\164\0\u41b4\0\u41ee\0\u4228"+
    "\0\u4262\0\164\0\u429c\0\u42d6\0\u4310\0\u434a\0\u4384\0\u43be"+
    "\0\u43f8\0\72\0\164\0\72\0\164\0\u4432\0\u446c\0\u44a6"+
    "\0\u44e0\0\u451a\0\u4554\0\164\0\72\0\164\0\72\0\164"+
    "\0\72\0\164\0\u458e\0\72\0\164\0\u45c8\0\u4602\0\72"+
    "\0\164\0\u463c\0\u4676\0\u46b0\0\u46ea\0\72\0\164\0\164"+
    "\0\u4724\0\u475e\0\u4798\0\u47d2\0\u480c\0\u4846\0\u4880\0\72"+
    "\0\164\0\u48ba\0\u48f4\0\72\0\164\0\u492e\0\72\0\u4968"+
    "\0\u49a2\0\164\0\u49dc\0\164\0\u4a16\0\u4a50\0\72\0\72"+
    "\0\164\0\164\0\u4a8a\0\u4ac4\0\72\0\164";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[454];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\2"+
    "\3\3\1\20\1\21\1\3\1\22\1\23\1\3\1\24"+
    "\1\3\1\25\1\26\1\27\1\30\1\3\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\74\0"+
    "\1\3\1\62\1\63\2\3\1\0\10\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\63\1\0\3\63\1\0\10\63"+
    "\1\0\3\63\1\0\14\63\33\0\1\3\1\62\1\63"+
    "\1\3\1\64\1\0\10\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\2\3\1\65"+
    "\1\3\1\66\3\3\1\0\1\3\1\67\1\3\1\0"+
    "\14\3\42\0\1\70\10\0\1\71\1\72\2\0\1\73"+
    "\7\0\1\74\35\0\1\3\1\62\1\63\2\3\1\0"+
    "\1\3\1\75\6\3\1\0\1\3\1\76\1\77\1\0"+
    "\1\3\1\100\7\3\1\101\2\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\2\3\1\102\5\3\1\0\2\3"+
    "\1\103\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\6\3\1\104\1\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\1\105\1\3\1\0\4\3"+
    "\1\106\1\107\2\3\1\0\2\3\1\110\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\1\111\5\3\1\112\4\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\4\3\1\113\3\3"+
    "\1\0\3\3\1\114\1\115\13\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\5\3\1\116\2\3\1\0\3\3"+
    "\1\0\4\3\1\117\7\3\33\0\1\3\1\62\1\63"+
    "\1\120\1\3\1\0\6\3\1\121\1\3\1\0\3\3"+
    "\1\0\14\3\50\0\1\122\10\0\1\123\2\0\1\124"+
    "\40\0\1\3\1\62\1\63\2\3\1\0\7\3\1\125"+
    "\1\0\3\3\1\0\3\3\1\126\2\3\1\127\5\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\4\3\1\130"+
    "\1\3\1\131\1\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\1\132\1\3\1\0\4\3\1\133"+
    "\1\134\2\3\1\0\3\3\1\135\1\136\1\137\12\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\4\3\1\140"+
    "\1\3\1\141\1\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\1\142\1\3\1\0\2\3\1\143"+
    "\5\3\1\0\3\3\1\0\1\3\1\144\12\3\33\0"+
    "\1\3\1\62\1\63\1\145\1\3\1\0\4\3\1\146"+
    "\3\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\10\3\1\0\2\3\1\147\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\7\3"+
    "\1\150\1\0\3\3\1\0\14\3\72\0\1\151\3\0"+
    "\1\152\71\0\1\153\67\0\1\154\1\0\1\155\70\0"+
    "\1\156\1\157\71\0\1\160\71\0\1\161\1\162\70\0"+
    "\1\163\71\0\1\164\4\0\1\165\64\0\1\166\5\0"+
    "\1\167\63\0\1\170\71\0\1\171\6\0\1\172\62\0"+
    "\1\173\106\0\1\174\77\0\1\175\3\0\2\62\1\0"+
    "\2\62\1\0\10\62\1\0\3\62\1\0\14\62\33\0"+
    "\1\3\1\62\1\63\2\3\1\176\1\177\7\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\6\3\1\200\1\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\4\3\1\201"+
    "\3\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\1\3\1\202\6\3\1\0\3\3"+
    "\1\0\14\3\36\0\1\203\103\0\1\204\66\0\1\205"+
    "\111\0\1\206\61\0\2\207\46\0\1\3\1\62\1\63"+
    "\1\210\1\3\1\0\10\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\7\3\1\211"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\4\3\1\212\3\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\7\3\1\213\4\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\10\3\1\0\3\3\1\207"+
    "\1\214\13\3\33\0\1\3\1\62\1\63\1\215\1\3"+
    "\1\0\10\3\1\0\1\3\1\216\1\3\1\0\1\3"+
    "\1\217\12\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\2\3\1\220\5\3\1\0\3\3\1\221\1\222\13\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\223\1\224\1\225"+
    "\6\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\226\1\227\1\230\6\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\7\3\1\231\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\1\232\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\1\233\1\3"+
    "\1\0\10\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\1\3\1\234\6\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\6\3\1\235\1\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\7\3\1\236"+
    "\1\0\3\3\1\0\14\3\42\0\1\237\62\0\1\3"+
    "\1\62\1\63\2\3\1\0\1\3\1\240\6\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\241\1\242\7\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\1\3\1\243\6\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\1\3\1\244\6\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\11\3\1\245\2\3\40\0\2\246"+
    "\1\247\5\0\1\250\106\0\1\251\37\0\1\3\1\62"+
    "\1\63\2\3\1\246\1\252\1\253\5\3\1\254\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\7\3\1\255\4\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\1\256\12\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\10\3\1\0\3\3\1\0\3\3"+
    "\1\257\10\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\5\3\1\260\2\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\2\3\1\261\5\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\4\3\1\262\3\3\1\0\3\3\1\0"+
    "\14\3\50\0\1\263\54\0\1\3\1\62\1\63\2\3"+
    "\1\0\7\3\1\264\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\1\3\1\265\6\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\1\3\1\266\6\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\7\3"+
    "\1\267\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\3\3\1\270\4\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\4\3\1\271\3\3\1\0\3\3\1\272\1\273\13\3"+
    "\33\0\1\3\1\62\1\63\1\3\1\274\1\0\10\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\2\3\1\275\5\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\5\3"+
    "\1\276\2\3\1\0\3\3\1\277\1\300\13\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\10\3\1\0\3\3"+
    "\1\301\1\302\13\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\1\303\12\3"+
    "\76\0\1\304\71\0\1\305\1\306\77\0\1\307\26\0"+
    "\1\310\62\0\1\3\1\62\1\63\2\3\1\0\1\3"+
    "\1\311\6\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\1\312\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\5\3\1\313\2\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\6\3\1\314\1\3"+
    "\1\0\3\3\1\0\14\3\42\0\1\315\73\0\1\316"+
    "\70\0\1\317\75\0\1\320\64\0\1\321\62\0\1\3"+
    "\1\62\1\63\2\3\1\0\1\3\1\322\6\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\3\3\1\323\4\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\2\3\1\324"+
    "\5\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\6\3\1\325\1\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\1\3\1\326\6\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\7\3\1\327\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\6\3\1\330\1\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\4\3\1\331"+
    "\3\3\1\0\3\3\1\0\14\3\40\0\2\332\63\0"+
    "\1\3\1\62\1\63\2\3\1\332\1\333\7\3\1\0"+
    "\3\3\1\0\14\3\42\0\1\334\62\0\1\3\1\62"+
    "\1\63\2\3\1\0\1\3\1\335\6\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\1\336\12\3\42\0"+
    "\1\337\4\0\1\340\55\0\1\3\1\62\1\63\2\3"+
    "\1\0\1\3\1\341\4\3\1\342\1\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\3\3\1\343\4\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\344\1\345\1\346\6\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\347\1\350\7\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\2\3\1\351"+
    "\5\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\6\3\1\352\1\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\2\3\1\353\5\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\10\3\1\0\3\3"+
    "\1\0\5\3\1\354\6\3\47\0\1\355\55\0\1\3"+
    "\1\62\1\63\2\3\1\0\6\3\1\356\1\3\1\0"+
    "\3\3\1\0\14\3\47\0\1\357\55\0\1\3\1\62"+
    "\1\63\2\3\1\0\6\3\1\360\1\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\6\3\1\361\1\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\10\3\1\0\3\3"+
    "\1\362\1\363\13\3\42\0\1\364\76\0\1\365\71\0"+
    "\1\366\67\0\1\367\1\370\56\0\1\3\1\62\1\63"+
    "\2\3\1\0\1\3\1\371\6\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\6\3"+
    "\1\372\1\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\6\3\1\373\1\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\4\3\1\374\1\375\2\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\1\3\1\376\1\0"+
    "\10\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\1\377\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\u0100\1\217"+
    "\7\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\1\u0101\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\36\0\1\u0102\66\0\1\3\1\62\1\63\1\u0103"+
    "\1\3\1\0\10\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\10\3\1\0\3\3"+
    "\1\0\1\3\1\u0104\12\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\4\3\1\u0105\3\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\6\3"+
    "\1\u0106\1\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\10\3\1\u0107\1\u0108\2\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\1\3\1\u0109\6\3\1\0\3\3\1\0\14\3\66\0"+
    "\1\u010a\36\0\1\3\1\62\1\63\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\1\u010b\3\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\5\3\1\u010c\2\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\1\u010d"+
    "\1\3\1\0\10\3\1\0\3\3\1\0\14\3\60\0"+
    "\1\u010e\44\0\1\3\1\62\1\63\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\2\3\1\u010f\11\3\46\0\1\u0110"+
    "\56\0\1\3\1\62\1\63\2\3\1\0\5\3\1\u0111"+
    "\2\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\5\3\1\u0112\2\3\1\0\3\3"+
    "\1\0\14\3\76\0\1\u0113\36\0\1\u0114\61\0\1\3"+
    "\1\62\1\63\2\3\1\0\2\3\1\u0115\5\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\10\3\1\u0116\1\u0117\2\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\6\3\1\u0118\1\3"+
    "\1\0\3\3\1\0\14\3\55\0\2\u0119\67\0\1\u011a"+
    "\57\0\1\u011b\72\0\1\u011c\72\0\1\u011d\60\0\1\3"+
    "\1\62\1\63\2\3\1\0\10\3\1\0\3\3\1\u0119"+
    "\1\u011e\13\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\10\3\1\0\2\3\1\u011f\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\1\3\1\u0120\6\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\2\3\1\u0121\5\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\3\3\1\u0122"+
    "\4\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\u0123\1\u0124\7\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\11\3\1\u0125\2\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\2\3\1\u0126\5\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\10\3\1\0\2\3\1\u0127\1\0\14\3\42\0"+
    "\1\u0128\62\0\1\3\1\62\1\63\2\3\1\0\1\3"+
    "\1\u0129\6\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\10\3\1\0\3\3\1\u012a"+
    "\1\u012b\13\3\40\0\2\u012c\63\0\1\3\1\62\1\63"+
    "\2\3\1\u012c\1\u012d\7\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\2\3\1\u012e"+
    "\5\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\1\u012f\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\43\0\1\u0130\61\0\1\3\1\62\1\63\2\3"+
    "\1\0\2\3\1\u0131\5\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\7\3\1\u0132"+
    "\1\0\3\3\1\0\14\3\66\0\1\u0133\36\0\1\3"+
    "\1\62\1\63\2\3\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\1\u0134\3\3\36\0\1\u0135\76\0\1\u0136\71\0"+
    "\1\u0137\71\0\1\u0138\75\0\1\u0139\55\0\1\3\1\62"+
    "\1\63\1\u013a\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\2\3"+
    "\1\u013b\5\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\2\3\1\u013c\5\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\2\3\1\u013d\5\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\6\3\1\u013e"+
    "\1\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\5\3\1\u013f\2\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\1\u0140\12\3\47\0"+
    "\1\u0141\55\0\1\3\1\62\1\63\2\3\1\0\1\3"+
    "\1\u0142\6\3\1\0\3\3\1\0\14\3\46\0\1\u0143"+
    "\56\0\1\3\1\62\1\63\2\3\1\0\5\3\1\u0144"+
    "\2\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\2\3\1\u0145\5\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\2\3\1\u0146\5\3\1\0\3\3\1\0\14\3\36\0"+
    "\1\u0147\66\0\1\3\1\62\1\63\1\u0148\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\6\3\1\u0149\1\3\1\0\3\3"+
    "\1\0\14\3\36\0\1\u014a\66\0\1\3\1\62\1\63"+
    "\1\u014b\1\3\1\0\10\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\10\3\1\0"+
    "\3\3\1\u014c\1\u014d\13\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\1\3\1\u014e\6\3\1\0\3\3\1\0"+
    "\14\3\47\0\1\u014f\55\0\1\3\1\62\1\63\2\3"+
    "\1\0\6\3\1\u0150\1\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\5\3\1\u0151"+
    "\2\3\1\0\3\3\1\0\14\3\36\0\1\u0152\66\0"+
    "\1\3\1\62\1\63\1\u0153\1\3\1\0\10\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\1\u0154"+
    "\1\3\1\0\10\3\1\0\3\3\1\0\14\3\44\0"+
    "\1\u0155\70\0\1\u0156\102\0\1\u0157\50\0\1\3\1\62"+
    "\1\63\2\3\1\0\3\3\1\u0158\4\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\2\3\1\u0159\5\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\10\3\1\0\2\3"+
    "\1\u015a\1\0\14\3\55\0\2\u015b\46\0\1\3\1\62"+
    "\1\63\2\3\1\0\10\3\1\0\3\3\1\u015b\1\u015c"+
    "\13\3\33\0\1\3\1\62\1\63\2\3\1\u015d\1\u015e"+
    "\7\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\7\3\1\u015f\1\0\3\3\1\0"+
    "\14\3\50\0\1\u0160\54\0\1\3\1\62\1\63\2\3"+
    "\1\0\7\3\1\u0161\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\1\3\1\u0162\6\3"+
    "\1\0\3\3\1\0\14\3\36\0\1\u0163\66\0\1\3"+
    "\1\62\1\63\1\u0164\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\2\3\1\u0165\11\3\47\0"+
    "\1\u0166\55\0\1\3\1\62\1\63\2\3\1\0\6\3"+
    "\1\u0167\1\3\1\0\3\3\1\0\14\3\50\0\1\u0168"+
    "\102\0\1\u0169\52\0\1\u016a\113\0\1\u016b\40\0\1\3"+
    "\1\62\1\63\2\3\1\0\7\3\1\u016c\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\3\3\1\u016d\10\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\1\3\1\u016e\6\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\10\3\1\0\3\3\1\0\6\3\1\u016f"+
    "\5\3\33\0\1\3\1\62\1\63\2\3\1\0\6\3"+
    "\1\u0170\1\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\5\3\1\u0171\2\3\1\0"+
    "\3\3\1\0\14\3\46\0\1\u0172\56\0\1\3\1\62"+
    "\1\63\2\3\1\0\5\3\1\u0173\2\3\1\0\3\3"+
    "\1\0\14\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\6\3\1\u0174\1\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\10\3\1\0\3\3"+
    "\1\u0175\1\u0176\13\3\63\0\1\u0177\41\0\1\3\1\62"+
    "\1\63\2\3\1\0\10\3\1\0\3\3\1\0\5\3"+
    "\1\u0178\6\3\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\3\3\1\u0179\4\3\1\0\3\3\1\0\14\3\42\0"+
    "\1\u017a\62\0\1\3\1\62\1\63\2\3\1\0\1\3"+
    "\1\u017b\6\3\1\0\3\3\1\0\14\3\44\0\1\u017c"+
    "\60\0\1\3\1\62\1\63\2\3\1\0\3\3\1\u017d"+
    "\4\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\10\3\1\0\3\3\1\u017e\1\u017f"+
    "\13\3\44\0\1\u0180\60\0\1\3\1\62\1\63\2\3"+
    "\1\0\3\3\1\u0181\4\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\7\3\1\u0182"+
    "\1\0\3\3\1\0\14\3\45\0\1\u0183\57\0\1\3"+
    "\1\62\1\63\2\3\1\0\4\3\1\u0184\3\3\1\0"+
    "\3\3\1\0\14\3\47\0\1\u0185\55\0\1\3\1\62"+
    "\1\63\2\3\1\0\6\3\1\u0186\1\3\1\0\3\3"+
    "\1\0\14\3\57\0\1\u0187\45\0\1\3\1\62\1\63"+
    "\2\3\1\0\10\3\1\0\3\3\1\0\1\3\1\u0188"+
    "\12\3\33\0\1\3\1\62\1\63\2\3\1\0\4\3"+
    "\1\u0189\3\3\1\0\3\3\1\0\14\3\46\0\1\u018a"+
    "\56\0\1\3\1\62\1\63\2\3\1\0\5\3\1\u018b"+
    "\2\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\u018c\1\u018d\7\3\1\0\3\3\1\0"+
    "\14\3\44\0\1\u018e\63\0\1\u018f\102\0\1\u0190\55\0"+
    "\1\3\1\62\1\63\2\3\1\0\3\3\1\u0191\4\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\1\u0192\1\3\1\0\10\3\1\0\3\3\1\0\14\3"+
    "\33\0\1\3\1\62\1\63\2\3\1\0\6\3\1\u0193"+
    "\1\3\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\1\3\1\u0194\6\3\1\0\3\3"+
    "\1\0\14\3\53\0\1\u0195\51\0\1\3\1\62\1\63"+
    "\2\3\1\0\10\3\1\0\1\3\1\u0196\1\3\1\0"+
    "\14\3\44\0\1\u0197\60\0\1\3\1\62\1\63\2\3"+
    "\1\0\3\3\1\u0198\4\3\1\0\3\3\1\0\14\3"+
    "\47\0\1\u0199\55\0\1\3\1\62\1\63\2\3\1\0"+
    "\6\3\1\u019a\1\3\1\0\3\3\1\0\14\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\0\1\3\1\u019b\6\3"+
    "\1\0\3\3\1\0\14\3\47\0\1\u019c\55\0\1\3"+
    "\1\62\1\63\2\3\1\0\6\3\1\u019d\1\3\1\0"+
    "\3\3\1\0\14\3\46\0\1\u019e\56\0\1\3\1\62"+
    "\1\63\2\3\1\0\5\3\1\u019f\2\3\1\0\3\3"+
    "\1\0\14\3\42\0\1\u01a0\62\0\1\3\1\62\1\63"+
    "\2\3\1\0\1\3\1\u01a1\6\3\1\0\3\3\1\0"+
    "\14\3\50\0\1\u01a2\54\0\1\3\1\62\1\63\2\3"+
    "\1\0\7\3\1\u01a3\1\0\3\3\1\0\14\3\50\0"+
    "\1\u01a4\54\0\1\3\1\62\1\63\2\3\1\0\7\3"+
    "\1\u01a5\1\0\3\3\1\0\14\3\47\0\1\u01a6\55\0"+
    "\1\3\1\62\1\63\2\3\1\0\6\3\1\u01a7\1\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\2\3\1\u01a8\5\3\1\0\3\3\1\0"+
    "\14\3\47\0\1\u01a9\66\0\1\u01aa\75\0\1\u01ab\54\0"+
    "\1\3\1\62\1\63\2\3\1\0\6\3\1\u01ac\1\3"+
    "\1\0\3\3\1\0\14\3\33\0\1\3\1\62\1\63"+
    "\2\3\1\0\3\3\1\u01ad\4\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\7\3"+
    "\1\u01ae\1\0\3\3\1\0\14\3\33\0\1\3\1\62"+
    "\1\63\2\3\1\0\6\3\1\u01af\1\3\1\0\3\3"+
    "\1\0\14\3\47\0\1\u01b0\55\0\1\3\1\62\1\63"+
    "\2\3\1\0\6\3\1\u01b1\1\3\1\0\3\3\1\0"+
    "\14\3\55\0\2\u01b2\46\0\1\3\1\62\1\63\2\3"+
    "\1\0\10\3\1\0\3\3\1\u01b2\1\u01b3\13\3\42\0"+
    "\1\u01b4\62\0\1\3\1\62\1\63\2\3\1\0\1\3"+
    "\1\u01b5\6\3\1\0\3\3\1\0\14\3\45\0\1\u01b6"+
    "\73\0\1\u01b7\64\0\1\u01b8\62\0\1\3\1\62\1\63"+
    "\2\3\1\0\4\3\1\u01b9\3\3\1\0\3\3\1\0"+
    "\14\3\33\0\1\3\1\62\1\63\2\3\1\0\6\3"+
    "\1\u01ba\1\3\1\0\3\3\1\0\14\3\33\0\1\3"+
    "\1\62\1\63\2\3\1\0\1\3\1\u01bb\6\3\1\0"+
    "\3\3\1\0\14\3\33\0\1\3\1\62\1\63\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\2\3\1\u01bc\11\3"+
    "\71\0\1\u01bd\33\0\1\3\1\62\1\63\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\13\3\1\u01be\61\0\1\u01bf"+
    "\50\0\2\u01c0\63\0\1\3\1\62\1\63\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\3\3\1\u01c1\10\3\33\0"+
    "\1\3\1\62\1\63\2\3\1\u01c0\1\u01c2\7\3\1\0"+
    "\3\3\1\0\14\3\47\0\1\u01c3\55\0\1\3\1\62"+
    "\1\63\2\3\1\0\6\3\1\u01c4\1\3\1\0\3\3"+
    "\1\0\14\3\60\0\1\u01c5\44\0\1\3\1\62\1\63"+
    "\2\3\1\0\10\3\1\0\3\3\1\0\2\3\1\u01c6"+
    "\11\3\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19198];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\35\1\2\11\5\1\2\11\1\1\6\11"+
    "\1\1\1\11\6\1\5\0\17\1\1\0\5\1\1\0"+
    "\1\11\1\0\10\1\1\0\13\1\5\11\1\1\3\11"+
    "\1\1\7\11\1\1\3\11\1\0\4\1\5\0\11\1"+
    "\1\0\1\1\1\0\2\1\1\0\10\1\1\0\1\1"+
    "\1\0\4\1\1\0\1\1\2\0\11\1\1\0\6\1"+
    "\1\0\4\1\1\0\1\1\1\0\2\1\2\11\1\1"+
    "\1\11\1\0\4\1\5\0\10\1\1\11\1\1\1\11"+
    "\2\1\2\11\3\1\1\0\2\1\1\0\5\1\1\0"+
    "\1\1\1\11\2\1\1\0\1\1\5\0\7\1\1\0"+
    "\1\1\1\0\4\1\1\0\2\1\1\0\3\1\1\11"+
    "\1\1\1\0\2\1\1\11\1\0\1\1\1\11\2\1"+
    "\2\0\2\11\1\0\5\1\1\0\4\1\1\11\1\1"+
    "\1\0\1\1\1\11\3\1\1\0\2\1\1\0\1\1"+
    "\2\0\1\11\2\0\7\1\1\11\5\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\11\2\1\1\0\2\1"+
    "\1\11\1\0\1\11\3\1\1\0\1\1\1\11\2\1"+
    "\1\0\2\1\1\0\2\1\1\11\1\1\2\0\1\11"+
    "\1\0\6\1\1\0\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\11\1\1"+
    "\1\11\1\1\3\0\4\1\1\11\1\1\1\11\1\1"+
    "\1\11\2\1\1\11\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\1\3\0\4\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1\1\0\1\11"+
    "\1\0\4\1\1\0\1\1\2\11\2\1\1\0\1\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[454];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de Sintaxe Java
    public static LinkedList<TError> TabelaER = new  LinkedList<TError>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro Léxico " + yytext() + "Linha " + yyline +  "Coluna " + yycolumn);
                                     TError dados = new TError(yytext(), yyline, yycolumn, "Erro Lexico", "Simbolo nao permitido");
                                     TabelaER.add(dados);
            }
          case 112: break;
          case 2: 
            { return new Symbol(Simbolos.IDENTIFIER, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 3: 
            { return new Symbol(Simbolos.DOT, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 4: 
            { return new Symbol(Simbolos.AMPER, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 5: 
            { return new Symbol(Simbolos.XOR, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 6: 
            { return new Symbol(Simbolos.SOR, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 7: 
            { return new Symbol(Simbolos.LTHEN, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 8: 
            { return new Symbol(Simbolos.EQU, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 9: 
            { return new Symbol(Simbolos.BTHEN, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 10: 
            { return new Symbol(Simbolos.MOD, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 11: 
            { return new Symbol(Simbolos.OPENPAR, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 12: 
            { return new Symbol(Simbolos.CLOSEPAR, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 13: 
            { return new Symbol(Simbolos.PLUS, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 14: 
            { return new Symbol(Simbolos.MINUS, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 15: 
            { return new Symbol(Simbolos.MULT, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 16: 
            { return new Symbol(Simbolos.DIV, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 17: 
            { return new Symbol(Simbolos.NE, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 18: 
            { return new Symbol(Simbolos.TIL, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 19: 
            { return new Symbol(Simbolos.QUE, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 20: 
            { return new Symbol(Simbolos.OPENBRAC, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 21: 
            { return new Symbol(Simbolos.CLOSEBRAC, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 22: 
            { return new Symbol(Simbolos.OPENKEYS, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 23: 
            { return new Symbol(Simbolos.CLOSEKEYS, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 24: 
            { return new Symbol(Simbolos.COMMA, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 25: 
            { return new Symbol(Simbolos.SEMIC, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 26: 
            { return new Symbol(Simbolos.COLON, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 27: 
            { /*Espacos em branco devem ser ignorados*/
            }
          case 138: break;
          case 28: 
            { return new Symbol(Simbolos.LITERAL, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 29: 
            { return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 30: 
            { return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 31: 
            { return new Symbol(Simbolos.OP_LAND, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 32: 
            { return new Symbol(Simbolos.ASS_AND, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 33: 
            { return new Symbol(Simbolos.ASS_XOR, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 34: 
            { return new Symbol(Simbolos.OP_LOR, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 35: 
            { return new Symbol(Simbolos.ASS_OR, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 36: 
            { return new Symbol(Simbolos.OP_SHL, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 37: 
            { return new Symbol(Simbolos.OP_LE, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 38: 
            { return new Symbol(Simbolos.OP_EQ, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 39: 
            { return new Symbol(Simbolos.OP_GE, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 40: 
            { return new Symbol(Simbolos.OP_SHR, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 41: 
            { return new Symbol(Simbolos.ASS_MOD, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 42: 
            { return new Symbol(Simbolos.ASS_ADD, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 43: 
            { return new Symbol(Simbolos.OP_INC, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 44: 
            { return new Symbol(Simbolos.ASS_SUB, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 45: 
            { return new Symbol(Simbolos.OP_DEC, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 46: 
            { return new Symbol(Simbolos.ASS_MUL, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 47: 
            { return new Symbol(Simbolos.ASS_DIV, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 48: 
            { return new Symbol(Simbolos.COMMENTS1, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 49: 
            { return new Symbol(Simbolos.OP_NE, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 50: 
            { return new Symbol(Simbolos.OP_DIM, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 51: 
            { return new Symbol(Simbolos.STRG, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 52: 
            { return new Symbol(Simbolos.TRY, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 53: 
            { return new Symbol(Simbolos.NEW, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 54: 
            { return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 55: 
            { return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 56: 
            { return new Symbol(Simbolos.VAR, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 57: 
            { return new Symbol(Simbolos.ASS_SHL, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 58: 
            { return new Symbol(Simbolos.ASS_SHR, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 59: 
            { return new Symbol(Simbolos.OP_SHRR, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 60: 
            { return new Symbol(Simbolos.COMMENTS2, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 61: 
            { return new Symbol(Simbolos.BYTE, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 62: 
            { return new Symbol(Simbolos.BOOLLIT, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 63: 
            { return new Symbol(Simbolos.THIS, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 64: 
            { return new Symbol(Simbolos.REST, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 65: 
            { return new Symbol(Simbolos.CAST, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 66: 
            { return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 67: 
            { return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 68: 
            { return new Symbol(Simbolos.LONG, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 69: 
            { return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 70: 
            { return new Symbol(Simbolos.GOTO, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 71: 
            { return new Symbol(Simbolos.VOID, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 72: 
            { return new Symbol(Simbolos.ASS_SHRR, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 73: 
            { return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 74: 
            { return new Symbol(Simbolos.SHORT, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 75: 
            { return new Symbol(Simbolos.SUPER, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 76: 
            { return new Symbol(Simbolos.THROW, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 77: 
            { return new Symbol(Simbolos.CATCH, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 78: 
            { return new Symbol(Simbolos.CONST, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 79: 
            { return new Symbol(Simbolos.CLAS, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 80: 
            { return new Symbol(Simbolos.OUTER, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 81: 
            { return new Symbol(Simbolos.INNER, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 82: 
            { return new Symbol(Simbolos.FLOAT, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 83: 
            { return new Symbol(Simbolos.FINAL, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 84: 
            { return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 85: 
            { return new Symbol(Simbolos.JNULL, yycolumn, yyline, yytext());
            }
          case 196: break;
          case 86: 
            { return new Symbol(Simbolos.STATIC, yycolumn, yyline, yytext());
            }
          case 197: break;
          case 87: 
            { return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 198: break;
          case 88: 
            { return new Symbol(Simbolos.THROWS, yycolumn, yyline, yytext());
            }
          case 199: break;
          case 89: 
            { return new Symbol(Simbolos.RETURN, yycolumn, yyline, yytext());
            }
          case 200: break;
          case 90: 
            { return new Symbol(Simbolos.NATIVE, yycolumn, yyline, yytext());
            }
          case 201: break;
          case 91: 
            { return new Symbol(Simbolos.IMPOR, yycolumn, yyline, yytext());
            }
          case 202: break;
          case 92: 
            { return new Symbol(Simbolos.DOUBLE, yycolumn, yyline, yytext());
            }
          case 203: break;
          case 93: 
            { return new Symbol(Simbolos.FUTURE, yycolumn, yyline, yytext());
            }
          case 204: break;
          case 94: 
            { return new Symbol(Simbolos.PUBLIC, yycolumn, yyline, yytext());
            }
          case 205: break;
          case 95: 
            { return new Symbol(Simbolos.BOOLEAN, yycolumn, yyline, yytext());
            }
          case 206: break;
          case 96: 
            { return new Symbol(Simbolos.EXTEND, yycolumn, yyline, yytext());
            }
          case 207: break;
          case 97: 
            { return new Symbol(Simbolos.DEFAULT, yycolumn, yyline, yytext());
            }
          case 208: break;
          case 98: 
            { return new Symbol(Simbolos.FINALLY, yycolumn, yyline, yytext());
            }
          case 209: break;
          case 99: 
            { return new Symbol(Simbolos.GENERIC, yycolumn, yyline, yytext());
            }
          case 210: break;
          case 100: 
            { return new Symbol(Simbolos.PACKAG, yycolumn, yyline, yytext());
            }
          case 211: break;
          case 101: 
            { return new Symbol(Simbolos.PRIVATE, yycolumn, yyline, yytext());
            }
          case 212: break;
          case 102: 
            { return new Symbol(Simbolos.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 213: break;
          case 103: 
            { return new Symbol(Simbolos.CONTINUE, yycolumn, yyline, yytext());
            }
          case 214: break;
          case 104: 
            { return new Symbol(Simbolos.OPERATOR, yycolumn, yyline, yytext());
            }
          case 215: break;
          case 105: 
            { return new Symbol(Simbolos.VOLATILE, yycolumn, yyline, yytext());
            }
          case 216: break;
          case 106: 
            { return new Symbol(Simbolos.TRANSIENT, yycolumn, yyline, yytext());
            }
          case 217: break;
          case 107: 
            { return new Symbol(Simbolos.INTERFACE, yycolumn, yyline, yytext());
            }
          case 218: break;
          case 108: 
            { return new Symbol(Simbolos.PROTECTED, yycolumn, yyline, yytext());
            }
          case 219: break;
          case 109: 
            { return new Symbol(Simbolos.INSTANCEOF, yycolumn, yyline, yytext());
            }
          case 220: break;
          case 110: 
            { return new Symbol(Simbolos.IMPLEMENTS, yycolumn, yyline, yytext());
            }
          case 221: break;
          case 111: 
            { return new Symbol(Simbolos.SYNCHRONIZED, yycolumn, yyline, yytext());
            }
          case 222: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
