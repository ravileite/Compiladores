/* The following code was generated by JFlex 1.6.1 */

/* Código do Usuário */

package Analisadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/* Opções e Declarações */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalisadorLexico.jflex</tt>
 */
public class Analisador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 59, 59, 60, 59, 59,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    59, 43,  0,  0, 58, 36, 30, 54, 37, 38, 41, 39, 50, 40, 52, 42, 
    55,  2,  2,  2,  2,  2,  2,  2,  2, 56, 53, 51, 33, 34, 35, 45, 
     0,  3, 12, 14, 11,  6, 24, 26, 20, 22,  1, 18, 16,  4, 10, 15, 
     5,  1,  7,  9, 13, 23, 27, 28, 25, 19, 29, 46,  0, 47, 31, 57, 
     0,  3, 12, 14, 11,  6, 24, 26, 20, 22,  1, 18, 16,  4, 10, 15, 
     5,  1,  7,  9, 13, 23, 27, 28, 25, 19, 29, 48, 32, 49, 44,  0, 
     0,  0,  0,  0,  0, 60,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\1\2\1\1\2\2\1\4"+
    "\3\2\1\5\1\1\1\2\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\1"+
    "\1\40\10\2\5\0\11\2\1\41\12\2\2\0\1\42"+
    "\2\2\1\42\3\2\1\0\2\2\1\43\1\44\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\2\0"+
    "\1\64\1\2\1\0\3\2\1\0\2\2\1\0\3\2"+
    "\5\0\6\2\1\65\7\2\1\66\2\2\1\0\1\2"+
    "\1\0\6\2\2\0\1\67\2\2\1\67\1\2\1\70"+
    "\1\2\1\0\1\2\1\0\1\2\1\71\1\72\1\73"+
    "\1\74\2\0\1\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\2\75\2\2\5\0\5\2\1\0\1\2\1\76"+
    "\4\2\1\77\1\2\1\100\2\2\2\101\2\102\2\2"+
    "\1\0\1\2\1\103\1\104\4\0\4\2\1\0\2\2"+
    "\1\0\1\2\1\0\1\2\2\0\1\2\1\0\1\2"+
    "\1\0\2\2\1\0\1\2\1\0\3\2\2\0\1\105"+
    "\1\106\1\0\2\2\1\105\1\106\1\2\1\0\3\2"+
    "\2\107\1\2\1\0\2\2\1\110\1\111\1\0\1\2"+
    "\2\112\4\0\4\2\2\113\1\114\2\115\2\116\4\0"+
    "\1\2\1\0\1\2\1\0\2\2\1\0\1\2\2\117"+
    "\1\2\1\120\1\121\1\0\1\122\1\121\1\2\1\122"+
    "\2\123\1\2\1\124\1\2\1\0\2\2\1\0\1\2"+
    "\1\125\3\0\1\125\3\2\1\0\1\2\2\0\1\126"+
    "\1\0\1\2\1\0\1\2\2\127\1\2\2\130\2\131"+
    "\1\0\1\2\1\132\1\133\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\3\0\3\2\2\134\3\0\1\2\2\135"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\136"+
    "\3\0\3\2\2\0\2\137\1\140\1\0\1\2\2\141"+
    "\1\0\1\2\2\0\1\142\2\2\1\142\1\0\1\143"+
    "\1\0\1\2\2\144\1\145\1\146\1\145\1\146\2\0"+
    "\1\2\1\0\2\147\1\0\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\172\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\75\0\75\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\75\0\75\0\u0763\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\u07a0\0\75\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2"+
    "\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\75\0\u1034\0\u1071\0\172\0\u10ae\0\u10eb\0\u1128"+
    "\0\u1165\0\u11a2\0\u11df\0\75\0\75\0\u121c\0\75\0\75"+
    "\0\75\0\75\0\75\0\u1259\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\75\0\u1296\0\75\0\u12d3\0\u1310\0\75"+
    "\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8"+
    "\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\172"+
    "\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\172"+
    "\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06"+
    "\0\u1e43\0\u1e80\0\172\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1"+
    "\0\75\0\75\0\75\0\75\0\u1fee\0\u202b\0\u2068\0\u20a5"+
    "\0\u20e2\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\75"+
    "\0\172\0\u228d\0\u22ca\0\u2307\0\u2344\0\u2381\0\u23be\0\u23fb"+
    "\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6\0\172"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\172\0\u26d7\0\172\0\u2714"+
    "\0\u2751\0\75\0\172\0\75\0\172\0\u278e\0\u27cb\0\u2808"+
    "\0\u2845\0\172\0\172\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u2976"+
    "\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2b21\0\u2b5e"+
    "\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46"+
    "\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\75\0\75\0\u2fe5\0\u3022\0\u305f\0\172"+
    "\0\172\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\75\0\172"+
    "\0\u31cd\0\u320a\0\u3247\0\u3284\0\172\0\172\0\u32c1\0\u32fe"+
    "\0\75\0\172\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c"+
    "\0\u34a9\0\u34e6\0\75\0\172\0\172\0\u3523\0\u3560\0\75"+
    "\0\172\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce\0\u370b"+
    "\0\u3748\0\u3785\0\u37c2\0\u37ff\0\u383c\0\75\0\172\0\u3879"+
    "\0\172\0\75\0\u38b6\0\75\0\172\0\u38f3\0\172\0\75"+
    "\0\172\0\u3930\0\172\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61"+
    "\0\u3a9e\0\75\0\u3adb\0\u3b18\0\u3b55\0\172\0\u3b92\0\u3bcf"+
    "\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\75\0\u3d3d\0\u3d7a"+
    "\0\u3db7\0\u3df4\0\75\0\172\0\u3e31\0\75\0\172\0\75"+
    "\0\172\0\u3e6e\0\u3eab\0\172\0\172\0\u3ee8\0\u3f25\0\u3f62"+
    "\0\u3f9f\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a"+
    "\0\u4187\0\75\0\172\0\u41c4\0\u4201\0\u423e\0\u427b\0\75"+
    "\0\172\0\u42b8\0\u42f5\0\u4332\0\u436f\0\u43ac\0\u43e9\0\u4426"+
    "\0\75\0\172\0\u4463\0\u44a0\0\u44dd\0\u451a\0\u4557\0\u4594"+
    "\0\u45d1\0\u460e\0\75\0\172\0\172\0\u464b\0\u4688\0\75"+
    "\0\172\0\u46c5\0\u4702\0\u473f\0\u477c\0\75\0\u47b9\0\u47f6"+
    "\0\172\0\u4833\0\75\0\u4870\0\u48ad\0\75\0\172\0\75"+
    "\0\75\0\172\0\172\0\u48ea\0\u4927\0\u4964\0\u49a1\0\75"+
    "\0\172\0\u49de\0\75";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\3\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\3"+
    "\1\17\1\2\3\3\1\20\1\21\1\3\1\22\1\23"+
    "\2\3\1\24\1\3\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\2\2\1\3\1\2\1\56"+
    "\77\0\7\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\3\3\1\57\3\3\1\0\3\3"+
    "\1\60\4\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\2\3\1\61\3\3\1\62\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\1\63\6\3\31\0\3\3\4\0"+
    "\7\3\1\0\7\3\1\64\1\0\3\3\1\0\3\3"+
    "\1\65\4\3\31\0\3\3\4\0\5\3\1\66\1\3"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\20\0\1\67\5\0\1\70\1\71\2\0\1\72\4\0"+
    "\1\73\41\0\7\3\1\0\4\3\1\74\3\3\1\0"+
    "\1\3\1\75\1\76\1\0\1\3\1\77\4\3\1\100"+
    "\1\3\31\0\3\3\4\0\2\3\1\101\2\3\1\102"+
    "\1\3\1\0\10\3\1\0\3\3\1\0\1\3\1\103"+
    "\6\3\31\0\3\3\4\0\5\3\1\104\1\3\1\0"+
    "\6\3\1\105\1\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\4\0\6\3\1\106\1\0\6\3\1\107\1\3"+
    "\1\0\1\3\1\110\1\3\1\0\10\3\31\0\3\3"+
    "\4\0\6\3\1\111\1\0\10\3\1\0\2\3\1\112"+
    "\1\0\10\3\31\0\3\3\4\0\2\3\1\113\4\3"+
    "\1\0\6\3\1\114\1\115\1\0\2\3\1\116\1\0"+
    "\10\3\31\0\3\3\4\0\7\3\1\0\6\3\1\117"+
    "\1\3\1\0\3\3\1\0\10\3\31\0\3\3\7\0"+
    "\1\120\5\0\1\121\15\0\1\122\45\0\3\3\1\123"+
    "\3\3\1\0\1\3\1\124\6\3\1\0\3\3\1\0"+
    "\2\3\1\125\5\3\31\0\3\3\4\0\2\3\1\126"+
    "\4\3\1\0\6\3\1\127\1\130\1\0\3\3\1\131"+
    "\1\132\7\3\31\0\3\3\4\0\7\3\1\0\10\3"+
    "\1\0\2\3\1\133\1\0\10\3\31\0\3\3\45\0"+
    "\1\134\74\0\1\135\72\0\1\136\1\0\1\137\73\0"+
    "\1\140\1\141\74\0\1\142\74\0\1\143\1\144\73\0"+
    "\1\145\74\0\1\146\4\0\1\147\67\0\1\150\5\0"+
    "\1\151\66\0\1\152\74\0\1\153\6\0\1\154\65\0"+
    "\1\155\35\0\1\156\63\0\1\157\73\0\1\160\7\0"+
    "\4\3\1\161\2\3\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\7\3\1\162\1\163\7\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\5\3\1\164\2\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\6\3\1\165\1\3"+
    "\1\0\3\3\1\166\1\167\7\3\31\0\3\3\4\0"+
    "\7\3\1\0\3\3\1\170\4\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\7\3\1\171\1\172\7\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\4\3\1\173\3\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\4\3\1\174\3\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\6\0\1\175"+
    "\103\0\1\176\101\0\1\177\62\0\1\200\114\0\2\201"+
    "\47\0\2\3\1\202\4\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\7\3\1\0\1\3"+
    "\1\203\6\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\7\3\1\0\6\3\1\204\1\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\4\3\1\205\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\7\3\1\0\10\3\1\0\3\3\1\201\1\206"+
    "\7\3\31\0\3\3\4\0\7\3\1\0\4\3\1\207"+
    "\3\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\0\10\3\1\0\3\3\1\0\6\3\1\210"+
    "\1\3\31\0\3\3\4\0\7\3\1\0\7\3\1\211"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\10\3\1\0\3\3\1\0\2\3\1\212\5\3"+
    "\31\0\3\3\4\0\7\3\1\0\10\3\1\0\3\3"+
    "\1\0\1\3\1\213\6\3\31\0\3\3\4\0\5\3"+
    "\1\214\1\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\6\3\1\215\1\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\4\3\1\216\3\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\2\3\1\217\4\3\1\0\10\3"+
    "\1\0\1\3\1\220\1\3\1\0\1\3\1\221\6\3"+
    "\31\0\3\3\4\0\6\3\1\222\1\0\10\3\1\0"+
    "\3\3\1\223\1\224\7\3\31\0\3\3\4\0\7\3"+
    "\1\225\1\226\3\3\1\227\3\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\7\3\1\0\1\3\1\230"+
    "\6\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\2\3\1\231\4\3\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\2\3\1\232\4\3\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\0\1\3\1\233\6\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\10\0\1\234\77\0\2\235\3\0"+
    "\1\236\60\0\4\3\1\237\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\235"+
    "\1\240\3\3\1\241\3\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\7\3\1\242\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\6\3\1\243"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\7\3\1\0\6\3\1\244\1\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\15\0\1\245\63\0\7\3"+
    "\1\0\1\3\1\246\6\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\10\3\1\0\3\3"+
    "\1\247\1\250\7\3\31\0\3\3\45\0\1\251\74\0"+
    "\1\252\1\253\102\0\1\254\73\0\1\255\74\0\1\256"+
    "\25\0\5\3\1\257\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\20\0\1\260\60\0\7\3"+
    "\1\0\4\3\1\261\3\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\10\3\1\262\1\263"+
    "\2\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\4\3\1\264\3\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\36\0\1\265\42\0\7\3\1\0\10\3\1\0"+
    "\3\3\1\0\5\3\1\266\2\3\31\0\3\3\4\0"+
    "\7\3\1\0\7\3\1\267\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\11\0\1\270\67\0\5\3\1\271\1\3"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\5\3\1\272\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\7\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\1\273\6\3\31\0\3\3"+
    "\20\0\1\274\75\0\1\275\65\0\1\276\73\0\1\277"+
    "\103\0\1\300\60\0\7\3\1\0\4\3\1\301\3\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\5\3\1\302\2\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\6\3\1\303\1\0\10\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\5\3\1\304"+
    "\1\3\1\0\10\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\4\0\7\3\1\0\4\3\1\305\3\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\10\3\1\0\3\3\1\306\1\307\7\3\31\0\3\3"+
    "\4\0\7\3\1\0\7\3\1\310\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\2\3\1\311\4\3\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\0\3\3\1\312\4\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\2\3\1\313\4\3\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\0\7\3\1\314\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\5\3\1\315\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\1\3\1\316\6\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\5\3\1\317\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\5\3"+
    "\1\320\1\3\1\0\6\3\1\321\1\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\13\0\2\322\64\0\7\3"+
    "\1\322\1\323\7\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\11\0\1\324\67\0\5\3\1\325\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\0\5\3\1\326\2\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\7\3\1\0\4\3\1\327"+
    "\3\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\330\1\331\7\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\6\3\1\332\1\0\10\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\10\3\1\0\3\3\1\0\4\3\1\333\3\3\31\0"+
    "\3\3\22\0\1\334\1\335\71\0\1\336\65\0\1\337"+
    "\67\0\7\3\1\0\6\3\1\340\1\341\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\7\3\1\0\4\3"+
    "\1\342\3\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\5\3\1\343\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\7\3\1\344\1\345"+
    "\7\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\2\3\1\346\4\3\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\6\0\1\347\72\0\2\3\1\350"+
    "\4\3\1\0\10\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\23\0\1\351\55\0\7\3\1\0\7\3\1\352"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\40\0\1\353"+
    "\127\0\1\354\5\0\6\3\1\355\1\0\10\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\12\0\1\356\66\0"+
    "\6\3\1\357\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\6\0\1\360\72\0\2\3\1\361\4\3"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\5\3\1\362\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\6\0\1\363\72\0\2\3"+
    "\1\364\4\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\10\3\1\0\3\3"+
    "\1\365\1\366\7\3\31\0\3\3\4\0\7\3\1\0"+
    "\1\3\1\367\6\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\4\0\6\3\1\370\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\30\0\2\371\72\0\1\372"+
    "\65\0\1\373\66\0\1\374\103\0\1\375\57\0\7\3"+
    "\1\0\10\3\1\0\3\3\1\371\1\376\7\3\31\0"+
    "\3\3\4\0\7\3\1\0\10\3\1\0\2\3\1\377"+
    "\1\0\10\3\31\0\3\3\4\0\7\3\1\0\4\3"+
    "\1\u0100\3\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\6\3\1\u0101\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\7\3\1\0\5\3\1\u0102"+
    "\2\3\1\0\3\3\1\0\10\3\31\0\3\3\36\0"+
    "\1\u0103\42\0\7\3\1\0\10\3\1\0\3\3\1\0"+
    "\5\3\1\u0104\2\3\31\0\3\3\4\0\7\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\1\u0105\6\3\31\0"+
    "\3\3\4\0\7\3\1\0\7\3\1\u0106\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\7\3\1\0\10\3"+
    "\1\u0107\1\u0108\2\3\1\0\10\3\31\0\3\3\4\0"+
    "\5\3\1\u0109\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\7\3\1\u010a\1\u010b\7\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\2\3"+
    "\1\u010c\4\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\10\3\1\0\3\3"+
    "\1\0\6\3\1\u010d\1\3\31\0\3\3\4\0\7\3"+
    "\1\0\10\3\1\0\2\3\1\u010e\1\0\10\3\31\0"+
    "\3\3\4\0\7\3\1\0\10\3\1\0\3\3\1\u010f"+
    "\1\u0110\7\3\31\0\3\3\13\0\2\u0111\64\0\7\3"+
    "\1\u0111\1\u0112\7\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\12\0\1\u0113\73\0\1\u0114\71\0\1\u0115\100\0"+
    "\1\u0116\66\0\6\3\1\u0117\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\5\3\1\u0118\1\3"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\2\3\1\u0119\4\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\4\0\6\3\1\u011a\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\11\0"+
    "\1\u011b\67\0\5\3\1\u011c\1\3\1\0\10\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\4\3\1\u011d\3\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\23\0\1\u011e\55\0\7\3\1\0\7\3\1\u011f"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\11\0\1\u0120"+
    "\67\0\5\3\1\u0121\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\6\0\1\u0122\74\0\1\u0123"+
    "\53\0\1\u0124\16\0\7\3\1\u0125\1\u0126\7\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\6\0\1\u0127\72\0"+
    "\2\3\1\u0128\4\3\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\35\0\1\u0129\43\0\7\3\1\0"+
    "\10\3\1\0\3\3\1\0\4\3\1\u012a\3\3\31\0"+
    "\3\3\4\0\7\3\1\0\5\3\1\u012b\2\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\20\0\1\u012c\60\0"+
    "\7\3\1\0\4\3\1\u012d\3\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\21\0\1\u012e\57\0\7\3\1\0"+
    "\5\3\1\u012f\2\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\4\0\7\3\1\0\2\3\1\u0130\5\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\1\3\1\u0131\6\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\21\0\1\u0132\65\0\1\u0133\111\0\1\u0134\51\0"+
    "\7\3\1\0\5\3\1\u0135\2\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\6\3\1\u0136\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\10\3\1\0\2\3\1\u0137\1\0\10\3\31\0"+
    "\3\3\11\0\1\u0138\67\0\5\3\1\u0139\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\0\7\3\1\u013a\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\5\3\1\u013b\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\2\3"+
    "\1\u013c\4\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\30\0\2\u013d\47\0\7\3\1\0\10\3"+
    "\1\0\3\3\1\u013d\1\u013e\7\3\31\0\3\3\4\0"+
    "\7\3\1\0\2\3\1\u013f\5\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\15\0\1\u0140\63\0\7\3\1\0"+
    "\1\3\1\u0141\6\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\20\0\1\u0142\63\0\1\u0143\102\0\1\u0144\112\0"+
    "\1\u0145\45\0\7\3\1\0\4\3\1\u0146\3\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\3\3\1\u0147"+
    "\3\3\1\0\10\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\4\0\7\3\1\0\1\3\1\u0148\6\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\10\3\1\0\3\3\1\0\2\3\1\u0149\5\3\31\0"+
    "\3\3\23\0\1\u014a\55\0\7\3\1\0\7\3\1\u014b"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\53\0\1\u014c"+
    "\74\0\1\u014d\75\0\1\u014e\26\0\1\u014f\72\0\2\3"+
    "\1\u0150\4\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\21\0\1\u0151\57\0\7\3\1\0\5\3"+
    "\1\u0152\2\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\11\0\1\u0153\67\0\5\3\1\u0154\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\7\3"+
    "\1\0\4\3\1\u0155\3\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\11\0\1\u0156\67\0\5\3\1\u0157\1\3"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\7\3\1\u0158\1\u0159\7\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\22\0\1\u015a\56\0\7\3\1\0"+
    "\6\3\1\u015b\1\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\4\0\7\3\1\0\4\3\1\u015c\3\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\1\3\1\u015d\6\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\11\0\1\u015e\67\0\5\3\1\u015f\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\u0160\1\u0161\7\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\32\0\1\u0162\46\0\7\3\1\0\10\3"+
    "\1\0\3\3\1\0\1\3\1\u0163\6\3\31\0\3\3"+
    "\11\0\1\u0164\104\0\1\u0165\61\0\1\u0166\72\0\5\3"+
    "\1\u0167\1\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\5\3\1\u0168\2\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\2\3"+
    "\1\u0169\4\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\26\0\1\u016a\52\0\7\3\1\0\10\3"+
    "\1\0\1\3\1\u016b\1\3\1\0\10\3\31\0\3\3"+
    "\40\0\1\u016c\67\0\1\u016d\56\0\1\u016e\63\0\7\3"+
    "\1\0\1\3\1\u016f\6\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\20\0\1\u0170\60\0\7\3\1\0\4\3"+
    "\1\u0171\3\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\5\3\1\u0172\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\15\0\1\u0173\63\0\7\3"+
    "\1\0\1\3\1\u0174\6\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\15\0\1\u0175\63\0\7\3\1\0\1\3"+
    "\1\u0176\6\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\6\0\1\u0177\72\0\2\3\1\u0178\4\3\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\11\0\1\u0179"+
    "\67\0\5\3\1\u017a\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\15\0\1\u017b\70\0\1\u017c"+
    "\104\0\1\u017d\57\0\7\3\1\0\1\3\1\u017e\6\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\4\0\5\3"+
    "\1\u017f\1\3\1\0\10\3\1\0\3\3\1\0\10\3"+
    "\31\0\3\3\4\0\7\3\1\0\5\3\1\u0180\2\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\72\0\1\u0181"+
    "\64\0\1\u0182\30\0\1\u0183\62\0\7\3\1\0\2\3"+
    "\1\u0184\5\3\1\0\3\3\1\0\10\3\31\0\3\3"+
    "\4\0\7\3\1\0\2\3\1\u0185\5\3\1\0\3\3"+
    "\1\0\10\3\31\0\3\3\30\0\2\u0186\47\0\7\3"+
    "\1\0\10\3\1\0\3\3\1\u0186\1\u0187\7\3\31\0"+
    "\3\3\20\0\1\u0188\60\0\7\3\1\0\4\3\1\u0189"+
    "\3\3\1\0\3\3\1\0\10\3\31\0\3\3\33\0"+
    "\1\u018a\45\0\7\3\1\0\10\3\1\0\3\3\1\0"+
    "\2\3\1\u018b\5\3\31\0\3\3\20\0\1\u018c\76\0"+
    "\1\u018d\63\0\1\u018e\67\0\7\3\1\0\4\3\1\u018f"+
    "\3\3\1\0\3\3\1\0\10\3\31\0\3\3\4\0"+
    "\7\3\1\0\6\3\1\u0190\1\3\1\0\3\3\1\0"+
    "\10\3\31\0\3\3\4\0\5\3\1\u0191\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\10\3\31\0\3\3\53\0"+
    "\1\u0192\75\0\1\u0193\60\0\1\u0194\40\0\7\3\1\0"+
    "\10\3\1\0\3\3\1\0\7\3\1\u0195\31\0\3\3"+
    "\11\0\1\u0196\67\0\5\3\1\u0197\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\10\3\31\0\3\3\13\0\2\u0198"+
    "\113\0\1\u0199\45\0\7\3\1\u0198\1\u019a\7\3\1\0"+
    "\3\3\1\0\10\3\31\0\3\3\4\0\7\3\1\0"+
    "\10\3\1\0\3\3\1\0\2\3\1\u019b\5\3\31\0"+
    "\3\3\73\0\1\u019c\12\0\1\u019d\67\0\5\3\1\u019e"+
    "\1\3\1\0\10\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\74\0\1\u019f\16\0\1\u01a0\62\0\7\3\1\0"+
    "\2\3\1\u01a1\5\3\1\0\3\3\1\0\10\3\31\0"+
    "\3\3\75\0\1\u01a2\61\0\1\u01a3\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18971];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\31\1\2\11\5\1\2\11\1\1\7\11"+
    "\1\1\1\11\10\1\5\0\24\1\2\0\1\11\6\1"+
    "\1\0\2\1\2\11\1\0\5\11\1\1\7\11\1\1"+
    "\1\11\2\0\1\11\1\1\1\0\3\1\1\0\2\1"+
    "\1\0\3\1\5\0\21\1\1\0\1\1\1\0\6\1"+
    "\2\0\7\1\1\0\1\1\1\0\1\1\4\11\2\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\2\1\1\11"+
    "\3\1\5\0\5\1\1\0\13\1\1\11\1\1\1\11"+
    "\3\1\1\0\3\1\4\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\2\0\2\11\1\0"+
    "\5\1\1\0\3\1\1\11\2\1\1\0\4\1\1\0"+
    "\1\1\1\11\1\1\4\0\4\1\1\11\4\1\1\11"+
    "\1\1\4\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\3\1\1\11\1\0\1\11\3\1\1\11"+
    "\4\1\1\0\2\1\1\0\1\1\1\11\3\0\4\1"+
    "\1\0\1\1\2\0\1\11\1\0\1\1\1\0\1\1"+
    "\1\11\2\1\1\11\1\1\1\11\1\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\3\0\3\1"+
    "\1\11\1\1\3\0\1\1\1\11\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\3\0\3\1"+
    "\2\0\1\11\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\1\1\2\0\1\11\3\1\1\0\1\11\1\0\1\1"+
    "\1\11\1\1\2\11\2\1\2\0\1\1\1\0\1\11"+
    "\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de Sintaxe Java
    public static LinkedList<TError> TabelaER = new  LinkedList<TError>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro Léxico " + yytext() + "Linha " + yyline +  "Coluna " + yycolumn);
                                     TError dados = new TError(yytext(), yyline, yycolumn, "Erro Lexico", "Simbolo nao permitido");
                                     TabelaER.add(dados);
            }
          case 105: break;
          case 2: 
            { return new Symbol(Simbolos.ID, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 3: 
            { return new Symbol(Simbolos.E, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 4: 
            { return new Symbol(Simbolos.D, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 5: 
            { return new Symbol(Simbolos.L, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 6: 
            { return new Symbol(Simbolos.F, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 7: 
            { return new Symbol(Simbolos.X, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 8: 
            { return new Symbol(Simbolos.AND, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 9: 
            { return new Symbol(Simbolos.XOR, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 10: 
            { return new Symbol(Simbolos.OR, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 11: 
            { return new Symbol(Simbolos.LTHEN, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 12: 
            { return new Symbol(Simbolos.EQU, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 13: 
            { return new Symbol(Simbolos.BTHEN, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 14: 
            { return new Symbol(Simbolos.MOD, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 15: 
            { return new Symbol(Simbolos.OPENPAR, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 16: 
            { return new Symbol(Simbolos.CLOSEPAR, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 17: 
            { return new Symbol(Simbolos.PLUS, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 18: 
            { return new Symbol(Simbolos.MINUS, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 19: 
            { return new Symbol(Simbolos.MULT, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 20: 
            { return new Symbol(Simbolos.DIV, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 21: 
            { return new Symbol(Simbolos.NE, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 22: 
            { return new Symbol(Simbolos.BINNEG, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 23: 
            { return new Symbol(Simbolos.QUEST, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 24: 
            { return new Symbol(Simbolos.OPENBRAC, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 25: 
            { return new Symbol(Simbolos.CLOSEBRAC, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 26: 
            { return new Symbol(Simbolos.OPENKEYS, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 27: 
            { return new Symbol(Simbolos.CLOSEKEYS, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 28: 
            { return new Symbol(Simbolos.COMMA, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 29: 
            { return new Symbol(Simbolos.SEMIC, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 30: 
            { return new Symbol(Simbolos.DOT, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 31: 
            { return new Symbol(Simbolos.COLON, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 32: 
            { /*Espacos em branco devem ser ignorados*/
            }
          case 136: break;
          case 33: 
            { return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 34: 
            { return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 35: 
            { return new Symbol(Simbolos.ANDEQU, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 36: 
            { return new Symbol(Simbolos.XOREQU, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 37: 
            { return new Symbol(Simbolos.SOREQU, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 38: 
            { return new Symbol(Simbolos.DLTHEN, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 39: 
            { return new Symbol(Simbolos.LEQU, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 40: 
            { return new Symbol(Simbolos.EQUEQU, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 41: 
            { return new Symbol(Simbolos.BEQU, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 42: 
            { return new Symbol(Simbolos.DBTHEN, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 43: 
            { return new Symbol(Simbolos.MODEQU, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 44: 
            { return new Symbol(Simbolos.PLUSEQU, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 45: 
            { return new Symbol(Simbolos.PLUSPLUS, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 46: 
            { return new Symbol(Simbolos.MINUSEQU, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 47: 
            { return new Symbol(Simbolos.MINUSMINUS, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 48: 
            { return new Symbol(Simbolos.MULTEQU, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 49: 
            { return new Symbol(Simbolos.DIVEQU, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 50: 
            { return new Symbol(Simbolos.COMMENTS1, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 51: 
            { return new Symbol(Simbolos.NEEQU, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 52: 
            { return new Symbol(Simbolos.STRG, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 53: 
            { return new Symbol(Simbolos.NEW, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 54: 
            { return new Symbol(Simbolos.TRY, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 55: 
            { return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 56: 
            { return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 57: 
            { return new Symbol(Simbolos.OREQU, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 58: 
            { return new Symbol(Simbolos.DBEQU, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 59: 
            { return new Symbol(Simbolos.TBTHEN, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 60: 
            { return new Symbol(Simbolos.COMMENTS2, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 61: 
            { return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 62: 
            { return new Symbol(Simbolos.NULL, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 63: 
            { return new Symbol(Simbolos.BYTE, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 64: 
            { return new Symbol(Simbolos.TRUE, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 65: 
            { return new Symbol(Simbolos.THIS, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 66: 
            { return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 67: 
            { return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 68: 
            { return new Symbol(Simbolos.LONG, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 69: 
            { return new Symbol(Simbolos.SHORT, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 70: 
            { return new Symbol(Simbolos.SUPE, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 71: 
            { return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 72: 
            { return new Symbol(Simbolos.THROW, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 73: 
            { return new Symbol(Simbolos.CATCH, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 74: 
            { return new Symbol(Simbolos.CLAS, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 75: 
            { return new Symbol(Simbolos.FALSE, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 76: 
            { return new Symbol(Simbolos.FLOAT, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 77: 
            { return new Symbol(Simbolos.FINAL, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 78: 
            { return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 79: 
            { return new Symbol(Simbolos.PUBLIC, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 80: 
            { return new Symbol(Simbolos.RETURN, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 81: 
            { return new Symbol(Simbolos.STATIC, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 82: 
            { return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 83: 
            { return new Symbol(Simbolos.NATIVE, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 84: 
            { return new Symbol(Simbolos.DOUBLE, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 85: 
            { return new Symbol(Simbolos.IMPOR, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 86: 
            { return new Symbol(Simbolos.DEC_DIGITS, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 87: 
            { return new Symbol(Simbolos.PACKAG, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 88: 
            { return new Symbol(Simbolos.PRIVATE, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 89: 
            { return new Symbol(Simbolos.EXTEND, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 90: 
            { return new Symbol(Simbolos.DEFAULT, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 91: 
            { return new Symbol(Simbolos.BOOLEAN, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 92: 
            { return new Symbol(Simbolos.FINALLY, yycolumn, yyline, yytext());
            }
          case 196: break;
          case 93: 
            { return new Symbol(Simbolos.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 197: break;
          case 94: 
            { return new Symbol(Simbolos.CONTINUE, yycolumn, yyline, yytext());
            }
          case 198: break;
          case 95: 
            { return new Symbol(Simbolos.AMPERSAND, yycolumn, yyline, yytext());
            }
          case 199: break;
          case 96: 
            { return new Symbol(Simbolos.PROTECTED, yycolumn, yyline, yytext());
            }
          case 200: break;
          case 97: 
            { return new Symbol(Simbolos.TRANSIENT, yycolumn, yyline, yytext());
            }
          case 201: break;
          case 98: 
            { return new Symbol(Simbolos.INTERFACE, yycolumn, yyline, yytext());
            }
          case 202: break;
          case 99: 
            { return new Symbol(Simbolos.INT_LITERAL, yycolumn, yyline, yytext());
            }
          case 203: break;
          case 100: 
            { return new Symbol(Simbolos.THREADSAFE, yycolumn, yyline, yytext());
            }
          case 204: break;
          case 101: 
            { return new Symbol(Simbolos.IMPLEMENTS, yycolumn, yyline, yytext());
            }
          case 205: break;
          case 102: 
            { return new Symbol(Simbolos.INSTANCEOF, yycolumn, yyline, yytext());
            }
          case 206: break;
          case 103: 
            { return new Symbol(Simbolos.SYNCHRONIZED, yycolumn, yyline, yytext());
            }
          case 207: break;
          case 104: 
            { return new Symbol(Simbolos.TEXT, yycolumn, yyline, yytext());
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
