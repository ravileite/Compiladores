/* The following code was generated by JFlex 1.6.1 */

/* Código do Usuário */

package Analisadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/* Opções e Declarações */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalisadorLexico.jflex</tt>
 */
public class Analisador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 54, 54, 55, 54, 54,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    54, 38,  0,  0, 51, 31, 25, 49, 32, 33, 36, 34, 45, 35, 47, 37, 
    52,  0,  0,  0,  0,  0,  0,  0,  0, 53, 48, 46, 28, 29, 30, 40, 
     0,  1,  9, 11,  8,  4, 19, 21, 16, 17,  0, 14, 13,  2,  7, 12, 
     3,  0,  5,  6, 10, 18, 22, 23, 20, 15, 24, 41,  0, 42, 26, 50, 
     0,  1,  9, 11,  8,  4, 19, 21, 16, 17,  0, 14, 13,  2,  7, 12, 
     3,  0,  5,  6, 10, 18, 22, 23, 20, 15, 24, 43, 27, 44, 39,  0, 
     0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\3\1\1\3\3\1\1\4\1\1"+
    "\1\5\1\6\1\1\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\1\1\37\21\0\1\40\14\0"+
    "\1\41\5\0\1\42\1\43\1\0\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\2\0\1\63\17\0\1\64"+
    "\7\0\1\65\13\0\1\66\1\0\1\67\3\0\1\70"+
    "\1\71\1\72\1\73\10\0\1\74\10\0\1\75\4\0"+
    "\1\76\1\0\1\77\2\0\1\100\1\101\3\0\1\102"+
    "\1\103\24\0\1\104\1\105\4\0\1\106\3\0\1\107"+
    "\1\110\1\0\1\111\4\0\1\112\1\113\1\114\1\115"+
    "\10\0\1\116\1\0\1\117\1\120\1\0\1\121\1\122"+
    "\1\0\1\123\4\0\1\124\6\0\1\125\2\0\1\126"+
    "\1\0\1\127\1\130\1\0\1\131\1\132\6\0\1\133"+
    "\3\0\1\134\4\0\1\135\6\0\1\136\1\137\1\0"+
    "\1\140\3\0\1\141\2\0\1\142\1\0\1\143\1\144"+
    "\1\145\5\0\1\146\3\0\1\147\12\0\1\150";

  private static int [] zzUnpackAction() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\70"+
    "\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0"+
    "\0\70\0\70\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\70"+
    "\0\70\0\u0620\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\u0658\0\70\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930"+
    "\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0"+
    "\0\u0ce8\0\70\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\70"+
    "\0\70\0\u0e38\0\70\0\70\0\70\0\70\0\70\0\u0e70"+
    "\0\70\0\70\0\70\0\70\0\70\0\70\0\70\0\u0ea8"+
    "\0\70\0\u0ee0\0\u0f18\0\70\0\u0f50\0\u0f88\0\u0fc0\0\u0ff8"+
    "\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u1180\0\u11b8"+
    "\0\u11f0\0\u1228\0\u1260\0\70\0\u1298\0\u12d0\0\u1308\0\u1340"+
    "\0\u1378\0\u13b0\0\u13e8\0\70\0\u1420\0\u1458\0\u1490\0\u14c8"+
    "\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650\0\u1688"+
    "\0\u16c0\0\70\0\u16f8\0\u1730\0\u1768\0\70\0\70\0\70"+
    "\0\70\0\u17a0\0\u17d8\0\u1810\0\u1848\0\u1880\0\u18b8\0\u18f0"+
    "\0\u1928\0\70\0\u1960\0\u1998\0\u19d0\0\u1a08\0\u1a40\0\u1a78"+
    "\0\u1ab0\0\u1ae8\0\70\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\70"+
    "\0\u1c00\0\70\0\u1c38\0\u1c70\0\70\0\70\0\u1ca8\0\u1ce0"+
    "\0\u1d18\0\70\0\70\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0"+
    "\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\70"+
    "\0\70\0\u21b0\0\u21e8\0\u2220\0\u2258\0\70\0\u2290\0\u22c8"+
    "\0\u2300\0\70\0\70\0\u2338\0\70\0\u2370\0\u23a8\0\u23e0"+
    "\0\u2418\0\70\0\70\0\u2450\0\70\0\u2488\0\u24c0\0\u24f8"+
    "\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\70\0\u2648\0\70"+
    "\0\70\0\u2680\0\70\0\70\0\u26b8\0\70\0\u26f0\0\u2728"+
    "\0\u2760\0\u2798\0\70\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0"+
    "\0\u28e8\0\70\0\u2920\0\u2958\0\70\0\u2990\0\70\0\70"+
    "\0\u29c8\0\70\0\70\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0"+
    "\0\u2b18\0\70\0\u2b50\0\u2b88\0\u2bc0\0\70\0\u2bf8\0\u2c30"+
    "\0\u2c68\0\u2ca0\0\70\0\u2cd8\0\u2d10\0\u2d48\0\u2d80\0\u2db8"+
    "\0\u2df0\0\70\0\70\0\u2e28\0\70\0\u2e60\0\u2e98\0\u2ed0"+
    "\0\70\0\u2f08\0\u2f40\0\70\0\u2f78\0\70\0\70\0\70"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\70\0\u30c8\0\u3100"+
    "\0\u3138\0\70\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288"+
    "\0\u32c0\0\u32f8\0\u3330\0\u3368\0\70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\3\2\1\16"+
    "\1\2\1\17\1\20\2\2\1\21\1\2\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\4\2"+
    "\1\53\73\0\1\54\6\0\1\55\57\0\1\56\3\0"+
    "\1\57\14\0\1\60\62\0\1\61\6\0\1\62\47\0"+
    "\1\63\75\0\1\64\4\0\1\65\1\66\1\0\1\67"+
    "\4\0\1\70\41\0\1\71\2\0\1\72\15\0\1\73"+
    "\51\0\1\74\7\0\1\75\60\0\1\76\6\0\1\77"+
    "\2\0\1\100\55\0\1\101\12\0\1\102\50\0\1\103"+
    "\12\0\1\104\1\105\2\0\1\106\63\0\1\107\55\0"+
    "\1\110\4\0\1\111\13\0\1\112\45\0\1\113\12\0"+
    "\1\114\1\115\3\0\1\116\66\0\1\117\104\0\1\120"+
    "\67\0\1\121\65\0\1\122\1\0\1\123\66\0\1\124"+
    "\1\125\67\0\1\126\67\0\1\127\1\130\66\0\1\131"+
    "\67\0\1\132\4\0\1\133\62\0\1\134\5\0\1\135"+
    "\61\0\1\136\67\0\1\137\6\0\1\140\60\0\1\141"+
    "\33\0\1\142\62\0\1\143\64\0\1\144\11\0\1\145"+
    "\72\0\1\146\74\0\1\147\70\0\1\150\4\0\1\151"+
    "\57\0\1\152\64\0\1\153\73\0\1\154\67\0\1\155"+
    "\56\0\1\156\75\0\1\157\74\0\1\160\56\0\1\161"+
    "\105\0\1\162\60\0\1\163\104\0\1\164\55\0\1\165"+
    "\75\0\1\166\66\0\1\167\51\0\1\170\77\0\1\171"+
    "\65\0\1\172\56\0\1\173\15\0\1\174\2\0\1\175"+
    "\52\0\1\176\13\0\1\177\54\0\1\200\3\0\1\201"+
    "\64\0\1\202\61\0\1\203\67\0\1\204\75\0\1\205"+
    "\63\0\1\206\72\0\1\207\3\0\1\210\72\0\1\211"+
    "\57\0\1\212\76\0\1\213\62\0\1\214\101\0\1\215"+
    "\103\0\1\216\67\0\1\217\1\220\75\0\1\221\66\0"+
    "\1\222\67\0\1\223\30\0\1\224\75\0\1\225\73\0"+
    "\1\226\63\0\1\227\103\0\1\230\56\0\1\231\56\0"+
    "\1\232\67\0\1\233\105\0\1\234\57\0\1\235\70\0"+
    "\1\236\61\0\1\237\66\0\1\240\75\0\1\241\76\0"+
    "\1\242\63\0\1\243\53\0\1\244\77\0\1\245\57\0"+
    "\1\246\103\0\1\247\56\0\1\250\72\0\1\251\64\0"+
    "\1\252\67\0\1\253\7\0\1\254\61\0\1\255\65\0"+
    "\1\256\76\0\1\257\66\0\1\260\63\0\1\261\66\0"+
    "\1\262\107\0\1\263\56\0\1\264\1\265\64\0\1\266"+
    "\61\0\1\267\71\0\1\270\62\0\1\271\67\0\1\272"+
    "\103\0\1\273\102\0\1\274\124\0\1\275\7\0\1\276"+
    "\67\0\1\277\63\0\1\300\72\0\1\301\64\0\1\302"+
    "\107\0\1\303\55\0\1\304\65\0\1\305\103\0\1\306"+
    "\66\0\1\307\61\0\1\310\62\0\1\311\75\0\1\312"+
    "\102\0\1\313\63\0\1\314\62\0\1\315\70\0\1\316"+
    "\55\0\1\317\71\0\1\320\62\0\1\321\115\0\1\322"+
    "\60\0\1\323\70\0\1\324\54\0\1\325\66\0\1\326"+
    "\66\0\1\327\64\0\1\330\73\0\1\331\66\0\1\332"+
    "\75\0\1\333\72\0\1\334\56\0\1\335\64\0\1\336"+
    "\67\0\1\337\50\0\1\340\23\0\1\341\62\0\1\342"+
    "\113\0\1\343\55\0\1\344\66\0\1\345\70\0\1\346"+
    "\64\0\1\347\66\0\1\350\73\0\1\351\61\0\1\352"+
    "\102\0\1\353\53\0\1\354\100\0\1\355\56\0\1\356"+
    "\64\0\1\357\107\0\1\360\56\0\1\361\66\0\1\362"+
    "\72\0\1\363\57\0\1\364\74\0\1\365\103\0\1\366"+
    "\61\0\1\367\115\0\1\370\67\0\1\371\70\0\1\372"+
    "\24\0\1\373\101\0\1\374\60\0\1\375\75\0\1\376"+
    "\61\0\1\377\71\0\1\u0100\75\0\1\u0101\65\0\1\u0102"+
    "\64\0\1\u0103\64\0\1\u0104\71\0\1\u0105\103\0\1\u0106"+
    "\51\0\1\u0107\76\0\1\u0108\55\0\1\u0109\105\0\1\u010a"+
    "\100\0\1\u010b\62\0\1\u010c\53\0\1\u010d\72\0\1\u010e"+
    "\61\0\1\u010f\72\0\1\u0110\67\0\1\u0111\61\0\1\u0112"+
    "\72\0\1\u0113\72\0\1\u0114\64\0\1\u0115\76\0\1\u0116"+
    "\136\0\1\u0117\1\0\1\u0118\55\0\1\u0119\25\0\1\u011a"+
    "\67\0\1\u011b\100\0\1\u011c\60\0\1\u011d\100\0\1\u011e"+
    "\56\0\1\u011f\71\0\1\u0120\57\0\1\u0121\146\0\1\u0122"+
    "\47\0\1\u0123\70\0\1\u0124\53\0\1\u0125\43\0\1\u0126"+
    "\71\0\1\u0127\104\0\1\u0128\116\0\1\u0129\102\0\1\u012a"+
    "\6\0\1\u012b\134\0\1\u012c\100\0\1\u012d\15\0\1\u012e"+
    "\60\0\1\u012f\151\0\1\u0130\47\0\1\u0131\76\0\1\u0132"+
    "\45\0\1\u0133\40\0\1\u0134\131\0\1\u0135\54\0\1\u0136"+
    "\121\0\1\u0137\70\0\1\u0138\70\0\1\u0139\46\0\1\u013a"+
    "\111\0\1\u013b\54\0\1\u013c\61\0\1\u013d\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13216];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\1\11\10\1\2\11\5\1\2\11"+
    "\1\1\7\11\1\1\1\11\21\0\1\1\14\0\1\11"+
    "\5\0\2\11\1\0\5\11\1\1\7\11\1\1\1\11"+
    "\2\0\1\11\17\0\1\11\7\0\1\11\13\0\1\1"+
    "\1\0\1\11\3\0\4\11\10\0\1\11\10\0\1\11"+
    "\4\0\1\11\1\0\1\11\2\0\2\11\3\0\2\11"+
    "\24\0\2\11\4\0\1\11\3\0\2\11\1\0\1\11"+
    "\4\0\2\11\1\1\1\11\10\0\1\11\1\0\2\11"+
    "\1\0\2\11\1\0\1\11\4\0\1\11\6\0\1\11"+
    "\2\0\1\11\1\0\2\11\1\0\2\11\6\0\1\11"+
    "\3\0\1\11\4\0\1\11\6\0\2\11\1\0\1\11"+
    "\3\0\1\11\2\0\1\11\1\0\3\11\5\0\1\11"+
    "\3\0\1\11\12\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[317];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de Sintaxe Java
    public static LinkedList<TError> TabelaER = new  LinkedList<TError>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro Léxico " + yytext() + "Linha " + yyline +  "Coluna " + yycolumn);
                                     TError dados = new TError(yytext(), yyline, yycolumn, "Erro Lexico", "Simbolo nao permitido");
                                     TabelaER.add(dados);
            }
          case 105: break;
          case 2: 
            { return new Symbol(Simbolos.E, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 3: 
            { return new Symbol(Simbolos.D, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 4: 
            { return new Symbol(Simbolos.L, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 5: 
            { return new Symbol(Simbolos.F, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 6: 
            { return new Symbol(Simbolos.X, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 7: 
            { return new Symbol(Simbolos.AND, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 8: 
            { return new Symbol(Simbolos.XOR, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 9: 
            { return new Symbol(Simbolos.OR, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 10: 
            { return new Symbol(Simbolos.LTHEN, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 11: 
            { return new Symbol(Simbolos.EQU, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 12: 
            { return new Symbol(Simbolos.BTHEN, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 13: 
            { return new Symbol(Simbolos.MOD, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 14: 
            { return new Symbol(Simbolos.OPENPAR, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 15: 
            { return new Symbol(Simbolos.CLOSEPAR, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 16: 
            { return new Symbol(Simbolos.PLUS, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 17: 
            { return new Symbol(Simbolos.MINUS, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 18: 
            { return new Symbol(Simbolos.MULT, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 19: 
            { return new Symbol(Simbolos.DIV, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 20: 
            { return new Symbol(Simbolos.NE, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 21: 
            { return new Symbol(Simbolos.BINNEG, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 22: 
            { return new Symbol(Simbolos.QUEST, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 23: 
            { return new Symbol(Simbolos.OPENBRAC, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 24: 
            { return new Symbol(Simbolos.CLOSEBRAC, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 25: 
            { return new Symbol(Simbolos.OPENKEYS, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 26: 
            { return new Symbol(Simbolos.CLOSEKEYS, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 27: 
            { return new Symbol(Simbolos.COMMA, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 28: 
            { return new Symbol(Simbolos.SEMIC, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 29: 
            { return new Symbol(Simbolos.DOT, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 30: 
            { return new Symbol(Simbolos.COLON, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 31: 
            { /*Espacos em branco devem ser ignorados*/
            }
          case 135: break;
          case 32: 
            { return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 33: 
            { return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 34: 
            { return new Symbol(Simbolos.ANDEQU, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 35: 
            { return new Symbol(Simbolos.XOREQU, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 36: 
            { return new Symbol(Simbolos.SOREQU, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 37: 
            { return new Symbol(Simbolos.DLTHEN, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 38: 
            { return new Symbol(Simbolos.LEQU, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 39: 
            { return new Symbol(Simbolos.EQUEQU, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 40: 
            { return new Symbol(Simbolos.BEQU, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 41: 
            { return new Symbol(Simbolos.DBTHEN, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 42: 
            { return new Symbol(Simbolos.MODEQU, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 43: 
            { return new Symbol(Simbolos.PLUSEQU, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 44: 
            { return new Symbol(Simbolos.PLUSPLUS, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 45: 
            { return new Symbol(Simbolos.MINUSEQU, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 46: 
            { return new Symbol(Simbolos.MINUSMINUS, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 47: 
            { return new Symbol(Simbolos.MULTEQU, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 48: 
            { return new Symbol(Simbolos.DIVEQU, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 49: 
            { return new Symbol(Simbolos.COMMENTS1, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 50: 
            { return new Symbol(Simbolos.NEEQU, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 51: 
            { return new Symbol(Simbolos.STRG, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 52: 
            { return new Symbol(Simbolos.NEW, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 53: 
            { return new Symbol(Simbolos.TRY, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 54: 
            { return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 55: 
            { return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 56: 
            { return new Symbol(Simbolos.OREQU, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 57: 
            { return new Symbol(Simbolos.DBEQU, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 58: 
            { return new Symbol(Simbolos.TBTHEN, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 59: 
            { return new Symbol(Simbolos.COMMENTS2, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 60: 
            { return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 61: 
            { return new Symbol(Simbolos.NULL, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 62: 
            { return new Symbol(Simbolos.BYTE, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 63: 
            { return new Symbol(Simbolos.TRUE, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 64: 
            { return new Symbol(Simbolos.THIS, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 65: 
            { return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 66: 
            { return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 67: 
            { return new Symbol(Simbolos.LONG, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 68: 
            { return new Symbol(Simbolos.SHORT, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 69: 
            { return new Symbol(Simbolos.SUPE, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 70: 
            { return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 71: 
            { return new Symbol(Simbolos.THROW, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 72: 
            { return new Symbol(Simbolos.CATCH, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 73: 
            { return new Symbol(Simbolos.CLAS, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 74: 
            { return new Symbol(Simbolos.FALSE, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 75: 
            { return new Symbol(Simbolos.FLOAT, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 76: 
            { return new Symbol(Simbolos.FINAL, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 77: 
            { return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 78: 
            { return new Symbol(Simbolos.PUBLIC, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 79: 
            { return new Symbol(Simbolos.RETURN, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 80: 
            { return new Symbol(Simbolos.STATIC, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 81: 
            { return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 82: 
            { return new Symbol(Simbolos.NATIVE, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 83: 
            { return new Symbol(Simbolos.DOUBLE, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 84: 
            { return new Symbol(Simbolos.IMPOR, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 85: 
            { return new Symbol(Simbolos.DEC_DIGITS, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 86: 
            { return new Symbol(Simbolos.PACKAG, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 87: 
            { return new Symbol(Simbolos.PRIVATE, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 88: 
            { return new Symbol(Simbolos.EXTEND, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 89: 
            { return new Symbol(Simbolos.DEFAULT, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 90: 
            { return new Symbol(Simbolos.BOOLEAN, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 91: 
            { return new Symbol(Simbolos.FINALLY, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 92: 
            { return new Symbol(Simbolos.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 196: break;
          case 93: 
            { return new Symbol(Simbolos.CONTINUE, yycolumn, yyline, yytext());
            }
          case 197: break;
          case 94: 
            { return new Symbol(Simbolos.AMPERSAND, yycolumn, yyline, yytext());
            }
          case 198: break;
          case 95: 
            { return new Symbol(Simbolos.PROTECTED, yycolumn, yyline, yytext());
            }
          case 199: break;
          case 96: 
            { return new Symbol(Simbolos.TRANSIENT, yycolumn, yyline, yytext());
            }
          case 200: break;
          case 97: 
            { return new Symbol(Simbolos.INTERFACE, yycolumn, yyline, yytext());
            }
          case 201: break;
          case 98: 
            { return new Symbol(Simbolos.INT_LITERAL, yycolumn, yyline, yytext());
            }
          case 202: break;
          case 99: 
            { return new Symbol(Simbolos.THREADSAFE, yycolumn, yyline, yytext());
            }
          case 203: break;
          case 100: 
            { return new Symbol(Simbolos.IMPLEMENTS, yycolumn, yyline, yytext());
            }
          case 204: break;
          case 101: 
            { return new Symbol(Simbolos.INSTANCEOF, yycolumn, yyline, yytext());
            }
          case 205: break;
          case 102: 
            { return new Symbol(Simbolos.SYNCHRONIZED, yycolumn, yyline, yytext());
            }
          case 206: break;
          case 103: 
            { return new Symbol(Simbolos.TEXT, yycolumn, yyline, yytext());
            }
          case 207: break;
          case 104: 
            { return new Symbol(Simbolos.ID, yycolumn, yyline, yytext());
            }
          case 208: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
