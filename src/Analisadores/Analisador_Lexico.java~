/* The following code was generated by JFlex 1.6.1 */

/* Código do Usuário */

package Analisadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/* Opções e Declarações */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalisadorLexico.jflex</tt>
 */
public class Analisador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 50, 50, 51, 50, 50,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    50, 38,  0,  0,  0, 31, 25, 49, 32, 33, 36, 34, 45, 35, 47, 37, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 48, 46, 28, 29, 30, 40, 
     0,  1,  2,  6, 16,  9, 17, 21, 13, 14,  0, 11,  8, 19, 10,  7, 
    20,  0,  5,  3,  4, 15, 22, 23, 18, 12, 24, 41,  0, 42, 26,  0, 
     0,  1,  2,  6, 16,  9, 17, 21, 13, 14,  0, 11,  8, 19, 10,  7, 
    20,  0,  5,  3,  4, 15, 22, 23, 18, 12, 24, 43, 27, 44, 39,  0, 
     0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\7\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\2\1\1\20\1\1\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\1\1\34\27\0\1\35\1\0\1\36\11\0\1\37"+
    "\1\40\1\0\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\12\0\1\61\15\0\1\62\2\0\1\63"+
    "\4\0\1\64\7\0\1\65\1\66\1\67\3\0\1\70"+
    "\6\0\1\71\2\0\1\72\1\0\1\73\3\0\1\74"+
    "\1\75\1\76\2\0\1\77\17\0\1\100\3\0\1\101"+
    "\1\102\2\0\1\103\2\0\1\104\1\0\1\105\10\0"+
    "\1\106\1\107\1\110\4\0\1\111\2\0\1\112\1\0"+
    "\1\113\2\0\1\114\2\0\1\115\2\0\1\116\1\0"+
    "\1\117\5\0\1\120\1\0\1\121\3\0\1\122\3\0"+
    "\1\123\1\124\1\125\1\0\1\126\1\127\10\0\1\130"+
    "\2\0\1\131\1\0\1\132\1\0\1\133\1\134\1\135"+
    "\1\0\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\64\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\64\0\64\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\64\0\64"+
    "\0\64\0\u05b0\0\64\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4"+
    "\0\u06e8\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0820\0\u0854"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\64\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\64\0\64"+
    "\0\u0ccc\0\64\0\64\0\64\0\64\0\64\0\u0d00\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\u0d34\0\64"+
    "\0\64\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\64\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\64\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\64\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484"+
    "\0\u14b8\0\64\0\64\0\64\0\u14ec\0\u1520\0\u1554\0\64"+
    "\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c\0\64\0\u16c0"+
    "\0\u16f4\0\64\0\u1728\0\64\0\u175c\0\u1790\0\u17c4\0\64"+
    "\0\64\0\64\0\u17f8\0\u182c\0\64\0\u1860\0\u1894\0\u18c8"+
    "\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68"+
    "\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\64\0\u1b6c\0\u1ba0\0\u1bd4"+
    "\0\64\0\64\0\u1c08\0\u1c3c\0\64\0\u1c70\0\u1ca4\0\64"+
    "\0\u1cd8\0\64\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\64\0\64\0\u1eac\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\64\0\u1fb0\0\u1fe4\0\64\0\u2018\0\64\0\u204c"+
    "\0\u2080\0\64\0\u20b4\0\u20e8\0\64\0\u211c\0\u2150\0\64"+
    "\0\u2184\0\64\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\64"+
    "\0\u22bc\0\64\0\u22f0\0\u2324\0\u2358\0\64\0\u238c\0\u23c0"+
    "\0\u23f4\0\64\0\64\0\64\0\u2428\0\64\0\64\0\u245c"+
    "\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\64"+
    "\0\u25fc\0\u2630\0\64\0\u2664\0\64\0\u2698\0\64\0\64"+
    "\0\64\0\u26cc\0\64";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\3\2\1\14\1\2\1\15\1\16"+
    "\1\17\1\2\1\20\2\2\1\21\1\2\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\67\0\1\54\66\0\1\55\1\0\1\56\4\0\1\57"+
    "\53\0\1\60\7\0\1\61\1\62\1\0\1\63\7\0"+
    "\1\64\41\0\1\65\7\0\1\66\57\0\1\67\53\0"+
    "\1\70\5\0\1\71\1\72\4\0\1\73\55\0\1\74"+
    "\64\0\1\75\11\0\1\76\42\0\1\77\7\0\1\100"+
    "\5\0\1\101\56\0\1\102\6\0\1\103\1\0\1\104"+
    "\47\0\1\105\1\0\1\106\53\0\1\107\5\0\1\110"+
    "\1\111\5\0\1\112\46\0\1\113\3\0\1\114\11\0"+
    "\1\115\61\0\1\116\103\0\1\117\63\0\1\120\61\0"+
    "\1\121\1\0\1\122\62\0\1\123\1\124\63\0\1\125"+
    "\63\0\1\126\1\127\62\0\1\130\63\0\1\131\4\0"+
    "\1\132\56\0\1\133\5\0\1\134\55\0\1\135\63\0"+
    "\1\136\6\0\1\137\54\0\1\140\107\0\1\141\5\0"+
    "\1\142\71\0\1\143\61\0\1\144\60\0\1\145\60\0"+
    "\1\146\74\0\1\147\60\0\1\150\100\0\1\151\55\0"+
    "\1\152\46\0\1\153\12\0\1\154\2\0\1\155\51\0"+
    "\1\156\10\0\1\157\51\0\1\160\62\0\1\161\1\162"+
    "\71\0\1\163\52\0\1\164\63\0\1\165\74\0\1\166"+
    "\54\0\1\167\64\0\1\170\63\0\1\171\106\0\1\172"+
    "\44\0\1\173\56\0\1\174\1\175\103\0\1\176\56\0"+
    "\1\177\65\0\1\200\52\0\1\201\60\0\1\202\65\0"+
    "\1\203\66\0\1\204\57\0\1\205\64\0\1\206\6\0"+
    "\1\207\47\0\1\210\77\0\1\211\102\0\1\212\63\0"+
    "\1\126\1\213\71\0\1\214\23\0\1\215\60\0\1\216"+
    "\72\0\1\217\64\0\1\220\56\0\1\221\65\0\1\222"+
    "\62\0\1\223\67\0\1\224\56\0\1\225\71\0\1\226"+
    "\62\0\1\227\61\0\1\230\1\0\1\231\55\0\1\232"+
    "\77\0\1\233\55\0\1\234\60\0\1\235\61\0\1\236"+
    "\62\0\1\237\65\0\1\240\103\0\1\241\47\0\1\242"+
    "\63\0\1\243\70\0\1\244\55\0\1\245\57\0\1\246"+
    "\70\0\1\247\61\0\1\250\1\251\55\0\1\252\62\0"+
    "\1\253\65\0\1\254\61\0\1\255\63\0\1\256\75\0"+
    "\1\257\54\0\1\260\105\0\1\261\45\0\1\262\63\0"+
    "\1\263\60\0\1\264\71\0\1\265\61\0\1\266\70\0"+
    "\1\267\62\0\1\270\52\0\1\271\64\0\1\272\64\0"+
    "\1\273\60\0\1\274\107\0\1\275\35\0\1\276\67\0"+
    "\1\277\73\0\1\300\64\0\1\301\50\0\1\302\72\0"+
    "\1\303\77\0\1\304\36\0\1\305\67\0\1\306\63\0"+
    "\1\307\67\0\1\310\62\0\1\311\72\0\1\312\55\0"+
    "\1\313\56\0\1\314\67\0\1\315\54\0\1\316\73\0"+
    "\1\317\53\0\1\320\100\0\1\321\56\0\1\322\53\0"+
    "\1\323\63\0\1\324\70\0\1\325\62\0\1\326\73\0"+
    "\1\327\64\0\1\330\65\0\1\331\55\0\1\332\63\0"+
    "\1\333\71\0\1\334\54\0\1\335\64\0\1\336\72\0"+
    "\1\337\46\0\1\340\102\0\1\341\51\0\1\342\62\0"+
    "\1\343\63\0\1\344\100\0\1\345\44\0\1\346\61\0"+
    "\1\347\65\0\1\350\63\0\1\351\67\0\1\352\60\0"+
    "\1\353\65\0\1\354\55\0\1\355\77\0\1\167\47\0"+
    "\1\356\66\0\1\357\56\0\1\360\73\0\1\361\56\0"+
    "\1\362\73\0\1\363\60\0\1\364\56\0\1\365\70\0"+
    "\1\366\56\0\1\367\71\0\1\370\63\0\1\371\52\0"+
    "\1\372\73\0\1\373\60\0\1\374\67\0\1\375\62\0"+
    "\1\376\70\0\1\377\51\0\1\u0100\100\0\1\u0101\51\0"+
    "\1\u0102\65\0\1\u0103\56\0\1\u0104\77\0\1\u0105\73\0"+
    "\1\u0106\44\0\1\u0107\73\0\1\u0108\45\0\1\u0109\71\0"+
    "\1\u010a\72\0\1\u010b\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9984];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\14\1\1\11\11\1\2\11\5\1\12\11"+
    "\1\1\1\11\27\0\1\11\1\0\1\1\11\0\2\11"+
    "\1\0\5\11\1\1\7\11\1\1\2\11\12\0\1\11"+
    "\15\0\1\11\2\0\1\1\4\0\1\11\7\0\3\11"+
    "\3\0\1\11\6\0\1\11\2\0\1\11\1\0\1\11"+
    "\3\0\3\11\2\0\1\11\17\0\1\11\3\0\2\11"+
    "\2\0\1\11\2\0\1\11\1\0\1\11\10\0\2\11"+
    "\1\1\4\0\1\11\2\0\1\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\1\11\1\0\1\11\5\0"+
    "\1\11\1\0\1\11\3\0\1\11\3\0\3\11\1\0"+
    "\2\11\10\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de Sintaxe Java
    public static LinkedList<TError> TabelaER = new  LinkedList<TError>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro Léxico " + yytext() + "Linha " + yyline +  "Coluna " + yycolumn);
                                     TError dados = new TError(yytext(), yyline, yycolumn, "Erro Lexico", "Simbolo nao permitido");
                                     TabelaER.add(dados);
            }
          case 95: break;
          case 2: 
            { return new Symbol(Simbolos.interfacel, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 3: 
            { return new Symbol(Simbolos.e, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 4: 
            { return new Symbol(Simbolos.d, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 5: 
            { return new Symbol(Simbolos.f, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 6: 
            { return new Symbol(Simbolos.x, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 7: 
            { return new Symbol(Simbolos.ecom, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 8: 
            { return new Symbol(Simbolos.xor, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 9: 
            { return new Symbol(Simbolos.sor, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 10: 
            { return new Symbol(Simbolos.lthen, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 11: 
            { return new Symbol(Simbolos.equ, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 12: 
            { return new Symbol(Simbolos.bthen, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 13: 
            { return new Symbol(Simbolos.modop, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 14: 
            { return new Symbol(Simbolos.openpar, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 15: 
            { return new Symbol(Simbolos.closepar, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 16: 
            { return new Symbol(Simbolos.starimport, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 17: 
            { return new Symbol(Simbolos.ne, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 18: 
            { return new Symbol(Simbolos.binneg, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 19: 
            { return new Symbol(Simbolos.quest, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 20: 
            { return new Symbol(Simbolos.openbrac, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 21: 
            { return new Symbol(Simbolos.closebrac, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 22: 
            { return new Symbol(Simbolos.openkeys, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 23: 
            { return new Symbol(Simbolos.closekeys, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 24: 
            { return new Symbol(Simbolos.conma, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 25: 
            { return new Symbol(Simbolos.semic, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 26: 
            { return new Symbol(Simbolos.dot, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 27: 
            { return new Symbol(Simbolos.colon, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 28: 
            { /*Espacos em branco devem ser ignorados*/
            }
          case 122: break;
          case 29: 
            { return new Symbol(Simbolos.if, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 30: 
            { return new Symbol(Simbolos.do, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 31: 
            { return new Symbol(Simbolos.ecomequ, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 32: 
            { return new Symbol(Simbolos.xorequ, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 33: 
            { return new Symbol(Simbolos.sorequ, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 34: 
            { return new Symbol(Simbolos.dlthen, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 35: 
            { return new Symbol(Simbolos.lequ, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 36: 
            { return new Symbol(Simbolos.equequ, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 37: 
            { return new Symbol(Simbolos.bequ, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 38: 
            { return new Symbol(Simbolos.dbthen, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 39: 
            { return new Symbol(Simbolos.modequ, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 40: 
            { return new Symbol(Simbolos.pluseuq, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 41: 
            { return new Symbol(Simbolos.plusplus, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 42: 
            { return new Symbol(Simbolos.minusequ, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 43: 
            { return new Symbol(Simbolos.minusminus, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 44: 
            { return new Symbol(Simbolos.multequ, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 45: 
            { return new Symbol(Simbolos.divequ, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 46: 
            { return new Symbol(Simbolos.comments1, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 47: 
            { return new Symbol(Simbolos.neequ, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 48: 
            { return new Symbol(Simbolos.strg, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 49: 
            { return new Symbol(Simbolos.try, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 50: 
            { return new Symbol(Simbolos.new, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 51: 
            { return new Symbol(Simbolos.int, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 52: 
            { return new Symbol(Simbolos.for, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 53: 
            { return new Symbol(Simbolos.orequ, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 54: 
            { return new Symbol(Simbolos.tbthen, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 55: 
            { return new Symbol(Simbolos.comments2, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 56: 
            { return new Symbol(Simbolos.byte, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 57: 
            { return new Symbol(Simbolos.true, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 58: 
            { return new Symbol(Simbolos.this, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 59: 
            { return new Symbol(Simbolos.case, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 60: 
            { return new Symbol(Simbolos.char, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 61: 
            { return new Symbol(Simbolos.long, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 62: 
            { return new Symbol(Simbolos.continue, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 63: 
            { return new Symbol(Simbolos.null, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 64: 
            { return new Symbol(Simbolos.break, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 65: 
            { return new Symbol(Simbolos.short, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 66: 
            { return new Symbol(Simbolos.super, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 67: 
            { return new Symbol(Simbolos.throw, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 68: 
            { return new Symbol(Simbolos.catch, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 69: 
            { return new Symbol(Simbolos.class, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 70: 
            { return new Symbol(Simbolos.false, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 71: 
            { return new Symbol(Simbolos.float, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 72: 
            { return new Symbol(Simbolos.final, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 73: 
            { return new Symbol(Simbolos.while, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 74: 
            { return new Symbol(Simbolos.static, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 75: 
            { return new Symbol(Simbolos.switch, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 76: 
            { return new Symbol(Simbolos.return, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 77: 
            { return new Symbol(Simbolos.native, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 78: 
            { return new Symbol(Simbolos.import, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 79: 
            { return new Symbol(Simbolos.double, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 80: 
            { return new Symbol(Simbolos.public, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 81: 
            { return new Symbol(Simbolos.boolean, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 82: 
            { return new Symbol(Simbolos.extends, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 83: 
            { return new Symbol(Simbolos.default, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 84: 
            { return new Symbol(Simbolos.finally, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 85: 
            { return new Symbol(Simbolos.package, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 86: 
            { return new Symbol(Simbolos.private, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 87: 
            { return new Symbol(Simbolos.abstract, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 88: 
            { return new Symbol(Simbolos.transient, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 89: 
            { return new Symbol(Simbolos.interface, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 90: 
            { return new Symbol(Simbolos.protected, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 91: 
            { return new Symbol(Simbolos.threadsafe, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 92: 
            { return new Symbol(Simbolos.instanceof, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 93: 
            { return new Symbol(Simbolos.implements, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 94: 
            { return new Symbol(Simbolos.synchronized, yycolumn, yyline, yytext());
            }
          case 188: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
