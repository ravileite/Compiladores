/* The following code was generated by JFlex 1.6.1 */

/* Código do Usuário */

package analisadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/* Opções e Declarações */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalisadorLexico.jflex</tt>
 */
public class AnalisadorLexicoGen implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 57, 57, 58, 57, 57,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 48, 10,  0,  0, 41, 35,  8, 42, 43, 46, 44,  9, 45,  3, 47, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 56, 55, 38, 39, 40, 50, 
     0, 11, 12, 17,  4,  6,  5, 31, 24, 26,  1, 22, 19, 29, 20, 18, 
    30,  1, 16, 14, 15, 27, 32, 33, 28, 23, 34, 51,  0, 52, 36,  1, 
     0, 11, 12, 17,  4,  6,  5, 31, 24, 26,  1, 22, 19, 29, 20, 18, 
    30,  1, 16, 14, 15, 27, 32, 33, 28, 23, 34, 53, 37, 54, 49,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\3\2\1\5\1\1"+
    "\1\6\1\1\2\2\1\1\6\2\1\1\4\2\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\0\1\3\1\2"+
    "\1\35\3\2\1\0\3\2\2\0\1\3\4\2\5\0"+
    "\20\2\1\36\2\0\1\36\7\2\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\0\3\2\1\62\1\2\1\0\1\2\1\0\2\2"+
    "\1\0\4\2\5\0\6\2\1\63\2\2\1\0\2\2"+
    "\1\0\6\2\1\64\2\2\1\0\1\65\1\0\1\2"+
    "\1\65\3\2\1\0\3\2\1\0\1\2\1\0\1\2"+
    "\1\66\1\67\1\70\1\3\2\2\1\0\1\2\1\0"+
    "\1\2\2\71\1\2\1\0\3\2\1\72\5\0\6\2"+
    "\1\73\1\2\2\74\1\2\2\75\2\2\1\0\1\2"+
    "\1\76\1\77\1\0\1\2\1\100\4\0\4\2\1\0"+
    "\2\2\1\0\3\2\2\101\1\0\1\2\1\102\2\2"+
    "\1\73\1\103\2\104\1\2\1\0\1\2\2\105\1\2"+
    "\2\0\1\106\1\107\1\0\2\2\1\106\1\107\1\2"+
    "\1\0\1\2\1\110\1\2\1\111\1\0\1\2\2\112"+
    "\1\0\1\2\4\0\4\2\1\0\2\2\1\0\1\2"+
    "\1\0\2\2\2\113\1\2\1\114\1\0\2\2\1\0"+
    "\2\2\1\115\1\0\1\116\1\115\1\2\1\116\1\0"+
    "\1\2\2\117\1\120\1\0\1\2\2\121\2\0\1\122"+
    "\1\0\2\2\1\122\1\2\1\0\2\2\1\0\1\2"+
    "\2\123\1\0\1\2\1\124\2\125\2\126\1\0\1\2"+
    "\1\127\1\0\1\2\1\0\1\2\1\0\1\2\3\0"+
    "\3\2\2\130\1\2\2\131\1\0\1\2\2\132\1\0"+
    "\1\2\1\0\1\2\2\133\3\0\4\2\2\134\1\0"+
    "\1\2\2\135\1\0\1\136\1\0\1\2\1\136\1\2"+
    "\1\137\1\0\1\2\1\140\1\141\1\140\1\141\1\0"+
    "\1\2\2\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\73\0\u01d8\0\73\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\73\0\73\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811"+
    "\0\73\0\73\0\u084c\0\73\0\73\0\73\0\73\0\73"+
    "\0\354\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0213\0\73\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\73"+
    "\0\u10d3\0\u110e\0\166\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\73\0\73\0\73\0\73\0\73\0\u12e6"+
    "\0\73\0\73\0\73\0\u1321\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\u135c\0\u1397\0\u13d2"+
    "\0\u140d\0\166\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f"+
    "\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747"+
    "\0\u1782\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f"+
    "\0\166\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\166\0\u1c1e\0\u1c59"+
    "\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31"+
    "\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009"+
    "\0\73\0\73\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b"+
    "\0\u21a6\0\u21e1\0\73\0\166\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\166\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a"+
    "\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\166\0\u25cc\0\73"+
    "\0\166\0\u2607\0\73\0\166\0\u2642\0\u267d\0\u26b8\0\u26f3"+
    "\0\166\0\166\0\u272e\0\u2769\0\166\0\u27a4\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\73\0\166\0\u2b19\0\u2b54"+
    "\0\73\0\u2b8f\0\u2bca\0\73\0\166\0\u2c05\0\u2c40\0\u2c7b"+
    "\0\u2cb6\0\u2cf1\0\73\0\166\0\u2d2c\0\u2d67\0\u2da2\0\73"+
    "\0\73\0\u2ddd\0\u2e18\0\u2e53\0\166\0\166\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\166\0\u2fb5\0\u2ff0\0\73\0\166"+
    "\0\u302b\0\u3066\0\u30a1\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8"+
    "\0\u3203\0\u323e\0\u3279\0\u32b4\0\u32ef\0\u332a\0\u3365\0\u33a0"+
    "\0\u33db\0\u3416\0\73\0\166\0\u3451\0\166\0\u348c\0\u34c7"+
    "\0\u3502\0\u353d\0\u3578\0\u35b3\0\73\0\u35ee\0\73\0\166"+
    "\0\u3629\0\166\0\u3664\0\u369f\0\73\0\166\0\166\0\u36da"+
    "\0\u3715\0\73\0\166\0\u3750\0\u378b\0\73\0\u37c6\0\u3801"+
    "\0\u383c\0\166\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e"+
    "\0\73\0\166\0\u39d9\0\u3a14\0\166\0\73\0\166\0\73"+
    "\0\166\0\u3a4f\0\u3a8a\0\166\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76"+
    "\0\u3bb1\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e"+
    "\0\73\0\166\0\u3d89\0\73\0\166\0\u3dc4\0\u3dff\0\73"+
    "\0\166\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\73\0\166\0\u3f26"+
    "\0\u3f61\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\73\0\166"+
    "\0\u40c3\0\u40fe\0\73\0\166\0\u4139\0\73\0\u4174\0\u41af"+
    "\0\166\0\u41ea\0\166\0\u4225\0\u4260\0\73\0\73\0\166"+
    "\0\166\0\u429b\0\u42d6\0\73\0\166";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\3\1\24\1\25\1\2\3\3\1\26"+
    "\1\27\3\3\1\30\1\3\1\31\1\32\1\3\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\11\75\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\32\0\1\4\1\61\71\0\1\62\71\0"+
    "\2\3\1\0\2\3\1\63\4\0\2\3\1\0\4\3"+
    "\1\64\2\3\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\1\65\1\3\1\0\4\3\1\66"+
    "\1\67\1\3\1\0\3\3\1\70\1\71\10\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\5\3\1\72"+
    "\1\3\1\0\3\3\1\0\2\3\1\73\6\3\31\0"+
    "\6\74\2\0\1\74\1\0\2\74\1\0\7\74\1\0"+
    "\3\74\1\0\11\74\31\0\6\75\2\0\1\75\1\76"+
    "\2\75\1\0\7\75\1\0\3\75\1\0\11\75\31\0"+
    "\2\3\1\0\3\3\4\0\1\3\1\77\1\0\7\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\2\3\1\100\1\3\1\101\2\3"+
    "\1\0\1\3\1\102\1\3\1\0\11\3\47\0\1\103"+
    "\7\0\1\104\1\105\2\0\1\106\5\0\1\107\32\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\1\3\1\110"+
    "\5\3\1\0\1\3\1\111\1\112\1\0\1\3\1\113"+
    "\5\3\1\114\1\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\2\3\1\115\4\3\1\0\2\3\1\116"+
    "\1\0\11\3\31\0\2\3\1\0\2\3\1\117\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\1\120\1\3\1\0\4\3"+
    "\1\121\1\122\1\3\1\0\2\3\1\123\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\4\3"+
    "\1\124\2\3\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\2\3\1\125\4\0\1\126\1\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\127\7\3\35\0\1\130"+
    "\16\0\1\131\10\0\1\132\36\0\2\3\1\0\1\3"+
    "\1\133\1\3\4\0\2\3\1\0\6\3\1\134\1\0"+
    "\3\3\1\0\3\3\1\135\5\3\31\0\2\3\1\0"+
    "\3\3\4\0\1\136\1\3\1\0\2\3\1\137\4\3"+
    "\1\0\3\3\1\0\1\3\1\140\7\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\4\3\1\141\2\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\2\3\1\142\1\0"+
    "\11\3\73\0\1\143\3\0\1\144\72\0\1\145\70\0"+
    "\1\146\1\0\1\147\71\0\1\150\1\151\72\0\1\152"+
    "\72\0\1\153\1\154\71\0\1\155\72\0\1\156\4\0"+
    "\1\157\65\0\1\160\5\0\1\161\64\0\1\162\72\0"+
    "\1\163\72\0\1\164\107\0\1\165\10\0\1\62\1\0"+
    "\2\76\1\166\65\0\2\3\1\0\1\3\1\167\1\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\170\7\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\5\3\1\171\1\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\2\3\1\172\4\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\4\3\1\173\2\3\1\0\3\3\1\0\11\3"+
    "\54\0\1\174\47\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\6\3\1\175\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\176\1\177\6\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\200\5\3\1\0\3\3"+
    "\1\0\11\3\40\0\1\76\63\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\201\1\202\6\3\1\0\3\3\1\0"+
    "\11\3\31\0\2\3\1\0\2\3\1\203\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\4\3\1\204\2\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\205\5\3\1\0\3\3"+
    "\1\0\11\3\43\0\1\206\103\0\1\207\70\0\1\210"+
    "\106\0\1\211\65\0\2\212\41\0\2\3\1\0\3\3"+
    "\4\0\1\213\1\3\1\0\7\3\1\0\3\3\1\0"+
    "\11\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\6\3\1\214\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\4\3\1\215\2\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\4\3"+
    "\1\216\4\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\212\1\217\10\3\31\0"+
    "\2\3\1\0\3\3\4\0\1\220\1\3\1\0\7\3"+
    "\1\0\1\3\1\221\1\3\1\0\1\3\1\222\7\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\2\3"+
    "\1\223\4\3\1\0\3\3\1\224\1\225\10\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\1\3\1\226"+
    "\5\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\227\1\230\1\231\5\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\6\3\1\232\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\1\233\1\3\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\1\234\1\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\6\3\1\235\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\7\3\1\236\1\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\1\3\1\237\5\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\5\3\1\240\1\3\1\0\3\3\1\0"+
    "\11\3\45\0\2\241\1\242\111\0\1\243\35\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\241\1\244\1\245\5\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\4\3"+
    "\1\246\4\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\3\3\1\247\3\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\4\3"+
    "\1\250\2\3\1\0\3\3\1\251\1\252\10\3\31\0"+
    "\2\3\1\0\3\3\4\0\1\3\1\253\1\0\7\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\5\3\1\254\1\3\1\0\3\3"+
    "\1\255\1\256\10\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\257\1\260\10\3"+
    "\77\0\1\261\72\0\1\262\1\263\31\0\1\264\35\0"+
    "\1\264\6\0\2\264\16\0\2\3\1\0\3\3\4\0"+
    "\1\265\1\3\1\0\7\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\1\3\1\266\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\267\1\222\6\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\1\270"+
    "\1\3\1\0\7\3\1\0\3\3\1\0\11\3\43\0"+
    "\1\271\60\0\2\3\1\0\3\3\4\0\1\272\1\3"+
    "\1\0\7\3\1\0\3\3\1\0\11\3\36\0\1\273"+
    "\65\0\2\3\1\0\2\3\1\274\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\2\3\1\275\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\47\0\1\276\54\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\277\5\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\1\300"+
    "\1\3\1\0\7\3\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\5\3\1\301"+
    "\1\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\2\3\1\302\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\47\0\1\303\74\0\1\304\71\0\1\305"+
    "\60\0\1\306\103\0\1\307\54\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\310\5\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\3\3\1\311\3\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\2\3"+
    "\1\312\4\3\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\2\3\1\313\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\1\3\1\314\5\3\1\0\3\3\1\0"+
    "\11\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\6\3\1\315\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\2\3\1\316\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\4\3\1\317\2\3\1\0\3\3\1\0"+
    "\11\3\45\0\2\320\55\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\320\1\321\6\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\1\3\1\322\7\3\36\0\1\323"+
    "\65\0\2\3\1\0\2\3\1\324\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\3\3\1\325\3\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\1\3\1\326\5\3\1\0\3\3\1\0"+
    "\11\3\31\0\2\3\1\0\3\3\4\0\2\3\1\327"+
    "\1\330\6\3\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\2\3\1\331\4\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\5\3"+
    "\1\332\3\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\333\1\334\10\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\5\3\1\335"+
    "\1\3\1\0\3\3\1\0\11\3\47\0\1\336\61\0"+
    "\1\337\106\0\1\340\1\341\50\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\342\5\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\2\3\1\343\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\4\3\1\344"+
    "\1\345\1\3\1\0\3\3\1\0\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\346\1\347"+
    "\2\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\1\3\1\350\5\3\1\0\3\3\1\0"+
    "\11\3\70\0\1\351\33\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\6\3\1\352"+
    "\2\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\5\3\1\353\1\3\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\1\354\1\3\1\0\7\3"+
    "\1\0\3\3\1\0\11\3\34\0\1\355\67\0\2\3"+
    "\1\0\1\356\2\3\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\11\3\53\0\1\357\50\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\5\3\1\360\1\3\1\0"+
    "\3\3\1\0\11\3\77\0\1\361\27\0\2\76\66\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\7\3\1\0"+
    "\3\3\1\0\1\3\1\362\7\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\5\3\1\363\1\3\1\0"+
    "\3\3\1\0\11\3\36\0\1\364\65\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\1\3\1\365\5\3\1\0"+
    "\3\3\1\0\11\3\53\0\1\366\50\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\5\3\1\367\1\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\6\3\1\370\1\0\3\3\1\0\11\3"+
    "\50\0\1\371\53\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\2\3\1\372\4\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\373\1\374\2\3\1\0\11\3\31\0\2\3\1\0"+
    "\2\3\1\375\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\61\0\2\376\70\0\1\377\61\0\1\u0100"+
    "\73\0\1\u0101\73\0\1\u0102\52\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\376\1\u0103"+
    "\10\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\7\3\1\0\2\3\1\u0104\1\0\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\1\3\1\u0105\5\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\2\3\1\u0106\4\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\3\3\1\u0107\3\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\u0108\1\u0109"+
    "\6\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\7\3\1\u010a\1\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\2\3\1\u010b\4\3\1\0\3\3\1\0"+
    "\11\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\7\3\1\0\2\3\1\u010c\1\0\11\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\u010d\1\u010e\10\3\45\0\2\u010f\55\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\u010f\1\u0110\6\3\1\0\3\3"+
    "\1\0\11\3\70\0\1\u0111\33\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\6\3"+
    "\1\u0112\2\3\43\0\1\u0113\77\0\1\u0114\72\0\1\u0115"+
    "\60\0\1\u0116\65\0\2\3\1\0\3\3\4\0\1\u0117"+
    "\1\3\1\0\7\3\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\2\3\1\u0118"+
    "\4\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\2\3\1\u0119\4\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\2\3\1\u011a"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\11\3"+
    "\43\0\1\u011b\60\0\2\3\1\0\3\3\4\0\1\u011c"+
    "\1\3\1\0\7\3\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\2\3\1\u011d\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\11\3\43\0\1\u011e\60\0\2\3"+
    "\1\0\3\3\4\0\1\u011f\1\3\1\0\7\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\u0120\1\u0121\10\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\1\3"+
    "\1\u0122\5\3\1\0\3\3\1\0\11\3\36\0\1\u0123"+
    "\65\0\2\3\1\0\2\3\1\u0124\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\5\3\1\u0125\1\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\2\3\1\u0126"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\11\3"+
    "\53\0\1\u0127\50\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\5\3\1\u0128\1\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\1\u0129\2\3\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\43\0\1\u012a\60\0"+
    "\2\3\1\0\3\3\4\0\1\u012b\1\3\1\0\7\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\1\u012c\1\3\1\0\7\3\1\0\3\3\1\0"+
    "\11\3\51\0\1\u012d\71\0\1\u012e\102\0\1\u012f\43\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\3\3\1\u0130"+
    "\3\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\2\3\1\u0131\4\3\1\0"+
    "\3\3\1\0\11\3\31\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\2\3\1\u0132\1\0\11\3"+
    "\61\0\2\u0133\41\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\u0133\1\u0134\10\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\u0135\1\u0136\6\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\6\3\1\u0137\1\0\3\3\1\0"+
    "\11\3\54\0\1\u0138\47\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\6\3\1\u0139\1\0\3\3\1\0\11\3"+
    "\36\0\1\u013a\65\0\2\3\1\0\2\3\1\u013b\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\11\3\54\0"+
    "\1\u013c\53\0\1\u013d\104\0\1\u013e\110\0\1\u013f\36\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\0\6\3\1\u0140"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\1\3"+
    "\1\u0141\1\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\1\3\1\u0142\5\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\3\3\1\u0143\5\3\67\0\1\u0144"+
    "\34\0\2\3\1\0\3\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\5\3\1\u0145\3\3\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\3\3\1\u0146\3\3"+
    "\1\0\3\3\1\0\11\3\47\0\1\u0147\54\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\1\3\1\u0148\5\3"+
    "\1\0\3\3\1\0\11\3\51\0\1\u0149\52\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\3\3\1\u014a\3\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\u014b\1\u014c"+
    "\10\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\1\3\1\u014d\5\3\1\0\3\3\1\0\11\3\57\0"+
    "\1\u014e\44\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\7\3\1\0\1\3\1\u014f\1\3\1\0\11\3\31\0"+
    "\2\3\1\0\3\3\4\0\2\3\1\u0150\1\u0151\6\3"+
    "\1\0\3\3\1\0\11\3\51\0\1\u0152\52\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\3\3\1\u0153\3\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\6\3\1\u0154\1\0\3\3\1\0"+
    "\11\3\52\0\1\u0155\51\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\4\3\1\u0156\2\3\1\0\3\3\1\0"+
    "\11\3\36\0\1\u0157\65\0\2\3\1\0\2\3\1\u0158"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\11\3"+
    "\63\0\1\u0159\40\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\1\3\1\u015a\7\3"+
    "\51\0\1\u015b\64\0\1\u015c\65\0\1\u015d\65\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\3\3\1\u015e\3\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\3\3"+
    "\4\0\1\u015f\1\3\1\0\7\3\1\0\3\3\1\0"+
    "\11\3\31\0\2\3\1\0\2\3\1\u0160\4\0\2\3"+
    "\1\0\7\3\1\0\3\3\1\0\11\3\36\0\1\u0161"+
    "\65\0\2\3\1\0\2\3\1\u0162\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\0\1\3\1\u0163\5\3\1\0"+
    "\3\3\1\0\11\3\36\0\1\u0164\65\0\2\3\1\0"+
    "\2\3\1\u0165\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\53\0\1\u0166\50\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\5\3\1\u0167\1\3\1\0\3\3"+
    "\1\0\11\3\47\0\1\u0168\54\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\1\3\1\u0169\5\3\1\0\3\3"+
    "\1\0\11\3\54\0\1\u016a\47\0\2\3\1\0\3\3"+
    "\4\0\2\3\1\0\6\3\1\u016b\1\0\3\3\1\0"+
    "\11\3\54\0\1\u016c\47\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\6\3\1\u016d\1\0\3\3\1\0\11\3"+
    "\36\0\1\u016e\65\0\2\3\1\0\2\3\1\u016f\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\0\11\3\36\0"+
    "\1\u0170\105\0\1\u0171\75\0\1\u0172\47\0\2\3\1\0"+
    "\2\3\1\u0173\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\31\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\3\3\1\u0174\3\3\1\0\3\3\1\0\11\3"+
    "\31\0\2\3\1\0\3\3\4\0\2\3\1\0\6\3"+
    "\1\u0175\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\2\3\1\u0176\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\11\3\36\0\1\u0177\65\0\2\3\1\0\2\3"+
    "\1\u0178\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\11\3\61\0\2\u0179\41\0\2\3\1\0\3\3\4\0"+
    "\2\3\1\0\7\3\1\0\3\3\1\u0179\1\u017a\10\3"+
    "\47\0\1\u017b\54\0\2\3\1\0\3\3\4\0\2\3"+
    "\1\0\1\3\1\u017c\5\3\1\0\3\3\1\0\11\3"+
    "\52\0\1\u017d\56\0\1\u017e\103\0\1\u017f\54\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\4\3\1\u0180\2\3"+
    "\1\0\3\3\1\0\11\3\31\0\2\3\1\0\2\3"+
    "\1\u0181\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\11\3\31\0\2\3\1\0\3\3\4\0\2\3\1\0"+
    "\1\3\1\u0182\5\3\1\0\3\3\1\0\11\3\31\0"+
    "\2\3\1\0\1\u0183\2\3\4\0\2\3\1\0\7\3"+
    "\1\0\3\3\1\0\11\3\72\0\1\u0184\31\0\2\3"+
    "\1\0\3\3\4\0\2\3\1\0\7\3\1\0\3\3"+
    "\1\0\10\3\1\u0185\35\0\1\u0186\102\0\2\u0187\55\0"+
    "\2\3\1\0\1\3\1\u0188\1\3\4\0\2\3\1\0"+
    "\7\3\1\0\3\3\1\0\11\3\31\0\2\3\1\0"+
    "\3\3\4\0\2\3\1\u0187\1\u0189\6\3\1\0\3\3"+
    "\1\0\11\3\36\0\1\u018a\65\0\2\3\1\0\2\3"+
    "\1\u018b\4\0\2\3\1\0\7\3\1\0\3\3\1\0"+
    "\11\3\34\0\1\u018c\67\0\2\3\1\0\1\u018d\2\3"+
    "\4\0\2\3\1\0\7\3\1\0\3\3\1\0\11\3"+
    "\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17169];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\1\11\1\1\1\11\26\1\2\11"+
    "\5\1\2\11\1\1\5\11\1\0\6\1\1\0\3\1"+
    "\2\0\1\11\4\1\5\0\20\1\1\11\2\0\10\1"+
    "\5\11\1\1\3\11\1\1\11\11\1\0\5\1\1\0"+
    "\1\1\1\0\2\1\1\0\4\1\5\0\11\1\1\0"+
    "\2\1\1\0\11\1\1\0\1\1\1\0\5\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\11\4\1\1\0"+
    "\1\1\1\0\1\1\1\11\2\1\1\0\4\1\5\0"+
    "\10\1\1\11\2\1\1\11\3\1\1\0\3\1\1\0"+
    "\2\1\4\0\4\1\1\0\2\1\1\0\3\1\1\11"+
    "\1\1\1\0\1\1\1\11\2\1\1\11\4\1\1\0"+
    "\1\1\1\11\2\1\2\0\2\11\1\0\5\1\1\0"+
    "\4\1\1\0\1\1\1\11\1\1\1\0\1\1\4\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\2\1\1\11"+
    "\3\1\1\0\2\1\1\0\2\1\1\11\1\0\1\11"+
    "\3\1\1\0\1\1\1\11\2\1\1\0\1\1\1\11"+
    "\1\1\2\0\1\11\1\0\4\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\0\2\1\1\11\1\1\1\11"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\3\0\3\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\3\0\4\1\1\11\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\11\1\0\4\1\1\0\1\1\2\11"+
    "\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de Sintaxe Java
    public static LinkedList<TError> TabelaER = new  LinkedList<TError>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalisadorLexicoGen(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro Lexico " + yytext() + " Linha " + (yyline+1) +  " Coluna " + (yycolumn+1));
                                     TError dados = new TError(yytext(), yyline, yycolumn, "Erro Lexico", "Simbolo nao permitido");
                                     TabelaER.add(dados);
            }
          case 99: break;
          case 2: 
            { return new Symbol(Simbolos.IDENTIFIER, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 3: 
            { return new Symbol(Simbolos.LITERAL, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 4: 
            { return new Symbol(Simbolos.DOT, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 5: 
            { /*Espacos em branco devem ser ignorados*/
            }
          case 103: break;
          case 6: 
            { return new Symbol(Simbolos.COMMA, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 7: 
            { return new Symbol(Simbolos.AMPER, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 8: 
            { return new Symbol(Simbolos.XOR, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 9: 
            { return new Symbol(Simbolos.SOR, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 10: 
            { return new Symbol(Simbolos.LTHEN, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 11: 
            { return new Symbol(Simbolos.EQU, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 12: 
            { return new Symbol(Simbolos.BTHEN, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 13: 
            { return new Symbol(Simbolos.MOD, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 14: 
            { return new Symbol(Simbolos.OPENPAR, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 15: 
            { return new Symbol(Simbolos.CLOSEPAR, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 16: 
            { return new Symbol(Simbolos.PLUS, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 17: 
            { return new Symbol(Simbolos.MINUS, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 18: 
            { return new Symbol(Simbolos.MULT, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 19: 
            { return new Symbol(Simbolos.DIV, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 20: 
            { return new Symbol(Simbolos.NE, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 21: 
            { return new Symbol(Simbolos.TIL, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 22: 
            { return new Symbol(Simbolos.QUE, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 23: 
            { return new Symbol(Simbolos.OPENBRAC, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 24: 
            { return new Symbol(Simbolos.CLOSEBRAC, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 25: 
            { return new Symbol(Simbolos.OPENKEYS, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 26: 
            { return new Symbol(Simbolos.CLOSEKEYS, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 27: 
            { return new Symbol(Simbolos.SEMIC, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 28: 
            { return new Symbol(Simbolos.COLON, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 29: 
            { return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 30: 
            { return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 31: 
            { return new Symbol(Simbolos.OP_LAND, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 32: 
            { return new Symbol(Simbolos.ASS_AND, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 33: 
            { return new Symbol(Simbolos.ASS_XOR, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 34: 
            { return new Symbol(Simbolos.OP_LOR, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 35: 
            { return new Symbol(Simbolos.ASS_OR, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 36: 
            { return new Symbol(Simbolos.OP_SHL, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 37: 
            { return new Symbol(Simbolos.OP_LE, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 38: 
            { return new Symbol(Simbolos.OP_EQ, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 39: 
            { return new Symbol(Simbolos.OP_GE, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 40: 
            { return new Symbol(Simbolos.OP_SHR, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 41: 
            { return new Symbol(Simbolos.ASS_MOD, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 42: 
            { return new Symbol(Simbolos.ASS_ADD, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 43: 
            { return new Symbol(Simbolos.OP_INC, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 44: 
            { return new Symbol(Simbolos.ASS_SUB, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 45: 
            { return new Symbol(Simbolos.OP_DEC, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 46: 
            { return new Symbol(Simbolos.ASS_MUL, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 47: 
            { return new Symbol(Simbolos.ASS_DIV, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 48: 
            { return new Symbol(Simbolos.OP_NE, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 49: 
            { return new Symbol(Simbolos.OP_DIM, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 50: 
            { return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 51: 
            { return new Symbol(Simbolos.TRY, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 52: 
            { return new Symbol(Simbolos.NEW, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 53: 
            { return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 54: 
            { return new Symbol(Simbolos.ASS_SHL, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 55: 
            { return new Symbol(Simbolos.ASS_SHR, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 56: 
            { return new Symbol(Simbolos.OP_SHRR, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 57: 
            { return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 58: 
            { return new Symbol(Simbolos.BYTE, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 59: 
            { return new Symbol(Simbolos.BOOLLIT, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 60: 
            { return new Symbol(Simbolos.THIS, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 61: 
            { return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 62: 
            { return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 63: 
            { return new Symbol(Simbolos.LONG, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 64: 
            { return new Symbol(Simbolos.JNULL, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 65: 
            { return new Symbol(Simbolos.VOID, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 66: 
            { return new Symbol(Simbolos.ASS_SHRR, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 67: 
            { return new Symbol(Simbolos.FLOAT, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 68: 
            { return new Symbol(Simbolos.FINAL, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 69: 
            { return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 70: 
            { return new Symbol(Simbolos.SHORT, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 71: 
            { return new Symbol(Simbolos.SUPER, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 72: 
            { return new Symbol(Simbolos.THROW, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 73: 
            { return new Symbol(Simbolos.CATCH, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 74: 
            { return new Symbol(Simbolos.CLASS, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 75: 
            { return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 76: 
            { return new Symbol(Simbolos.DOUBLE, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 77: 
            { return new Symbol(Simbolos.STATIC, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 78: 
            { return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 79: 
            { return new Symbol(Simbolos.THROWS, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 80: 
            { return new Symbol(Simbolos.RETURN, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 81: 
            { return new Symbol(Simbolos.NATIVE, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 82: 
            { return new Symbol(Simbolos.IMPORT, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 83: 
            { return new Symbol(Simbolos.PUBLIC, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 84: 
            { return new Symbol(Simbolos.DEFAULT, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 85: 
            { return new Symbol(Simbolos.FINALLY, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 86: 
            { return new Symbol(Simbolos.EXTENDS, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 87: 
            { return new Symbol(Simbolos.BOOLEAN, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 88: 
            { return new Symbol(Simbolos.PACKAGE, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 89: 
            { return new Symbol(Simbolos.PRIVATE, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 90: 
            { return new Symbol(Simbolos.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 91: 
            { return new Symbol(Simbolos.CONTINUE, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 92: 
            { return new Symbol(Simbolos.VOLATILE, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 93: 
            { return new Symbol(Simbolos.TRANSIENT, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 94: 
            { return new Symbol(Simbolos.INTERFACE, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 95: 
            { return new Symbol(Simbolos.PROTECTED, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 96: 
            { return new Symbol(Simbolos.INSTANCEOF, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 97: 
            { return new Symbol(Simbolos.IMPLEMENTS, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 98: 
            { return new Symbol(Simbolos.SYNCHRONIZED, yycolumn, yyline, yytext());
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
