/* C�digo do Usu�rio */

package analisadores;
import java_cup.runtime.Symbol;
import java.util.Arrays;
import java.util.LinkedList;
import auxiliares.*;

parser code
{:
    public Util util = new Util();
    public ArmazenadorCodigoAssembly armazemCodigo = new ArmazenadorCodigoAssembly();
    public String resultado = "";
    public static LinkedList<TError> TabelaERSintatico = new  LinkedList<TError>();


    public void syntaxError(Symbol symbol){

        String lexema = symbol.value.toString();
        int linha = symbol.right;
        int coluna = symbol.left;
        
        System.out.println("Erro sintatico!");
        System.out.println("\tLexema:   " + lexema);
        System.out.println("\tLinha: " + linha);
        System.out.println("\tColuna: " + coluna);



        TError dados = new TError(lexema, linha, coluna, "Erro Sintatico",  "Caractere nao reconhecido!");
        TabelaERSintatico.add(dados);   
    }

    public void unrecoveredSyntaxError(Symbol symbol) throws java.lang.Exception{
        String lexema = symbol.value.toString();
        int linha = symbol.right;
        int coluna = symbol.left;

        System.out.println("Erro sintatico irrecuperavel!");
        System.out.println("\tLexema:   " + lexema);
        System.out.println("\tLinha: " + linha);
        System.out.println("\tColuna: " + coluna);

        TError dados = new TError(lexema, linha, coluna, "Erro Sintatico",  "Caractere nao reconhecido!");
        TabelaERSintatico.add(dados);
    }
    
:}

    //A��es Gramaticais

action code {:

	ArmazenadorVariavel armazemVar = new ArmazenadorVariavel();
    ArmazenadorMetodos armazemMetodos = new ArmazenadorMetodos();
    
    



:}


/* Declaracoes */

    //Terminais
terminal BOOLEAN, CHAR, BYTE, SHORT, INT, LONG, FLOAT, DOUBLE, VOID, STRGN;
terminal PACKAGE, IMPORT;
terminal ABSTRACT, FINAL, PUBLIC, PROTECTED, PRIVATE, STATIC, TRANSIENT, VOLATILE, NATIVE, SYNCHRONIZED;
terminal CLASS, INTERFACE, IMPLEMENTS, OP_DIM, THROWS, EXTENDS, CASE, DEFAULT, IF, SWITCH, ELSE;
terminal WHILE, DO, FOR, BREAK, RETURN, TRY, THIS, SUPER, JNULL, OP_INC, OP_DEC;
terminal OP_LE, OP_GE, INSTANCEOF, OP_EQ, OP_NE, OP_LAND, OP_LOR;
terminal ASS_MUL, ASS_DIV, ASS_MOD, ASS_ADD, ASS_SUB, ASS_SHL, ASS_SHR, ASS_SHRR, ASS_AND, ASS_XOR, ASS_OR;
terminal COMMA, SEMIC, DOT, MULT, OPENKEYS, CLOSEKEYS, EQU, OPENPAR, CLOSEPAR, COLON;
terminal OPENBRAC, CLOSEBRAC, TIL, NE, PLUS, MINUS, DIV, MOD, BTHEN, LTHEN, XOR, SOR, AMPER, QUE, CONTINUE, THROW, CATCH, FINALLY, NEW, OP_SHL, OP_SHR, OP_SHRR;

terminal String IDENTIFIER, LITERAL, BOOLLIT;  
 

non terminal ProgramFile;
non terminal PackageStatement, TypeDeclarations, TypeDeclarationOptSemi;
non terminal TypeDeclaration, ImportStatement, ImportStatements, ClassHeader, Modifiers, Modifier;
non terminal Extends, Interfaces, FieldDeclarations, ClassNameList, FieldDeclarationOptSemi, ClassWord;
non terminal FieldDeclaration, MethodDeclaration, ConstructorDeclaration, StaticInitializer;
non terminal ArrayInitializers;
non terminal Throws; 
non terminal ConstructorDeclarator;
non terminal EmptyStatement, LabelStatement, SelectionStatement;
non terminal IterationStatement, GuardingStatement, ConstantExpression; 
non terminal ForInit, ExpressionStatement, Catches, Finally, CatchHeader;  
non terminal SpecialName;
non terminal SemiColons, NonStaticInitializer, LocalVariableDeclarationStatement, CompilationUnit;  
non terminal ForExpr, ForIncr, ExpressionStatements, Catch, LogicalUnaryOperator;  
non terminal AssignmentOperator; 

non terminal String ArithmeticUnaryOperator;
non terminal String Block;
non terminal String PrimitiveType, TypeName, TypeSpecifier;
non terminal String PrimitiveTypeExpression, ClassTypeExpression;
non terminal String QualifiedName, NewAllocationExpression, PlainNewAllocationExpression;
non terminal String ArrayAllocationExpression, ClassAllocationExpression;
non terminal String DimExprs, Dims, DimExpr;
non terminal String ArrayAccess, FieldAccess;
non terminal String MethodCall, MethodAccess, DeclaratorName, MethodBody, ArgumentList, Parameter;
non terminal String LocalVariableDeclarationsAndStatements, LocalVariableDeclarationOrStatement, Statement, JumpStatement, ParameterList;
non terminal Variavel FieldVariableDeclaration, VariableDeclarators, VariableDeclarator;
non terminal Metodo MethodDeclarator;
non terminal Tuple ComplexPrimaryNoParenthesis, ComplexPrimary, NotJustName, PrimaryExpression;
non terminal Tuple PostfixExpression, RealPostfixExpression, LogicalUnaryExpression;
non terminal Tuple UnaryExpression, CastExpression, MultiplicativeExpression, AdditiveExpression;
non terminal Tuple ShiftExpression, RelationalExpression, ConditionalOrExpression, ConditionalAndExpression;
non terminal Tuple EqualityExpression, AndExpression, ExclusiveOrExpression, InclusiveOrExpression;
non terminal Tuple ConditionalExpression, AssignmentExpression, Expression, VariableInitializer;

precedence nonassoc ELSE, DOT, OPENPAR, OPENBRAC; //eh bom conferir se eh isso mesmo

start with CompilationUnit;

/* Gramatica */

TypeSpecifier::= TypeName:type {: RESULT = type; :} | TypeName:type Dims:val {: RESULT = type + val; :};

TypeName::= PrimitiveType:type {: RESULT = type; :} | QualifiedName:type {: RESULT = type; :} ; // tem que mecher no qualified name depois pra permitir classe como tipo

ClassNameList ::= QualifiedName | ClassNameList COMMA QualifiedName;

PrimitiveType
	::= BOOLEAN:type  {: RESULT = "boolean"; :}
	| CHAR:type       {: RESULT = "char"; :}
	| BYTE:type       {: RESULT = "byte"; :}
	| SHORT:type      {: RESULT = "short"; :}
	| INT:type        {: RESULT = "int"; :}
	| LONG:type       {: RESULT = "long"; :}
	| FLOAT:type      {: RESULT = "float"; :}
	| DOUBLE:type     {: RESULT = "double"; :}
	| VOID:type       {: RESULT = "void"; :}
	| STRGN:type	  {: RESULT = "String"; :}
	;

SemiColons
	::= SEMIC
        | SemiColons SEMIC
        ;

CompilationUnit
	::= ProgramFile
        ;

ProgramFile
	::= PackageStatement ImportStatements TypeDeclarations
	| PackageStatement ImportStatements
	| PackageStatement                  TypeDeclarations
	|                  ImportStatements TypeDeclarations
	| PackageStatement
	|                  ImportStatements
	|                                   TypeDeclarations
	;

PackageStatement
	::= PACKAGE QualifiedName SemiColons
	;

TypeDeclarations
	::= TypeDeclarationOptSemi
	| TypeDeclarations TypeDeclarationOptSemi
	;

TypeDeclarationOptSemi
        ::= TypeDeclaration
        | TypeDeclaration SemiColons
        ;

ImportStatements
	::= ImportStatement
	| ImportStatements ImportStatement
	;

ImportStatement
	::= IMPORT QualifiedName SemiColons
	| IMPORT QualifiedName DOT MULT SemiColons
	;

QualifiedName
	::= IDENTIFIER:lexval {: RESULT = lexval; :}
	| QualifiedName:val DOT IDENTIFIER:lexval {: RESULT = (val + "." + lexval); :}
	;

TypeDeclaration
	::= ClassHeader OPENKEYS FieldDeclarations CLOSEKEYS
	| ClassHeader OPENKEYS CLOSEKEYS
	;

ClassHeader
	::= Modifiers ClassWord IDENTIFIER Extends Interfaces
	| Modifiers ClassWord IDENTIFIER Extends
	| Modifiers ClassWord IDENTIFIER       Interfaces
	|           ClassWord IDENTIFIER Extends Interfaces
	| Modifiers ClassWord IDENTIFIER
	|           ClassWord IDENTIFIER Extends
	|           ClassWord IDENTIFIER       Interfaces
	|           ClassWord IDENTIFIER
	;

Modifiers
	::= Modifier
	| Modifiers Modifier
	;

Modifier
	::= ABSTRACT
	| FINAL
	| PUBLIC
	| PROTECTED
	| PRIVATE
	| STATIC
	| TRANSIENT
	| VOLATILE
	| NATIVE
	| SYNCHRONIZED
	;

ClassWord
	::= CLASS
	| INTERFACE
	;

Interfaces
	::= IMPLEMENTS ClassNameList
	;

FieldDeclarations
	::= FieldDeclarationOptSemi
        | FieldDeclarations FieldDeclarationOptSemi
	;

FieldDeclarationOptSemi
        ::= FieldDeclaration
        | FieldDeclaration SemiColons
        ;

FieldDeclaration
	::= FieldVariableDeclaration SEMIC
	| MethodDeclaration
	| ConstructorDeclaration
	| StaticInitializer
        | NonStaticInitializer
        | TypeDeclaration
	;

FieldVariableDeclaration
	::= Modifiers TypeSpecifier:type VariableDeclarators:var1 {: if(armazemVar.containsVariavel(var1.getNome())){
	 																	armazemCodigo.desativa();
																		System.out.println("ERRO SEMANTICO, O NOME DE VARIAVEL " + var1.getNome() + " JA ESTA SENDO USADO");
																	} else {
																		if(var1.getTipo() == null || var1.getTipo().equals(type)){
																			Variavel var = new Variavel(var1.getNome(), type);
																			armazemVar.addVariavel(var);
																			RESULT = var;
																		} else {
																		    armazemCodigo.desativa();
																			System.out.println("ERRO SEMANTICO, O TIPO DA EXPRESSAO EH DIFERENTE DO TIPO DA VARIAVEL");
																		}
																	}
																 :}
	|           TypeSpecifier:type VariableDeclarators:var1 {: if(armazemVar.containsVariavel(var1.getNome())){
	            														armazemCodigo.desativa();
																		System.out.println("ERRO SEMANTICO, O NOME DE VARIAVEL " + var1.getNome() + " JA ESTA SENDO USADO");
																	} else {
																		if(var1.getTipo() == null || var1.getTipo().equals(type)){
																			Variavel var = new Variavel(var1.getNome(), type);
																			armazemVar.addVariavel(var);
																			RESULT = var;
																		} else {
																			armazemCodigo.desativa();
																			System.out.println("ERRO SEMANTICO, O TIPO DA EXPRESSAO EH DIFERENTE DO TIPO DA VARIAVEL");
																		}
																	}
																 :}
	;

VariableDeclarators
	::= VariableDeclarator:var {: RESULT = var; :}
	| VariableDeclarators COMMA VariableDeclarator
	;

VariableDeclarator
	::= DeclaratorName:varname {: RESULT = new Variavel(varname, null);  :}
	| DeclaratorName:varname EQU VariableInitializer:tuple2 {: if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName(armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
                                                                                                                           armazemCodigo.addCode("ST " + varname + " , " + tuple2.getCode());
                                                                                                                           RESULT = new Variavel(varname, tuple2.getTypeOrName()); :} //isso eh uma gambiarra pra guardar o nome de uma variavel e o suposto tipo a ser passado pra cima
	;

VariableInitializer
	::= Expression:tuple {: RESULT = tuple; :}
	| OPENKEYS CLOSEKEYS
        | OPENKEYS ArrayInitializers CLOSEKEYS
        ;

ArrayInitializers
	::= VariableInitializer
	| ArrayInitializers COMMA VariableInitializer
	| ArrayInitializers COMMA
	;

MethodDeclaration
	::= Modifiers TypeSpecifier:rtype MethodDeclarator:novoMetodo Throws MethodBody:mtype {:  if (mtype == null) mtype = "void";
                                                                                                    if (armazemVar.containsVariavel(mtype)) {
                                                                                                        mtype = armazemVar.getVariavel(mtype).getTipo();
                                                                                                  }
                                                                                                  
                                                                                                  if (!rtype.equals(mtype)) {
                                                                                                  	   armazemCodigo.desativa();
                                                                                                       System.out.println("ERRO SEM�NTICO, O RETORNO DO METODO: " + novoMetodo.getNome() + " DEVE SER DO MESMO TIPO DA DECLARA��O" + "."); 
                                                                                                  } else {
                                                                                                       novoMetodo.setTipoRetorno(rtype);
                                                                                                  }
                                                                                              :}
	| Modifiers TypeSpecifier:rtype MethodDeclarator:novoMetodo        MethodBody:mtype {: 
                                                                                    if (mtype == null) mtype = "void";
                                                                                    
                                                                                    if (armazemVar.containsVariavel(mtype)) {
                                                                                        mtype = armazemVar.getVariavel(mtype).getTipo();
                                                                                    }

                                                                                    System.out.println("Return type: " + rtype + " Used return type:" + mtype);
                                                                                    if (!rtype.equals(mtype)) {
                                                                                    	armazemCodigo.desativa();
                                                                            			System.out.println("ERRO SEM�NTICO, O RETORNO DO METODO: " + novoMetodo.getNome() + " DEVE SER DO MESMO TIPO DA DECLARA��O" + "."); 
                                                                        			} else {
                                                                                        novoMetodo.setTipoRetorno(rtype);
                                                                                    }
                                                                     :}
	|           TypeSpecifier:rtype MethodDeclarator:novoMetodo Throws MethodBody:mtype {: if (mtype == null) mtype = "void";  
                                                                                    if (armazemVar.containsVariavel(mtype)) {
                                                                                        mtype = armazemVar.getVariavel(mtype).getTipo();
                                                                                    }
                                                                                            if (!rtype.equals(mtype)) {
                                                                            armazemCodigo.desativa();
                                                                            System.out.println("ERRO SEM�NTICO, O RETORNO DO METODO: " + novoMetodo.getNome() + " DEVE SER DO MESMO TIPO DA DECLARA��O" + "."); 
                                                                         } else {
                                                                                                       novoMetodo.setTipoRetorno(rtype);
                                                                                                  }
                                                                     :}
	|           TypeSpecifier:rtype MethodDeclarator:novoMetodo        MethodBody:mtype {:  if (mtype == null) mtype = "void";
                                                                                                if (armazemVar.containsVariavel(mtype)) {
                                                                                        mtype = armazemVar.getVariavel(mtype).getTipo();
                                                                                    }
                                                                                                 if (!rtype.equals(mtype)) {
                                                                            armazemCodigo.desativa();                     
                                                                            System.out.println("ERRO SEM�NTICO, O RETORNO DO METODO: " + novoMetodo.getNome() + " DEVE SER DO MESMO TIPO DA DECLARA��O" + "."); 
                                                                         } else {
                                                                                                       novoMetodo.setTipoRetorno(rtype);
                                                                                                  }
                                                                     :}
	;

MethodDeclarator
	::= DeclaratorName:name OPENPAR ParameterList:types CLOSEPAR {: 
                                                                        String[] paramsAndNames = types.toString().split(",");
                                                                        String[] params = new String[paramsAndNames.length];

                                                                        for (int i = 0; i < paramsAndNames.length; i++) {
                                                                            String[] paramAndName = paramsAndNames[i].split(":");
                                                                            params[i] = paramAndName[0];
                                                                            
                                                                        }
                                                                        
                                                                        if (armazemMetodos.containsMetodo(name, params)){
                                                                        	armazemCodigo.desativa();
                                                                            System.out.println("ERRO SEMANTICO, O METODO " + name + "(" + types + ") " + " JA ESTA SENDO USADO");
                                                                        } else {
                                                                            Metodo novoMetodo = new Metodo(name, params);
                                                                            armazemMetodos.addMetodo(novoMetodo);
                                                                            for (int i = 0; i < paramsAndNames.length; i++) {
                                                                                String[] paramAndName = paramsAndNames[i].split(":");
                                                                                armazemVar.addVariavel(paramAndName[1], paramAndName[0]);
                                                                            }

                                                                            armazemCodigo.addMetodo(novoMetodo.getNome());
                                                                            armazemCodigo.addCode(novoMetodo.getNome());
                                                                            
                                                                            RESULT = novoMetodo;    
                                                                        }
                                                                     :}
	| DeclaratorName:name OPENPAR CLOSEPAR {: if (armazemMetodos.containsMetodo(name)){
												armazemCodigo.desativa();
                                                System.out.println("ERRO SEMANTICO, O METODO " + name + "(" + ") " + " JA ESTA SENDO USADO");
                                             } else {
                                                Metodo novoMetodo = new Metodo(name);
                                                armazemMetodos.addMetodo(novoMetodo);
                                                
                                                armazemCodigo.addMetodo(novoMetodo.getNome());
                                                armazemCodigo.addCode(novoMetodo.getNome());

                                                RESULT = novoMetodo;    
                                             }
                                          :}
	| MethodDeclarator OP_DIM
	;

ParameterList
	::= Parameter:type {: RESULT = type; :}
	| ParameterList:type1 COMMA Parameter:type2 {: RESULT = type1 + "," + type2; :}
	;

Parameter
	::= TypeSpecifier:type DeclaratorName:name {: RESULT = type + ":" + name; :} 
        | FINAL TypeSpecifier:type DeclaratorName:name {: RESULT = type + ":" + name; :}
	;

DeclaratorName
	::= IDENTIFIER:name {: RESULT = name; :}
        | DeclaratorName:name OP_DIM {: RESULT = name; :}
        ;

Throws
	::= THROWS ClassNameList
	;

MethodBody
	::= Block:type {: RESULT = type; :}
	| SEMIC
	;

ConstructorDeclaration
	::= Modifiers ConstructorDeclarator Throws Block
	| Modifiers ConstructorDeclarator        Block
	|           ConstructorDeclarator Throws Block
	|           ConstructorDeclarator        Block
	;

ConstructorDeclarator
	::= IDENTIFIER OPENPAR ParameterList CLOSEPAR
	| IDENTIFIER OPENPAR CLOSEPAR
	;

StaticInitializer
	::= STATIC Block
	;

NonStaticInitializer
        ::= Block
        ;

Extends
	::= EXTENDS TypeName
	| Extends COMMA TypeName
	;

Block
	::= OPENKEYS LocalVariableDeclarationsAndStatements:type CLOSEKEYS {: RESULT = type; :}
	| OPENKEYS CLOSEKEYS {: RESULT = "void"; :}
        ;

LocalVariableDeclarationsAndStatements
	::= LocalVariableDeclarationOrStatement:type {: RESULT = type; :}
	| LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement:type {: RESULT = type; :}
	;

LocalVariableDeclarationOrStatement
	::= LocalVariableDeclarationStatement
	| Statement:type {: RESULT = type; :}
	;

LocalVariableDeclarationStatement
	::= TypeSpecifier:type VariableDeclarators:var1 SEMIC {: 		if(armazemVar.containsVariavel(var1.getNome())){
																		armazemCodigo.desativa();
																		System.out.println("ERRO SEMANTICO, O NOME DE VARIAVEL " + var1.getNome() + " JA ESTA SENDO USADO");
																	} else {
																		if(var1.getTipo() == null || var1.getTipo().equals(type) || !util.verificaExpressaoAritimetica(var1.getTipo(), type).equals("error")){
																			Variavel var = new Variavel(var1.getNome(), type);
																			armazemVar.addVariavel(var);
																			RESULT = var;
																		} else {
																			armazemCodigo.desativa();
																			System.out.println("ERRO SEMANTICO, O TIPO DA EXPRESSAO EH DIFERENTE DO TIPO DA VARIAVEL: " + type + " " + var1.getTipo());
																		}
																	}
																 :}
        | FINAL TypeSpecifier VariableDeclarators SEMIC
	;

Statement
	::= EmptyStatement
	| LabelStatement
	| ExpressionStatement SEMIC
        | SelectionStatement
        | IterationStatement
	| JumpStatement:type {: RESULT = type; :}
	| GuardingStatement
	| Block
	;

EmptyStatement
	::= SEMIC
        ;

LabelStatement
	::= IDENTIFIER COLON
        | CASE ConstantExpression COLON
	| DEFAULT COLON
        ;

ExpressionStatement
	::= Expression
	;

SelectionStatement
	::= IF OPENPAR Expression CLOSEPAR Statement
        | IF OPENPAR Expression CLOSEPAR Statement ELSE Statement
        | SWITCH OPENPAR Expression CLOSEPAR Block
        ;

IterationStatement
	::= WHILE OPENPAR Expression CLOSEPAR Statement
	| DO Statement WHILE OPENPAR Expression CLOSEPAR SEMIC
	| FOR OPENPAR ForInit ForExpr ForIncr CLOSEPAR Statement  {: 	
																	int label = armazemCodigo.getUltimoLabel();
																	LinkedList<String> codigos = armazemCodigo.getCodigoRelacional(label);
																	for(int i = 0; i < codigos.size() ; i++){
																		armazemCodigo.addCode(codigos.get(i));																	}																	
																
															  :}
															  
	| FOR OPENPAR ForInit ForExpr         CLOSEPAR Statement {: 	
																	int label = armazemCodigo.getUltimoLabel();
																	LinkedList<String> codigos = armazemCodigo.getCodigoRelacional(label);
																	for(int i = 0; i < codigos.size() ; i++){
																		armazemCodigo.addCode(codigos.get(i));																	}																	
																
															  :}
	;

ForInit
	::= ExpressionStatements SEMIC 
	| LocalVariableDeclarationStatement {: armazemCodigo.addCode("flag"); :}
	| SEMIC
	;

ForExpr
	::= Expression:tuple SEMIC {: if (!tuple.getTypeOrName().equals("boolean")){
									  armazemCodigo.desativa();
									  System.out.println("ERRO SEMANTICO, A EXPRESSAO DO MEIO DO FOR TEM QUE SER BOOLEAN");
									  }
							   :}
	| SEMIC
	;

ForIncr
	::= ExpressionStatements
	;

ExpressionStatements
	::= ExpressionStatement
	| ExpressionStatements COMMA ExpressionStatement
	;

JumpStatement
	::= BREAK IDENTIFIER SEMIC
	| BREAK            SEMIC
        | CONTINUE IDENTIFIER SEMIC
	| CONTINUE            SEMIC
	| RETURN Expression:tuple SEMIC {: armazemCodigo.addCode("BR *0(SP)");
                                           RESULT = tuple.getTypeOrName(); :}
	| RETURN            SEMIC {: armazemCodigo.addCode("BR *0(SP)");
                                     RESULT = "void"; :}
	| THROW Expression SEMIC
	;

GuardingStatement
	::= SYNCHRONIZED OPENPAR Expression OPENPAR Statement
	| TRY Block Finally
	| TRY Block Catches
	| TRY Block Catches Finally
	;

Catches
	::= Catch
	| Catches Catch
	;

Catch
	::= CatchHeader Block
	;

CatchHeader
	::= CATCH OPENPAR TypeSpecifier IDENTIFIER CLOSEPAR
	| CATCH OPENPAR TypeSpecifier CLOSEPAR
	;

Finally
	::= FINALLY Block
	;

PrimaryExpression
	::= QualifiedName:name {:   String temp = armazemCodigo.nextRegister();
								armazemCodigo.addCode("LD " + temp + " , " +  name);
								Tuple t = new Tuple(name, temp);
								t.setExtra(name);
								RESULT = t; :}
	| NotJustName:tuple {: RESULT = tuple; :}
	;

NotJustName
	::= SpecialName
	| NewAllocationExpression:type {: RESULT = new Tuple(type, "") ; :}
	| ComplexPrimary:tuple {: RESULT = tuple ; :}
	;

ComplexPrimary
	::= OPENPAR Expression:tuple CLOSEPAR {: RESULT = tuple ; :}
	| ComplexPrimaryNoParenthesis:tuple {: RESULT = tuple ; :}
	;

ComplexPrimaryNoParenthesis
	::= LITERAL:lexval {: if(lexval.contains("'")){
								RESULT = new Tuple("char", lexval);
							}else if(lexval.contains("\"")){
								RESULT = new Tuple("String", lexval);
							}else if(lexval.contains(".")){
								RESULT = new Tuple("double", lexval);
							} else {
								RESULT = new Tuple("int", lexval);
							}  :}
	| BOOLLIT:lexval {: RESULT = new Tuple("boolean", lexval); :}
	| ArrayAccess:type {: RESULT = new Tuple(type, "") ; :}
	| FieldAccess
	| MethodCall:type {: System.out.println("Type method call:" + type); RESULT = new Tuple(type, "5") ; :}
	;

ArrayAccess
	::= QualifiedName:type OPENBRAC Expression CLOSEBRAC {: RESULT = type ; :}
	| ComplexPrimary:tuple OPENBRAC Expression CLOSEBRAC {: RESULT = tuple.getTypeOrName() ; :}
	;

FieldAccess
	::= NotJustName DOT IDENTIFIER
	| RealPostfixExpression DOT IDENTIFIER
        | QualifiedName DOT THIS
        | QualifiedName DOT CLASS
        | PrimitiveType DOT CLASS
	;

MethodCall
	::=  DOT MethodAccess:name OPENPAR ArgumentList:names CLOSEPAR {: String[] argsName = names.split(",");
                                                                         String[] argsType = new String[argsName.length];

                                                                         for (int i = 0; i < argsName.length; i++) {
                                                                            if (armazemVar.containsVariavel(argsName[i])) {
                                                                                argsType[i] = armazemVar.getVariavel(argsName[i]).getTipo();
                                                                            } else {
                                                                                throw new RuntimeException("O argumento: |" + argsName[i] + "| n�o existe.");
                                                                            }
                                                                         }
                                                                         Metodo possivel = armazemMetodos.getMetodoPossivel(name, argsType);
                                                                         System.out.println("Metodos possiveis:" + possivel); 
                                                                         if (!armazemMetodos.containsMetodo(name, argsType) && possivel == null) {
                                                                            String strTypes = "";
                                                                            for (int i = 0; i < argsType.length - 1; i++) {
                                                                                strTypes += argsType[i] + ",";
                                                                            }
                                                                            strTypes += argsType[argsType.length - 1];
                                                                            System.out.println(armazemMetodos);
                                                                            throw new RuntimeException("O m�todo |" + name + "(" + strTypes + ")|" + " n�o existe.");
                                                                         }
                                                                         
                                                                         System.out.println("Acesso a metodo. " + Arrays.toString(argsType)); 
                                                                         Metodo m = armazemMetodos.getMetodo(name,argsType);
                                                                         if (m == null) {
                                                                            m = possivel;
                                                                         }

                                                                         armazemCodigo.addCode("ADD " + " SP" + ", SP" + ", #size");
                                                                         armazemCodigo.addCode("ST " + " *SP" + ", " + armazemCodigo.getCodeList().size() * 8);
                                                                         armazemCodigo.addCode("BR " + m.getNome());
                                                                         armazemCodigo.addCode("SUB " + " SP" + ", SP" + ", #size");
                                                                         RESULT = m.getTipoRetorno();
:}   
                                                                         
	|  DOT MethodAccess:name OPENPAR CLOSEPAR {: if (!armazemMetodos.containsMetodo(name)) {
                                                        throw new RuntimeException("O m�todo |" + name + "()|" + " n�o existe.");
                                                     }

                                                     armazemCodigo.addCode("ADD " + " SP" + ", SP" + ", #size");
                                                     armazemCodigo.addCode("ST " + " *SP" + ", " + armazemCodigo.getCodeList().size() * 8);
                                                     armazemCodigo.addCode("BR " + armazemCodigo.getMethodLine(name));
                                                     armazemCodigo.addCode("SUB " + " SP" + ", SP" + ", #size");

                                                     RESULT = armazemMetodos.getMetodo(name, new String[]{}).getTipoRetorno(); :}
	;

MethodAccess
	::= ComplexPrimaryNoParenthesis:tuple {: RESULT = tuple.getTypeOrName(); :}
	| SpecialName
	| QualifiedName:name {: RESULT = name; :}
	;


SpecialName
	::= THIS
	| SUPER
	| JNULL
	;

ArgumentList
	::= Expression:tuple {: RESULT = tuple.getTypeOrName(); :}
	| ArgumentList:type1 COMMA Expression:tuple2 {: RESULT = type1 + "," + tuple2.getTypeOrName(); :}
	;

NewAllocationExpression
        ::= PlainNewAllocationExpression:type {: RESULT = type; :}
        | QualifiedName DOT PlainNewAllocationExpression:type {: RESULT = type; :}
        ;

PlainNewAllocationExpression
    	::= ArrayAllocationExpression:type {: RESULT = type; :}
    	| ClassAllocationExpression:type {: RESULT = type; :}
    	| ArrayAllocationExpression:type OPENKEYS CLOSEKEYS {: RESULT = type; :}
    	| ClassAllocationExpression:type OPENKEYS CLOSEKEYS {: RESULT = type; :}
    	| ArrayAllocationExpression:type OPENKEYS ArrayInitializers CLOSEKEYS {: RESULT = type; :}
    	| ClassAllocationExpression:type OPENKEYS FieldDeclarations CLOSEKEYS {: RESULT = type; :}
    	;

ClassAllocationExpression
	::= NEW TypeName:type OPENPAR ArgumentList CLOSEPAR {: RESULT = type; :}
	| NEW TypeName:type OPENPAR CLOSEPAR {: RESULT = type; :}
        ;

ArrayAllocationExpression
	::= NEW TypeName:t1 DimExprs:t2 Dims:t3 {: RESULT = t1 + t2 + t3; :}
	| NEW TypeName:t1 DimExprs:t2 {: RESULT = t1 + t2; :}
        | NEW TypeName:t1 Dims:t2 {: RESULT = t1 + t2; :}
	;

DimExprs
	::= DimExpr:val {: RESULT = val ; :}
	| DimExprs:val1 DimExpr:val2 {: RESULT = val1 + val2 ; :}
	;

DimExpr
	::= OPENBRAC Expression:tuple CLOSEBRAC {: RESULT = "[" + tuple.getTypeOrName() + "]" ; :}
	;

Dims
	::= OP_DIM {: RESULT = "[]"; :}
	| Dims:val OP_DIM {: RESULT = val + "[]"; :}
	;

PostfixExpression
	::= PrimaryExpression:tuple {: RESULT = tuple; :}
	| RealPostfixExpression:tuple {: RESULT = tuple; :}
	;

RealPostfixExpression
	::= PostfixExpression:tuple OP_INC {: RESULT = tuple;
										 String temp = armazemCodigo.nextRegister();
										 armazemCodigo.addCode("LD " + temp + " , " + tuple.getCode());
										 armazemCodigo.addCode("ADD " + temp + " , " + temp + " , " + "#1"); 
										 armazemCodigo.addCode("ST " + tuple.getExtra() + " , " + temp); :}
	| PostfixExpression:tuple OP_DEC {: RESULT = tuple; 
										String temp = armazemCodigo.nextRegister();
										armazemCodigo.addCode("LD " + temp + " , " + tuple.getCode());
										armazemCodigo.addCode("SUB " + temp + " , " + temp + " , " + "#1"); 
										armazemCodigo.addCode("ST " + tuple.getExtra() + " , " + temp); :}
	;

UnaryExpression
	::= OP_INC UnaryExpression
	| OP_DEC UnaryExpression
	| ArithmeticUnaryOperator:op CastExpression:tuple {: tuple.setExtra(op); RESULT = tuple; :}
	| LogicalUnaryExpression:tuple {: RESULT = tuple; :}
	;

LogicalUnaryExpression
	::= PostfixExpression:tuple {: RESULT = tuple; :}
	| LogicalUnaryOperator UnaryExpression:tuple {: RESULT = tuple; :}
	;

LogicalUnaryOperator
	::= TIL
	| NE
	;

ArithmeticUnaryOperator
	::= PLUS {: RESULT = "ADD"; :}
	| MINUS {: RESULT = "SUB"; :}
	;

CastExpression
	::= UnaryExpression:tuple {: RESULT = tuple; :}
	| OPENPAR PrimitiveTypeExpression CLOSEPAR CastExpression
	| OPENPAR ClassTypeExpression CLOSEPAR CastExpression
	| OPENPAR Expression CLOSEPAR LogicalUnaryExpression
	;

PrimitiveTypeExpression
	::= PrimitiveType
        | PrimitiveType Dims
        ;

ClassTypeExpression
	::= QualifiedName Dims
        ;

MultiplicativeExpression
	::= CastExpression:tuple {: RESULT = tuple; :}
	| MultiplicativeExpression:tuple1 MULT CastExpression:tuple2 {: 	if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName());
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            armazemCodigo.addCode("MUL " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :} 
	| MultiplicativeExpression:tuple1 DIV CastExpression:tuple2 {: 		if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName());
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            armazemCodigo.addCode("DIV " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :} 
	| MultiplicativeExpression:tuple1 MOD CastExpression:tuple2 {: 		if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName());
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            armazemCodigo.addCode("MOD " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :} 
	;

AdditiveExpression
	::= MultiplicativeExpression:type {: RESULT = type; :}
        | AdditiveExpression:tuple1 PLUS MultiplicativeExpression:tuple2 {: if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName());
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            armazemCodigo.addCode("ADD " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :} 
                                                                        
	| AdditiveExpression:tuple1 MINUS MultiplicativeExpression:tuple2 {: if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName());
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            armazemCodigo.addCode("SUB " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :} 
        ;

ShiftExpression
	::= AdditiveExpression:tuple {: RESULT = tuple; :}
        | ShiftExpression OP_SHL AdditiveExpression
        | ShiftExpression OP_SHR AdditiveExpression
        | ShiftExpression OP_SHRR AdditiveExpression
	;

RelationalExpression
	::= ShiftExpression:tuple {: RESULT = tuple; :}
        | RelationalExpression:tuple1 LTHEN ShiftExpression:tuple2 {:  	if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = "boolean";
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            if(armazemCodigo.ehFor()){ 
                                                                            	String temp0 = armazemCodigo.nextRegister();
                                                                            	String temp1 = armazemCodigo.nextRegister();     
                                                                            	String temp2 = armazemCodigo.nextRegister();
                                                                            	
                                                                                armazemCodigo.addCode("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCode("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCode("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCode("BBTEZ " + temp2 + " , " + armazemCodigo.getUltimoLabel());
                                                                            	armazemCodigo.addCode(armazemCodigo.getPenultimoLabel() + ": ");
                                                                   	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCodigosRelacionais("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCodigosRelacionais("BLTZ " + temp2 + " , " + armazemCodigo.getPenultimoLabel());
                                                                            	armazemCodigo.addCodigosRelacionais(armazemCodigo.getUltimoLabel() + ": ");
                                                                            	
                                                                            }else{
                                                                            	armazemCodigo.addCode("LTHEN " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            }
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :}
	| RelationalExpression:tuple1 BTHEN ShiftExpression:tuple2 {:  		if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = "boolean";
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            if(armazemCodigo.ehFor()){
                                                                            	String temp0 = armazemCodigo.nextRegister();
                                                                            	String temp1 = armazemCodigo.nextRegister();     
                                                                            	String temp2 = armazemCodigo.nextRegister();
                                                                            	
                                                                                armazemCodigo.addCode("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCode("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCode("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCode("BLTZ " + temp2 + " , " + armazemCodigo.getUltimoLabel());
                                                                            	armazemCodigo.addCode(armazemCodigo.getPenultimoLabel() + ": ");
                                                                   	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCodigosRelacionais("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCodigosRelacionais("BBTZ " + temp2 + " , " + armazemCodigo.getPenultimoLabel());
                                                                            	armazemCodigo.addCodigosRelacionais(armazemCodigo.getUltimoLabel() + ": ");
                                                                            }else{                                     
                                                                           		armazemCodigo.addCode("BTHEN " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            }
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :}
	| RelationalExpression:tuple1 OP_LE ShiftExpression:tuple2 {: 		if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = "boolean";
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            if(armazemCodigo.ehFor()){
                                                                            	String temp0 = armazemCodigo.nextRegister();
                                                                            	String temp1 = armazemCodigo.nextRegister();     
                                                                            	String temp2 = armazemCodigo.nextRegister();
                                                                            	
                                                                                armazemCodigo.addCode("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCode("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCode("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCode("BBTZ " + temp2 + " , " + armazemCodigo.getUltimoLabel());
                                                                            	armazemCodigo.addCode(armazemCodigo.getPenultimoLabel() + ": ");
                                                                   	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCodigosRelacionais("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCodigosRelacionais("BLTEZ " + temp2 + " , " + armazemCodigo.getPenultimoLabel());
                                                                            	armazemCodigo.addCodigosRelacionais(armazemCodigo.getUltimoLabel() + ": ");
                                                                            }else{	
                                                                            	armazemCodigo.addCode("LE " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            }
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :}
	| RelationalExpression:tuple1 OP_GE ShiftExpression:tuple2 {:  		if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = "boolean";
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            if(armazemCodigo.ehFor()){
                                                                            	String temp0 = armazemCodigo.nextRegister();
                                                                            	String temp1 = armazemCodigo.nextRegister();     
                                                                            	String temp2 = armazemCodigo.nextRegister();
                                                                            	
                                                                                armazemCodigo.addCode("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCode("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCode("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCode("BLTZ " + temp2 + " , " + armazemCodigo.getUltimoLabel());
                                                                            	armazemCodigo.addCode(armazemCodigo.getPenultimoLabel() + ": ");
                                                                   	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCodigosRelacionais("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCodigosRelacionais("BBTEZ " + temp2 + " , " + armazemCodigo.getPenultimoLabel());
                                                                            	armazemCodigo.addCodigosRelacionais(armazemCodigo.getUltimoLabel() + ": ");
                                                                            }else{
                                                                            	armazemCodigo.addCode("BE " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            }
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :}
	| RelationalExpression INSTANCEOF TypeSpecifier
	;

EqualityExpression
	::= RelationalExpression:tuple {: RESULT = tuple; :}

        | EqualityExpression:tuple1 OP_EQ RelationalExpression:tuple2 {:  if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = "boolean";
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            if(armazemCodigo.ehFor()){
                                                                            	String temp0 = armazemCodigo.nextRegister();
                                                                            	String temp1 = armazemCodigo.nextRegister();     
                                                                            	String temp2 = armazemCodigo.nextRegister();
                                                                            	
                                                                                armazemCodigo.addCode("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCode("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCode("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCode("BDZ " + temp2 + " , " + armazemCodigo.getUltimoLabel());
                                                                            	armazemCodigo.addCode(armazemCodigo.getPenultimoLabel() + ": ");
                                                                   	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCodigosRelacionais("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCodigosRelacionais("BEZ " + temp2 + " , " + armazemCodigo.getPenultimoLabel());
                                                                            	armazemCodigo.addCodigosRelacionais(armazemCodigo.getUltimoLabel() + ": ");
                                                                            }else{
                                                                            	armazemCodigo.addCode("EQ " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            }
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :}

        | EqualityExpression:tuple1 OP_NE RelationalExpression:tuple2 {:  if(armazemVar.containsVariavel(tuple1.getTypeOrName())) tuple1.setTypeOrName( armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
        																if(armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName( armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																		if (util.verificaExpressaoAritimetica(tuple1.getTypeOrName(),tuple2.getTypeOrName()).equals("error")){
																		   armazemCodigo.desativa();
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            String type = "boolean";
                                                                            String temp = armazemCodigo.nextRegister();
                                                                            if(armazemCodigo.ehFor()){
                                                                            	String temp0 = armazemCodigo.nextRegister();
                                                                            	String temp1 = armazemCodigo.nextRegister();     
                                                                            	String temp2 = armazemCodigo.nextRegister();
                                                                            	
                                                                                armazemCodigo.addCode("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCode("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCode("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCode("BEZ " + temp2 + " , " + armazemCodigo.getUltimoLabel());
                                                                            	armazemCodigo.addCode(armazemCodigo.getPenultimoLabel() + ": ");
                                                                   	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp0 + " , " + tuple1.getExtra());                                                                     	
                                                                            	armazemCodigo.addCodigosRelacionais("LD " + temp1 + " , " + tuple2.getCode());
                                                                            	armazemCodigo.addCodigosRelacionais("SUB " + temp2 + " , " + temp0 + " , " + temp1);
                                                                            	armazemCodigo.addCodigosRelacionais("BDZ " + temp2 + " , " + armazemCodigo.getPenultimoLabel());
                                                                            	armazemCodigo.addCodigosRelacionais(armazemCodigo.getUltimoLabel() + ": ");
                                                                            }else{
                                                                            	armazemCodigo.addCode("NE " + temp + " , " + tuple1.getCode() + " , " + tuple2.getCode());
                                                                            }
                                                                            RESULT = new Tuple(type, temp);
                                                                        }
                                                                     :}
        ;

AndExpression
	::= EqualityExpression:tuple {: RESULT = tuple; :}
        | AndExpression:tuple1 AMPER EqualityExpression:tuple2 {: if(tuple1.getTypeOrName().equals(tuple2.getTypeOrName())){
										    RESULT = tuple1;} else { 
										    armazemCodigo.desativa();
										    System.out.println("ERRO SEMANTICO");
										     } :}
        ;

ExclusiveOrExpression
	::= AndExpression:tuple {: RESULT = tuple; :}
	| ExclusiveOrExpression:tuple1 XOR AndExpression:tuple2 {: if(tuple1.getTypeOrName().equals(tuple2.getTypeOrName())){
										    RESULT = tuple1;} else { 
										    armazemCodigo.desativa();
										    System.out.println("ERRO SEMANTICO");
										     }  :}
	;

InclusiveOrExpression
	::= ExclusiveOrExpression:tuple  {: RESULT = tuple; :}
	| InclusiveOrExpression:tuple1 SOR ExclusiveOrExpression:tuple2 {: if(tuple1.getTypeOrName().equals(tuple2.getTypeOrName())){
										    RESULT = tuple1;} else { 
										    armazemCodigo.desativa();
										    System.out.println("ERRO SEMANTICO");
										     }  :}
	;

ConditionalAndExpression
	::= InclusiveOrExpression:tuple {: RESULT = tuple; :}
	| ConditionalAndExpression:tuple1 OP_LAND InclusiveOrExpression:tuple2 {: if(tuple1.getTypeOrName().equals(tuple2.getTypeOrName())){
										    RESULT = tuple1;} else { 
										    armazemCodigo.desativa();
										    System.out.println("ERRO SEMANTICO");
										     } :}
	;
	

ConditionalOrExpression
	::= ConditionalAndExpression:tuple {: RESULT = tuple; :}
	| ConditionalOrExpression:tuple1 OP_LOR ConditionalAndExpression:tuple2 {: if(tuple1.getTypeOrName().equals(tuple2.getTypeOrName())){
										    RESULT = tuple1;} else { 
										    armazemCodigo.desativa();
										    System.out.println("ERRO SEMANTICO");
										     } :}
	;

ConditionalExpression
	::= ConditionalOrExpression:tuple {: RESULT = tuple; :}
	| ConditionalOrExpression QUE Expression COLON ConditionalExpression
	;

AssignmentExpression
	::= ConditionalExpression:tuple {: RESULT = tuple; :}
	| UnaryExpression:tuple1 AssignmentOperator AssignmentExpression:tuple2 {:  
                                                                                if(armazemVar.containsVariavel(tuple1.getTypeOrName())){
                                                                                	tuple1.setTypeOrName(armazemVar.getVariavel(tuple1.getTypeOrName()).getTipo());
                                                                                    if (armazemVar.containsVariavel(tuple2.getTypeOrName())) tuple2.setTypeOrName(armazemVar.getVariavel(tuple2.getTypeOrName()).getTipo());
																					
																					if(tuple1.getTypeOrName().equals(tuple2.getTypeOrName()) ||
																					 util.verificaExpressaoAritimetica(tuple1.getTypeOrName(), tuple2.getTypeOrName()).equals(tuple1.getTypeOrName())){
																						armazemCodigo.addCode("ST " + tuple1.getExtra() + " , " + tuple2.getCode());
																						RESULT = tuple1;
																					} else {
																					    armazemCodigo.desativa();
																						System.out.println("ERRO SEMANTICO NA ATRIBUICAO. OS DOIS VALORES TEM QUE SER DO MESMO TIPO: " + tuple1.getTypeOrName() + " " + tuple2.getTypeOrName());
																					}
																				} else {
																				    armazemCodigo.desativa();
																					System.out.println("ERRO SEMANTICO, VARIAVEL " + tuple1.getTypeOrName() + " NAO EXISTE. CRIE ELA ANTES DE USAR");
																				}
																																								
																				:}
	;

AssignmentOperator
	::= EQU
	| ASS_MUL
	| ASS_DIV
	| ASS_MOD
	| ASS_ADD
	| ASS_SUB
	| ASS_SHL
	| ASS_SHR
	| ASS_SHRR
	| ASS_AND
	| ASS_XOR
	| ASS_OR
	;

Expression
	::= AssignmentExpression:tuple {: RESULT = tuple; :}
        ;

ConstantExpression
	::= ConditionalExpression
	;	