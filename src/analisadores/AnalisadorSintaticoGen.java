
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analisadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import auxiliares.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class AnalisadorSintaticoGen extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public AnalisadorSintaticoGen() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public AnalisadorSintaticoGen(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalisadorSintaticoGen(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0118\000\002\002\004\000\002\074\003\000\002\074" +
    "\004\000\002\073\003\000\002\073\003\000\002\017\003" +
    "\000\002\017\005\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\060\003\000\002\060\004" +
    "\000\002\063\003\000\002\002\005\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\003\005\000\002\004" +
    "\003\000\002\004\004\000\002\005\003\000\002\005\004" +
    "\000\002\010\003\000\002\010\004\000\002\007\005\000" +
    "\002\007\007\000\002\121\003\000\002\121\005\000\002" +
    "\006\006\000\002\006\005\000\002\011\007\000\002\011" +
    "\006\000\002\011\006\000\002\011\006\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\012\003\000\002\012\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\021\003\000" +
    "\002\021\003\000\002\015\004\000\002\016\003\000\002" +
    "\016\004\000\002\020\003\000\002\020\004\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\143\005\000" +
    "\002\143\004\000\002\144\003\000\002\144\005\000\002" +
    "\145\003\000\002\145\005\000\002\141\003\000\002\141" +
    "\004\000\002\141\005\000\002\026\003\000\002\026\005" +
    "\000\002\026\004\000\002\023\007\000\002\023\006\000" +
    "\002\023\006\000\002\023\005\000\002\027\006\000\002" +
    "\027\005\000\002\027\004\000\002\032\003\000\002\032" +
    "\005\000\002\033\004\000\002\033\005\000\002\142\003" +
    "\000\002\142\004\000\002\030\004\000\002\031\003\000" +
    "\002\031\003\000\002\024\006\000\002\024\005\000\002" +
    "\024\005\000\002\024\004\000\002\035\006\000\002\035" +
    "\005\000\002\025\004\000\002\061\003\000\002\014\004" +
    "\000\002\014\005\000\002\034\005\000\002\034\004\000" +
    "\002\036\003\000\002\036\004\000\002\037\003\000\002" +
    "\037\003\000\002\062\005\000\002\062\006\000\002\040" +
    "\003\000\002\040\003\000\002\040\004\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\041\003\000\002\042\004\000\002" +
    "\042\005\000\002\042\004\000\002\051\003\000\002\043" +
    "\007\000\002\043\011\000\002\043\007\000\002\044\007" +
    "\000\002\044\011\000\002\044\011\000\002\044\010\000" +
    "\002\050\004\000\002\050\003\000\002\050\003\000\002" +
    "\064\004\000\002\064\003\000\002\065\003\000\002\066" +
    "\003\000\002\066\005\000\002\045\005\000\002\045\004" +
    "\000\002\045\005\000\002\045\004\000\002\045\005\000" +
    "\002\045\004\000\002\045\005\000\002\046\007\000\002" +
    "\046\005\000\002\046\005\000\002\046\006\000\002\052" +
    "\003\000\002\052\004\000\002\067\004\000\002\054\007" +
    "\000\002\054\006\000\002\053\004\000\002\120\003\000" +
    "\002\120\003\000\002\122\003\000\002\122\003\000\002" +
    "\122\003\000\002\133\005\000\002\133\003\000\002\134" +
    "\003\000\002\134\003\000\002\134\003\000\002\134\003" +
    "\000\002\134\003\000\002\135\006\000\002\135\006\000" +
    "\002\136\005\000\002\136\005\000\002\136\005\000\002" +
    "\136\005\000\002\136\005\000\002\137\007\000\002\137" +
    "\006\000\002\140\003\000\002\140\003\000\002\140\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\055\003\000\002\055\005\000\002\123\003\000\002" +
    "\123\005\000\002\124\003\000\002\124\003\000\002\124" +
    "\005\000\002\124\005\000\002\124\006\000\002\124\006" +
    "\000\002\126\007\000\002\126\006\000\002\125\006\000" +
    "\002\125\005\000\002\125\005\000\002\130\003\000\002" +
    "\130\004\000\002\132\005\000\002\131\003\000\002\131" +
    "\004\000\002\116\003\000\002\116\003\000\002\117\004" +
    "\000\002\117\004\000\002\115\004\000\002\115\004\000" +
    "\002\115\004\000\002\115\003\000\002\106\003\000\002" +
    "\106\004\000\002\070\003\000\002\070\003\000\002\057" +
    "\003\000\002\057\003\000\002\105\003\000\002\105\006" +
    "\000\002\105\006\000\002\105\006\000\002\107\003\000" +
    "\002\107\004\000\002\110\004\000\002\111\003\000\002" +
    "\111\005\000\002\111\005\000\002\111\005\000\002\112" +
    "\003\000\002\112\005\000\002\112\005\000\002\113\003" +
    "\000\002\113\005\000\002\113\005\000\002\113\005\000" +
    "\002\114\003\000\002\114\005\000\002\114\005\000\002" +
    "\114\005\000\002\114\005\000\002\114\005\000\002\101" +
    "\003\000\002\101\005\000\002\101\005\000\002\102\003" +
    "\000\002\102\005\000\002\103\003\000\002\103\005\000" +
    "\002\104\003\000\002\104\005\000\002\100\003\000\002" +
    "\100\005\000\002\076\003\000\002\076\005\000\002\077" +
    "\003\000\002\077\007\000\002\075\003\000\002\075\005" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\127\003" +
    "\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01c6\000\036\016\031\017\004\020\027\021\025\022" +
    "\015\023\021\024\012\025\020\026\024\027\016\030\013" +
    "\031\032\032\007\033\026\001\002\000\004\143\042\001" +
    "\002\000\060\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\143\uffd1\001\002\000" +
    "\004\143\u01c0\001\002\000\004\143\uffc5\001\002\000\004" +
    "\002\u01bf\001\002\000\032\020\027\021\025\022\015\023" +
    "\021\024\012\025\020\026\024\027\016\030\013\031\032" +
    "\032\007\033\026\001\002\000\060\004\uffcb\005\uffcb\006" +
    "\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014\uffcb" +
    "\015\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\143\uffcb\001\002\000\060\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\143\uffc7" +
    "\001\002\000\036\002\uffe9\017\004\020\027\021\025\022" +
    "\015\023\021\024\012\025\020\026\024\027\016\030\013" +
    "\031\032\032\007\033\026\001\002\000\060\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\143\uffcd\001\002\000\060\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\143\uffc8\001\002\000\036\002\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\001\002\000\060\004" +
    "\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca" +
    "\032\uffca\033\uffca\143\uffca\001\002\000\060\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\014\uffcc\015\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\143\uffcc\001\002\000\036\002\uffe3\020\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\104\044\001\002\000" +
    "\034\002\uffe7\020\027\021\025\022\015\023\021\024\012" +
    "\025\020\026\024\027\016\030\013\031\032\032\007\033" +
    "\026\001\002\000\060\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\020" +
    "\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\143\uffc9\001" +
    "\002\000\060\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\143\uffce\001\002\000" +
    "\004\143\uffc4\001\002\000\060\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015" +
    "\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\143" +
    "\uffcf\001\002\000\004\107\050\001\002\000\004\143\042" +
    "\001\002\000\060\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\020\uffc6" +
    "\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\143\uffc6\001\002" +
    "\000\036\002\uffe8\017\004\020\027\021\025\022\015\023" +
    "\021\024\012\025\020\026\024\027\016\030\013\031\032" +
    "\032\007\033\026\001\002\000\034\002\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\001\002\000\004\002" +
    "\uffee\001\002\000\036\002\uffe0\017\uffe0\020\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\001\002\000\034\002\uffea" +
    "\020\027\021\025\022\015\023\021\024\012\025\020\026" +
    "\024\027\016\030\013\031\032\032\007\033\026\001\002" +
    "\000\034\002\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\001\002\000\006\104\044\105\045\001\002\000" +
    "\142\034\uffdd\035\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071" +
    "\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd" +
    "\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\105\uffdd\106" +
    "\uffdd\107\uffdd\110\uffdd\111\uffdd\112\uffdd\113\uffdd\114\uffdd" +
    "\115\uffdd\116\uffdd\121\uffdd\122\uffdd\123\uffdd\124\uffdd\125" +
    "\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\132\uffdd\140\uffdd" +
    "\141\uffdd\142\uffdd\143\uffdd\001\002\000\040\002\uffe6\017" +
    "\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\104" +
    "\047\001\002\000\072\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\104\ufff0\107\ufff0\110\ufff0\143\ufff0\001\002\000\004" +
    "\143\046\001\002\000\142\034\uffdc\035\uffdc\057\uffdc\060" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc" +
    "\067\uffdc\070\uffdc\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075" +
    "\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\102\uffdc\103\uffdc" +
    "\104\uffdc\105\uffdc\106\uffdc\107\uffdc\110\uffdc\111\uffdc\112" +
    "\uffdc\113\uffdc\114\uffdc\115\uffdc\116\uffdc\121\uffdc\122\uffdc" +
    "\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc\131" +
    "\uffdc\132\uffdc\140\uffdc\141\uffdc\142\uffdc\143\uffdc\001\002" +
    "\000\072\002\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\104\uffef" +
    "\107\uffef\110\uffef\143\uffef\001\002\000\064\004\072\005" +
    "\054\006\077\007\053\010\061\011\102\012\101\013\057" +
    "\014\076\015\064\020\027\021\025\022\015\023\021\024" +
    "\012\025\065\026\024\027\016\030\013\031\032\032\007" +
    "\033\026\107\074\110\075\143\106\001\002\000\060\004" +
    "\072\005\054\006\077\007\053\010\061\011\102\012\101" +
    "\013\057\014\076\015\064\020\027\021\025\022\015\023" +
    "\021\024\012\025\020\026\024\027\016\030\013\031\032" +
    "\032\007\033\026\143\106\001\002\000\006\036\u0196\107" +
    "\074\001\002\000\066\034\ufff7\035\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\103\ufff7\104" +
    "\ufff7\105\ufff7\107\ufff7\110\ufff7\112\ufff7\113\ufff7\114\ufff7" +
    "\115\ufff7\116\ufff7\125\ufff7\126\ufff7\127\ufff7\130\ufff7\131" +
    "\ufff7\132\ufff7\143\ufff7\001\002\000\066\034\ufff9\035\ufff9" +
    "\061\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067" +
    "\ufff9\103\ufff9\104\ufff9\105\ufff9\107\ufff9\110\ufff9\112\ufff9" +
    "\113\ufff9\114\ufff9\115\ufff9\116\ufff9\125\ufff9\126\ufff9\127" +
    "\ufff9\130\ufff9\131\ufff9\132\ufff9\143\ufff9\001\002\000\066" +
    "\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\013\uffbd\014\uffbd\015\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\104\uffbd\107\uffbd\110\uffbd\143\uffbd" +
    "\001\002\000\064\034\ufffe\035\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\103\ufffe\104\ufffe" +
    "\107\ufffe\110\ufffe\112\ufffe\113\ufffe\114\ufffe\115\ufffe\116" +
    "\ufffe\125\ufffe\126\ufffe\127\ufffe\130\ufffe\131\ufffe\132\ufffe" +
    "\143\ufffe\001\002\000\066\034\ufff3\035\ufff3\061\ufff3\062" +
    "\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\103\ufff3" +
    "\104\ufff3\105\ufff3\107\ufff3\110\ufff3\112\ufff3\113\ufff3\114" +
    "\ufff3\115\ufff3\116\ufff3\125\ufff3\126\ufff3\127\ufff3\130\ufff3" +
    "\131\ufff3\132\ufff3\143\ufff3\001\002\000\056\035\274\061" +
    "\000\062\000\063\000\064\000\065\000\066\000\067\000" +
    "\103\000\104\000\110\000\112\000\113\000\114\000\116" +
    "\000\125\000\126\000\127\000\130\000\131\000\132\000" +
    "\143\000\001\002\000\066\034\ufff6\035\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\103\ufff6" +
    "\104\ufff6\105\ufff6\107\ufff6\110\ufff6\112\ufff6\113\ufff6\114" +
    "\ufff6\115\ufff6\116\ufff6\125\ufff6\126\ufff6\127\ufff6\130\ufff6" +
    "\131\ufff6\132\ufff6\143\ufff6\001\002\000\004\143\117\001" +
    "\002\000\004\104\u018e\001\002\000\066\034\ufff1\035\ufff1" +
    "\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067" +
    "\ufff1\103\ufff1\104\ufff1\105\ufff1\107\ufff1\110\ufff1\112\ufff1" +
    "\113\ufff1\114\ufff1\115\ufff1\116\ufff1\125\ufff1\126\ufff1\127" +
    "\ufff1\130\ufff1\131\ufff1\132\ufff1\143\ufff1\001\002\000\062" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\107\074\143\uffca\001\002\000\064" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\020\027\021\025\022\015" +
    "\023\021\024\012\025\065\026\024\027\016\030\013\031" +
    "\032\032\007\033\026\107\074\110\u018c\143\106\001\002" +
    "\000\066\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\104\uffba\107\uffba\110\uffba" +
    "\143\uffba\001\002\000\064\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\107\uffc2" +
    "\110\uffc2\143\uffc2\001\002\000\066\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\104\uffb9\107\uffb9\110\uffb9\143\uffb9\001\002\000\066\034" +
    "\ufffa\035\ufffa\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\103\ufffa\104\ufffa\105\ufffa\107\ufffa\110" +
    "\ufffa\112\ufffa\113\ufffa\114\ufffa\115\ufffa\116\ufffa\125\ufffa" +
    "\126\ufffa\127\ufffa\130\ufffa\131\ufffa\132\ufffa\143\ufffa\001" +
    "\002\000\066\034\ufffd\035\ufffd\061\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\065\ufffd\066\ufffd\067\ufffd\103\ufffd\104\ufffd\105" +
    "\045\107\ufffd\110\ufffd\112\ufffd\113\ufffd\114\ufffd\115\ufffd" +
    "\116\ufffd\125\ufffd\126\ufffd\127\ufffd\130\ufffd\131\ufffd\132" +
    "\ufffd\143\ufffd\001\002\000\126\004\072\005\054\006\077" +
    "\007\053\010\061\011\102\012\101\013\057\014\076\015" +
    "\064\021\151\031\225\040\233\041\215\042\230\043\177" +
    "\045\172\046\200\047\201\050\206\051\203\052\205\053" +
    "\242\054\214\055\165\056\217\057\155\060\126\104\176" +
    "\105\210\107\074\110\207\112\241\117\135\120\243\121" +
    "\171\122\220\133\227\134\142\137\234\143\127\144\147" +
    "\001\002\000\070\002\uffda\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\104\uffda" +
    "\107\uffda\110\uffda\143\uffda\001\002\000\066\034\ufff2\035" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\103\ufff2\104\ufff2\105\ufff2\107\ufff2\110\ufff2\112" +
    "\ufff2\113\ufff2\114\ufff2\115\ufff2\116\ufff2\125\ufff2\126\ufff2" +
    "\127\ufff2\130\ufff2\131\ufff2\132\ufff2\143\ufff2\001\002\000" +
    "\066\034\ufff8\035\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\103\ufff8\104\ufff8\105\ufff8\107" +
    "\ufff8\110\ufff8\112\ufff8\113\ufff8\114\ufff8\115\ufff8\116\ufff8" +
    "\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\132\ufff8\143" +
    "\ufff8\001\002\000\066\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\104\044\107" +
    "\uffc0\110\uffc0\143\uffc0\001\002\000\066\034\ufff4\035\ufff4" +
    "\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067" +
    "\ufff4\103\ufff4\104\ufff4\105\ufff4\107\ufff4\110\ufff4\112\ufff4" +
    "\113\ufff4\114\ufff4\115\ufff4\116\ufff4\125\ufff4\126\ufff4\127" +
    "\ufff4\130\ufff4\131\ufff4\132\ufff4\143\ufff4\001\002\000\066" +
    "\034\ufff5\035\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065" +
    "\ufff5\066\ufff5\067\ufff5\103\ufff5\104\ufff5\105\ufff5\107\ufff5" +
    "\110\ufff5\112\ufff5\113\ufff5\114\ufff5\115\ufff5\116\ufff5\125" +
    "\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5\132\ufff5\143\ufff5" +
    "\001\002\000\066\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\104\uffbb\107\uffbb" +
    "\110\uffbb\143\uffbb\001\002\000\066\004\uffbc\005\uffbc\006" +
    "\uffbc\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\104\uffbc\107\uffbc\110\uffbc\143\uffbc\001\002\000\066\004" +
    "\uff95\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\013\uff95\014\uff95\015\uff95\020\uff95\021\uff95\022\uff95\023" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95" +
    "\032\uff95\033\uff95\104\uff95\107\uff95\110\uff95\143\uff95\001" +
    "\002\000\012\035\uffdd\105\uffdd\112\107\143\uffdd\001\002" +
    "\000\034\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\021\114\113\110" +
    "\143\042\001\002\000\006\036\uff97\107\uff97\001\002\000" +
    "\006\103\uffa5\113\uffa5\001\002\000\004\143\117\001\002" +
    "\000\006\103\121\113\122\001\002\000\030\004\072\005" +
    "\054\006\077\007\053\010\061\011\102\012\101\013\057" +
    "\014\076\015\064\143\042\001\002\000\004\143\117\001" +
    "\002\000\010\035\120\103\uffa2\113\uffa2\001\002\000\016" +
    "\035\uffa1\103\uffa1\104\uffa1\111\uffa1\112\uffa1\113\uffa1\001" +
    "\002\000\016\035\uffa0\103\uffa0\104\uffa0\111\uffa0\112\uffa0" +
    "\113\uffa0\001\002\000\032\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\021\114\143\042\001\002\000\006\036\uff98\107\uff98\001" +
    "\002\000\006\103\uffa4\113\uffa4\001\002\000\010\035\120" +
    "\103\uffa3\113\uffa3\001\002\000\066\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf" +
    "\015\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\104\047\107\uffbf\110\uffbf\143\uffbf\001\002\000\064\004" +
    "\072\005\054\006\077\007\053\010\061\011\102\012\101" +
    "\013\057\014\076\015\064\053\242\054\214\055\165\056" +
    "\217\057\155\060\126\105\210\112\254\117\135\120\243" +
    "\121\171\122\220\137\234\143\042\144\147\001\002\000" +
    "\124\035\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\071\uffdd\072" +
    "\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd" +
    "\101\uffdd\102\uffdd\104\uffdd\105\uffdd\106\uffdd\111\uffdd\114" +
    "\u018a\115\uffdd\121\uffdd\122\uffdd\123\uffdd\124\uffdd\125\uffdd" +
    "\126\uffdd\127\uffdd\130\uffdd\131\uffdd\132\uffdd\140\uffdd\141" +
    "\uffdd\142\uffdd\143\uffdd\001\002\000\126\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\021\uff8d\031\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d" +
    "\104\uff8d\105\uff8d\107\uff8d\110\uff8d\112\uff8d\117\uff8d\120" +
    "\uff8d\121\uff8d\122\uff8d\133\uff8d\134\uff8d\137\uff8d\143\uff8d" +
    "\144\uff8d\001\002\000\130\004\uff89\005\uff89\006\uff89\007" +
    "\uff89\010\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89" +
    "\021\uff89\031\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\104" +
    "\uff89\105\uff89\107\uff89\110\uff89\112\uff89\117\uff89\120\uff89" +
    "\121\uff89\122\uff89\133\uff89\134\uff89\137\uff89\143\uff89\144" +
    "\uff89\001\002\000\130\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87\015\uff87\021" +
    "\uff87\031\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060\uff87\104\uff87" +
    "\105\uff87\107\uff87\110\uff87\112\uff87\117\uff87\120\uff87\121" +
    "\uff87\122\uff87\133\uff87\134\uff87\137\uff87\143\uff87\144\uff87" +
    "\001\002\000\130\057\uff2d\060\uff2d\061\uff2d\062\uff2d\063" +
    "\uff2d\064\uff2d\065\uff2d\066\uff2d\067\uff2d\070\uff2d\071\uff2d" +
    "\072\uff2d\073\uff2d\074\uff2d\075\uff2d\076\uff2d\077\uff2d\100" +
    "\uff2d\101\uff2d\102\uff2d\103\uff2d\104\uff2d\105\u0188\106\uff2d" +
    "\110\uff2d\111\uff2d\112\uff2d\113\uff2d\114\uff2d\116\uff2d\121" +
    "\uff2d\122\uff2d\123\uff2d\124\uff2d\125\uff2d\126\uff2d\127\uff2d" +
    "\130\uff2d\131\uff2d\132\uff2d\140\uff2d\141\uff2d\142\uff2d\001" +
    "\002\000\064\004\072\005\054\006\077\007\053\010\061" +
    "\011\102\012\101\013\057\014\076\015\064\053\242\054" +
    "\214\055\165\056\217\057\155\060\126\105\210\112\254" +
    "\117\135\120\243\121\171\122\220\137\234\143\042\144" +
    "\147\001\002\000\064\004\uff24\005\uff24\006\uff24\007\uff24" +
    "\010\uff24\011\uff24\012\uff24\013\uff24\014\uff24\015\uff24\053" +
    "\uff24\054\uff24\055\uff24\056\uff24\057\uff24\060\uff24\105\uff24" +
    "\112\uff24\117\uff24\120\uff24\121\uff24\122\uff24\137\uff24\143" +
    "\uff24\144\uff24\001\002\000\132\057\uff59\060\uff59\061\uff59" +
    "\062\uff59\063\uff59\064\uff59\065\uff59\066\uff59\067\uff59\070" +
    "\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59" +
    "\077\uff59\100\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105" +
    "\uff59\106\uff59\110\uff59\111\uff59\112\uff59\113\uff59\114\uff59" +
    "\115\u0184\116\uff59\121\uff59\122\uff59\123\uff59\124\uff59\125" +
    "\uff59\126\uff59\127\uff59\130\uff59\131\uff59\132\uff59\140\uff59" +
    "\141\uff59\142\uff59\001\002\000\130\004\uff84\005\uff84\006" +
    "\uff84\007\uff84\010\uff84\011\uff84\012\uff84\013\uff84\014\uff84" +
    "\015\uff84\021\uff84\031\uff84\040\uff84\041\uff84\042\uff84\043" +
    "\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84" +
    "\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060" +
    "\uff84\104\uff84\105\uff84\107\uff84\110\uff84\112\uff84\117\uff84" +
    "\120\uff84\121\uff84\122\uff84\133\uff84\134\uff84\137\uff84\143" +
    "\uff84\144\uff84\001\002\000\010\035\ufffe\105\267\143\ufffe" +
    "\001\002\000\064\061\uff12\062\uff12\063\uff12\064\uff12\065" +
    "\uff12\066\uff12\067\uff12\103\uff12\104\uff12\110\uff12\112\uff12" +
    "\113\uff12\114\uff12\116\uff12\121\u0108\122\u0109\125\uff12\126" +
    "\uff12\127\uff12\130\uff12\131\uff12\132\uff12\140\uff12\141\uff12" +
    "\142\uff12\001\002\000\064\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\105" +
    "\210\112\241\117\135\120\243\121\171\122\220\137\234" +
    "\143\042\144\147\001\002\000\132\057\uff57\060\uff57\061" +
    "\uff57\062\uff57\063\uff57\064\uff57\065\uff57\066\uff57\067\uff57" +
    "\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57\075\uff57\076" +
    "\uff57\077\uff57\100\uff57\101\uff57\102\uff57\103\uff57\104\uff57" +
    "\105\uff57\106\uff57\110\uff57\111\uff57\112\uff57\113\uff57\114" +
    "\uff57\115\uff57\116\uff57\121\uff57\122\uff57\123\uff57\124\uff57" +
    "\125\uff57\126\uff57\127\uff57\130\uff57\131\uff57\132\uff57\140" +
    "\uff57\141\uff57\142\uff57\001\002\000\126\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\021\uff90\031\uff90\040\uff90\041\uff90\042\uff90" +
    "\043\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052" +
    "\uff90\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90" +
    "\104\uff90\105\uff90\107\uff90\110\uff90\112\uff90\117\uff90\120" +
    "\uff90\121\uff90\122\uff90\133\uff90\134\uff90\137\uff90\143\uff90" +
    "\144\uff90\001\002\000\030\066\ufeff\067\ufeff\103\ufeff\104" +
    "\ufeff\110\ufeff\112\ufeff\113\ufeff\114\ufeff\116\ufeff\130\365" +
    "\132\ufeff\001\002\000\130\004\uff83\005\uff83\006\uff83\007" +
    "\uff83\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\015\uff83" +
    "\021\uff83\031\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83" +
    "\053\uff83\054\uff83\055\uff83\056\uff83\057\uff83\060\uff83\104" +
    "\uff83\105\uff83\107\uff83\110\uff83\112\uff83\117\uff83\120\uff83" +
    "\121\uff83\122\uff83\133\uff83\134\uff83\137\uff83\143\uff83\144" +
    "\uff83\001\002\000\132\057\uff56\060\uff56\061\uff56\062\uff56" +
    "\063\uff56\064\uff56\065\uff56\066\uff56\067\uff56\070\uff56\071" +
    "\uff56\072\uff56\073\uff56\074\uff56\075\uff56\076\uff56\077\uff56" +
    "\100\uff56\101\uff56\102\uff56\103\uff56\104\uff56\105\uff56\106" +
    "\uff56\110\uff56\111\uff56\112\uff56\113\uff56\114\uff56\115\uff56" +
    "\116\uff56\121\uff56\122\uff56\123\uff56\124\uff56\125\uff56\126" +
    "\uff56\127\uff56\130\uff56\131\uff56\132\uff56\140\uff56\141\uff56" +
    "\142\uff56\001\002\000\020\103\ufeeb\104\ufeeb\110\ufeeb\112" +
    "\ufeeb\113\ufeeb\114\ufeeb\116\ufeeb\001\002\000\030\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\143\042\001\002\000\052\061\376" +
    "\062\u0100\063\u0101\064\uff08\065\uff08\066\uff08\067\uff08\103" +
    "\uff08\104\uff08\110\uff08\112\uff08\113\uff08\114\uff08\116\uff08" +
    "\125\377\126\u0102\127\uff08\130\uff08\131\uff08\132\uff08\001" +
    "\002\000\130\057\uff5b\060\uff5b\061\uff5b\062\uff5b\063\uff5b" +
    "\064\uff5b\065\uff5b\066\uff5b\067\uff5b\070\uff5b\071\uff5b\072" +
    "\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b\077\uff5b\100\uff5b" +
    "\101\uff5b\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\110" +
    "\uff5b\111\uff5b\112\uff5b\113\uff5b\114\uff5b\116\uff5b\121\uff5b" +
    "\122\uff5b\123\uff5b\124\uff5b\125\uff5b\126\uff5b\127\uff5b\130" +
    "\uff5b\131\uff5b\132\uff5b\140\uff5b\141\uff5b\142\uff5b\001\002" +
    "\000\072\061\uff15\062\uff15\063\uff15\064\uff15\065\uff15\066" +
    "\uff15\067\uff15\103\uff15\104\uff15\106\u010c\110\uff15\112\uff15" +
    "\113\uff15\114\uff15\116\uff15\121\uff15\122\uff15\123\u010d\124" +
    "\u010b\125\uff15\126\uff15\127\uff15\130\uff15\131\uff15\132\uff15" +
    "\140\uff15\141\uff15\142\uff15\001\002\000\064\004\072\005" +
    "\054\006\077\007\053\010\061\011\102\012\101\013\057" +
    "\014\076\015\064\053\242\054\214\055\165\056\217\057" +
    "\155\060\126\105\210\112\254\117\135\120\243\121\171" +
    "\122\220\137\234\143\042\144\147\001\002\000\032\066" +
    "\uff01\067\uff01\103\uff01\104\uff01\110\uff01\112\uff01\113\uff01" +
    "\114\uff01\116\uff01\127\367\130\uff01\132\uff01\001\002\000" +
    "\064\004\072\005\054\006\077\007\053\010\061\011\102" +
    "\012\101\013\057\014\076\015\064\053\242\054\214\055" +
    "\165\056\217\057\155\060\126\105\210\112\241\117\135" +
    "\120\243\121\171\122\220\137\234\143\042\144\147\001" +
    "\002\000\130\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\021\uff86\031" +
    "\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054" +
    "\uff86\055\uff86\056\uff86\057\uff86\060\uff86\104\uff86\105\uff86" +
    "\107\uff86\110\uff86\112\uff86\117\uff86\120\uff86\121\uff86\122" +
    "\uff86\133\uff86\134\uff86\137\uff86\143\uff86\144\uff86\001\002" +
    "\000\130\057\uff5c\060\uff5c\061\uff5c\062\uff5c\063\uff5c\064" +
    "\uff5c\065\uff5c\066\uff5c\067\uff5c\070\uff5c\071\uff5c\072\uff5c" +
    "\073\uff5c\074\uff5c\075\uff5c\076\uff5c\077\uff5c\100\uff5c\101" +
    "\uff5c\102\uff5c\103\uff5c\104\uff5c\105\u017b\106\uff5c\110\uff5c" +
    "\111\uff5c\112\uff5c\113\uff5c\114\uff5c\116\uff5c\121\uff5c\122" +
    "\uff5c\123\uff5c\124\uff5c\125\uff5c\126\uff5c\127\uff5c\130\uff5c" +
    "\131\uff5c\132\uff5c\140\uff5c\141\uff5c\142\uff5c\001\002\000" +
    "\122\061\uff27\062\uff27\063\uff27\064\uff27\065\uff27\066\uff27" +
    "\067\uff27\070\uff27\071\uff27\072\uff27\073\uff27\074\uff27\075" +
    "\uff27\076\uff27\077\uff27\100\uff27\101\uff27\102\uff27\103\uff27" +
    "\104\uff27\106\uff27\110\uff27\111\uff27\112\uff27\113\uff27\114" +
    "\uff27\116\uff27\121\uff27\122\uff27\123\uff27\124\uff27\125\uff27" +
    "\126\uff27\127\uff27\130\uff27\131\uff27\132\uff27\140\uff27\141" +
    "\uff27\142\uff27\001\002\000\132\057\uff3d\060\uff3d\061\uff3d" +
    "\062\uff3d\063\uff3d\064\uff3d\065\uff3d\066\uff3d\067\uff3d\070" +
    "\uff3d\071\uff3d\072\uff3d\073\uff3d\074\uff3d\075\uff3d\076\uff3d" +
    "\077\uff3d\100\uff3d\101\uff3d\102\uff3d\103\uff3d\104\uff3d\105" +
    "\uff3d\106\uff3d\107\u0176\110\uff3d\111\uff3d\112\uff3d\113\uff3d" +
    "\114\uff3d\116\uff3d\121\uff3d\122\uff3d\123\uff3d\124\uff3d\125" +
    "\uff3d\126\uff3d\127\uff3d\130\uff3d\131\uff3d\132\uff3d\140\uff3d" +
    "\141\uff3d\142\uff3d\001\002\000\130\004\uff8a\005\uff8a\006" +
    "\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a" +
    "\015\uff8a\021\uff8a\031\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\104\uff8a\105\uff8a\107\uff8a\110\uff8a\112\uff8a\117\uff8a" +
    "\120\uff8a\121\uff8a\122\uff8a\133\uff8a\134\uff8a\137\uff8a\143" +
    "\uff8a\144\uff8a\001\002\000\130\057\uff44\060\uff44\061\uff44" +
    "\062\uff44\063\uff44\064\uff44\065\uff44\066\uff44\067\uff44\070" +
    "\uff44\071\uff44\072\uff44\073\uff44\074\uff44\075\uff44\076\uff44" +
    "\077\uff44\100\uff44\101\uff44\102\uff44\103\uff44\104\uff44\105" +
    "\uff44\106\uff44\110\uff44\111\uff44\112\uff44\113\uff44\114\uff44" +
    "\116\uff44\121\uff44\122\uff44\123\uff44\124\uff44\125\uff44\126" +
    "\uff44\127\uff44\130\uff44\131\uff44\132\uff44\140\uff44\141\uff44" +
    "\142\uff44\001\002\000\132\057\uff3e\060\uff3e\061\uff3e\062" +
    "\uff3e\063\uff3e\064\uff3e\065\uff3e\066\uff3e\067\uff3e\070\uff3e" +
    "\071\uff3e\072\uff3e\073\uff3e\074\uff3e\075\uff3e\076\uff3e\077" +
    "\uff3e\100\uff3e\101\uff3e\102\uff3e\103\uff3e\104\uff3e\105\uff3e" +
    "\106\uff3e\107\u0172\110\uff3e\111\uff3e\112\uff3e\113\uff3e\114" +
    "\uff3e\116\uff3e\121\uff3e\122\uff3e\123\uff3e\124\uff3e\125\uff3e" +
    "\126\uff3e\127\uff3e\130\uff3e\131\uff3e\132\uff3e\140\uff3e\141" +
    "\uff3e\142\uff3e\001\002\000\072\061\uff19\062\uff19\063\uff19" +
    "\064\uff19\065\uff19\066\uff19\067\uff19\103\uff19\104\uff19\106" +
    "\uff19\110\uff19\112\uff19\113\uff19\114\uff19\116\uff19\121\uff19" +
    "\122\uff19\123\uff19\124\uff19\125\uff19\126\uff19\127\uff19\130" +
    "\uff19\131\uff19\132\uff19\140\uff19\141\uff19\142\uff19\001\002" +
    "\000\060\061\uff0e\062\uff0e\063\uff0e\064\uff0e\065\uff0e\066" +
    "\uff0e\067\uff0e\103\uff0e\104\uff0e\110\uff0e\112\uff0e\113\uff0e" +
    "\114\uff0e\116\uff0e\125\uff0e\126\uff0e\127\uff0e\130\uff0e\131" +
    "\uff0e\132\uff0e\140\u0106\141\u0104\142\u0105\001\002\000\064" +
    "\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22\011\uff22\012" +
    "\uff22\013\uff22\014\uff22\015\uff22\053\uff22\054\uff22\055\uff22" +
    "\056\uff22\057\uff22\060\uff22\105\uff22\112\uff22\117\uff22\120" +
    "\uff22\121\uff22\122\uff22\137\uff22\143\uff22\144\uff22\001\002" +
    "\000\004\112\u016e\001\002\000\034\066\uff03\067\uff03\103" +
    "\uff03\104\uff03\110\uff03\112\uff03\113\uff03\114\uff03\116\uff03" +
    "\127\uff03\130\uff03\131\371\132\uff03\001\002\000\126\004" +
    "\072\005\054\006\077\007\053\010\061\011\102\012\101" +
    "\013\057\014\076\015\064\021\151\031\225\040\233\041" +
    "\215\042\230\043\177\045\172\046\200\047\201\050\206" +
    "\051\203\052\205\053\242\054\214\055\165\056\217\057" +
    "\155\060\126\104\176\105\210\107\074\110\u016d\112\241" +
    "\117\135\120\243\121\171\122\220\133\227\134\142\137" +
    "\234\143\127\144\147\001\002\000\024\067\u0167\103\ufefb" +
    "\104\ufefb\110\ufefb\112\ufefb\113\ufefb\114\ufefb\116\ufefb\132" +
    "\u0166\001\002\000\130\004\uff82\005\uff82\006\uff82\007\uff82" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015\uff82\021" +
    "\uff82\031\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82" +
    "\045\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053" +
    "\uff82\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\104\uff82" +
    "\105\uff82\107\uff82\110\uff82\112\uff82\117\uff82\120\uff82\121" +
    "\uff82\122\uff82\133\uff82\134\uff82\137\uff82\143\uff82\144\uff82" +
    "\001\002\000\004\112\u0162\001\002\000\122\004\072\005" +
    "\054\006\077\007\053\010\061\011\102\012\101\013\057" +
    "\014\076\015\064\031\225\040\233\041\215\042\230\043" +
    "\177\045\172\046\200\047\201\050\206\051\203\052\205" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\104" +
    "\176\105\210\107\074\112\241\117\135\120\243\121\171" +
    "\122\220\133\227\134\142\137\234\143\127\144\147\001" +
    "\002\000\004\112\u0149\001\002\000\004\143\117\001\002" +
    "\000\066\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\104\u0136\105\210\112" +
    "\241\117\135\120\243\121\171\122\220\137\234\143\042" +
    "\144\147\001\002\000\020\103\ufef9\104\ufef9\110\ufef9\112" +
    "\ufef9\113\ufef9\114\ufef9\116\ufef9\001\002\000\004\107\074" +
    "\001\002\000\006\104\u0124\143\u0123\001\002\000\160\004" +
    "\uff91\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\013\uff91\014\uff91\015\uff91\020\uff91\021\uff91\022\uff91\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91" +
    "\032\uff91\033\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044" +
    "\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\104" +
    "\uff91\105\uff91\107\uff91\110\uff91\112\uff91\117\uff91\120\uff91" +
    "\121\uff91\122\uff91\133\uff91\134\uff91\135\uff91\136\uff91\137" +
    "\uff91\143\uff91\144\uff91\001\002\000\050\004\072\005\054" +
    "\006\077\007\053\010\061\011\102\012\101\013\057\014" +
    "\076\015\064\053\242\054\214\055\165\056\217\105\210" +
    "\112\254\137\234\143\042\144\147\001\002\000\126\004" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\021\uff8e\031\uff8e\040\uff8e\041" +
    "\uff8e\042\uff8e\043\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\057" +
    "\uff8e\060\uff8e\104\uff8e\105\uff8e\107\uff8e\110\uff8e\112\uff8e" +
    "\117\uff8e\120\uff8e\121\uff8e\122\uff8e\133\uff8e\134\uff8e\137" +
    "\uff8e\143\uff8e\144\uff8e\001\002\000\124\035\ufffd\057\uff5d" +
    "\060\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d\066" +
    "\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d\073\uff5d\074\uff5d" +
    "\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d\102\uff5d\103" +
    "\uff5d\104\uff5d\105\257\106\uff5d\111\uff5d\115\256\121\uff5d" +
    "\122\uff5d\123\uff5d\124\uff5d\125\uff5d\126\uff5d\127\uff5d\130" +
    "\uff5d\131\uff5d\132\uff5d\140\uff5d\141\uff5d\142\uff5d\143\ufffd" +
    "\001\002\000\040\064\374\065\373\066\uff05\067\uff05\103" +
    "\uff05\104\uff05\110\uff05\112\uff05\113\uff05\114\uff05\116\uff05" +
    "\127\uff05\130\uff05\131\uff05\132\uff05\001\002\000\130\057" +
    "\uff45\060\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45" +
    "\066\uff45\067\uff45\070\uff45\071\uff45\072\uff45\073\uff45\074" +
    "\uff45\075\uff45\076\uff45\077\uff45\100\uff45\101\uff45\102\uff45" +
    "\103\uff45\104\uff45\105\uff45\106\uff45\110\uff45\111\uff45\112" +
    "\uff45\113\uff45\114\uff45\116\uff45\121\uff45\122\uff45\123\uff45" +
    "\124\uff45\125\uff45\126\uff45\127\uff45\130\uff45\131\uff45\132" +
    "\uff45\140\uff45\141\uff45\142\uff45\001\002\000\004\114\u0119" +
    "\001\002\000\026\066\363\067\ufefd\103\ufefd\104\ufefd\110" +
    "\ufefd\112\ufefd\113\ufefd\114\ufefd\116\ufefd\132\ufefd\001\002" +
    "\000\130\057\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064" +
    "\uff43\065\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43" +
    "\073\uff43\074\uff43\075\uff43\076\uff43\077\uff43\100\uff43\101" +
    "\uff43\102\uff43\103\uff43\104\uff43\105\uff43\106\uff43\110\uff43" +
    "\111\uff43\112\uff43\113\uff43\114\uff43\116\uff43\121\uff43\122" +
    "\uff43\123\uff43\124\uff43\125\uff43\126\uff43\127\uff43\130\uff43" +
    "\131\uff43\132\uff43\140\uff43\141\uff43\142\uff43\001\002\000" +
    "\064\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\011\uff21" +
    "\012\uff21\013\uff21\014\uff21\015\uff21\053\uff21\054\uff21\055" +
    "\uff21\056\uff21\057\uff21\060\uff21\105\uff21\112\uff21\117\uff21" +
    "\120\uff21\121\uff21\122\uff21\137\uff21\143\uff21\144\uff21\001" +
    "\002\000\132\057\uff52\060\uff52\061\uff52\062\uff52\063\uff52" +
    "\064\uff52\065\uff52\066\uff52\067\uff52\070\uff52\071\uff52\072" +
    "\uff52\073\uff52\074\uff52\075\uff52\076\uff52\077\uff52\100\uff52" +
    "\101\uff52\102\uff52\103\uff52\104\uff52\105\uff52\106\uff52\110" +
    "\uff52\111\uff52\112\uff52\113\uff52\114\uff52\115\uff52\116\uff52" +
    "\121\uff52\122\uff52\123\uff52\124\uff52\125\uff52\126\uff52\127" +
    "\uff52\130\uff52\131\uff52\132\uff52\140\uff52\141\uff52\142\uff52" +
    "\001\002\000\130\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063" +
    "\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a\070\uff5a\071\uff5a" +
    "\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\100" +
    "\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a" +
    "\110\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\116\uff5a\121" +
    "\uff5a\122\uff5a\123\uff5a\124\uff5a\125\uff5a\126\uff5a\127\uff5a" +
    "\130\uff5a\131\uff5a\132\uff5a\140\uff5a\141\uff5a\142\uff5a\001" +
    "\002\000\132\057\uff53\060\uff53\061\uff53\062\uff53\063\uff53" +
    "\064\uff53\065\uff53\066\uff53\067\uff53\070\uff53\071\uff53\072" +
    "\uff53\073\uff53\074\uff53\075\uff53\076\uff53\077\uff53\100\uff53" +
    "\101\uff53\102\uff53\103\uff53\104\uff53\105\uff53\106\uff53\110" +
    "\uff53\111\uff53\112\uff53\113\uff53\114\uff53\115\uff53\116\uff53" +
    "\121\uff53\122\uff53\123\uff53\124\uff53\125\uff53\126\uff53\127" +
    "\uff53\130\uff53\131\uff53\132\uff53\140\uff53\141\uff53\142\uff53" +
    "\001\002\000\132\057\uff54\060\uff54\061\uff54\062\uff54\063" +
    "\uff54\064\uff54\065\uff54\066\uff54\067\uff54\070\uff54\071\uff54" +
    "\072\uff54\073\uff54\074\uff54\075\uff54\076\uff54\077\uff54\100" +
    "\uff54\101\uff54\102\uff54\103\uff54\104\uff54\105\uff54\106\uff54" +
    "\110\uff54\111\uff54\112\uff54\113\uff54\114\uff54\115\uff54\116" +
    "\uff54\121\uff54\122\uff54\123\uff54\124\uff54\125\uff54\126\uff54" +
    "\127\uff54\130\uff54\131\uff54\132\uff54\140\uff54\141\uff54\142" +
    "\uff54\001\002\000\004\112\357\001\002\000\126\057\355" +
    "\060\356\061\uff26\062\uff26\063\uff26\064\uff26\065\uff26\066" +
    "\uff26\067\uff26\070\uff26\071\uff26\072\uff26\073\uff26\074\uff26" +
    "\075\uff26\076\uff26\077\uff26\100\uff26\101\uff26\102\uff26\103" +
    "\uff26\104\uff26\106\uff26\110\uff26\111\uff26\112\uff26\113\uff26" +
    "\114\uff26\116\uff26\121\uff26\122\uff26\123\uff26\124\uff26\125" +
    "\uff26\126\uff26\127\uff26\130\uff26\131\uff26\132\uff26\140\uff26" +
    "\141\uff26\142\uff26\001\002\000\006\104\353\143\352\001" +
    "\002\000\004\112\344\001\002\000\010\103\uff7e\104\uff7e" +
    "\113\uff7e\001\002\000\130\004\uff85\005\uff85\006\uff85\007" +
    "\uff85\010\uff85\011\uff85\012\uff85\013\uff85\014\uff85\015\uff85" +
    "\021\uff85\031\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044" +
    "\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85" +
    "\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\104" +
    "\uff85\105\uff85\107\uff85\110\uff85\112\uff85\117\uff85\120\uff85" +
    "\121\uff85\122\uff85\133\uff85\134\uff85\137\uff85\143\uff85\144" +
    "\uff85\001\002\000\064\004\072\005\054\006\077\007\053" +
    "\010\061\011\102\012\101\013\057\014\076\015\064\053" +
    "\242\054\214\055\165\056\217\057\155\060\126\105\210" +
    "\112\241\117\135\120\243\121\171\122\220\137\234\143" +
    "\042\144\147\001\002\000\030\004\072\005\054\006\077" +
    "\007\053\010\061\011\102\012\101\013\057\014\076\015" +
    "\064\143\042\001\002\000\130\057\uff40\060\uff40\061\uff40" +
    "\062\uff40\063\uff40\064\uff40\065\uff40\066\uff40\067\uff40\070" +
    "\uff40\071\uff40\072\uff40\073\uff40\074\uff40\075\uff40\076\uff40" +
    "\077\uff40\100\uff40\101\uff40\102\uff40\103\uff40\104\uff40\105" +
    "\uff40\106\uff40\110\uff40\111\uff40\112\uff40\113\uff40\114\uff40" +
    "\116\uff40\121\uff40\122\uff40\123\uff40\124\uff40\125\uff40\126" +
    "\uff40\127\uff40\130\uff40\131\uff40\132\uff40\140\uff40\141\uff40" +
    "\142\uff40\001\002\000\004\104\320\001\002\000\126\057" +
    "\uff2e\060\uff2e\061\uff2e\062\uff2e\063\uff2e\064\uff2e\065\uff2e" +
    "\066\uff2e\067\uff2e\070\uff2e\071\uff2e\072\uff2e\073\uff2e\074" +
    "\uff2e\075\uff2e\076\uff2e\077\uff2e\100\uff2e\101\uff2e\102\uff2e" +
    "\103\uff2e\104\uff2e\106\uff2e\110\uff2e\111\uff2e\112\uff2e\113" +
    "\uff2e\114\uff2e\116\uff2e\121\uff2e\122\uff2e\123\uff2e\124\uff2e" +
    "\125\uff2e\126\uff2e\127\uff2e\130\uff2e\131\uff2e\132\uff2e\140" +
    "\uff2e\141\uff2e\142\uff2e\001\002\000\122\061\uff20\062\uff20" +
    "\063\uff20\064\uff20\065\uff20\066\uff20\067\uff20\070\314\071" +
    "\310\072\302\073\306\074\307\075\312\076\304\077\311" +
    "\100\315\101\316\102\313\103\uff20\104\uff20\106\uff20\110" +
    "\uff20\111\303\112\uff20\113\uff20\114\uff20\116\uff20\121\uff20" +
    "\122\uff20\123\uff20\124\uff20\125\uff20\126\uff20\127\uff20\130" +
    "\uff20\131\uff20\132\uff20\140\uff20\141\uff20\142\uff20\001\002" +
    "\000\064\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\105\210\112\241\117" +
    "\135\120\243\121\171\122\220\137\234\143\042\144\147" +
    "\001\002\000\132\057\uff55\060\uff55\061\uff55\062\uff55\063" +
    "\uff55\064\uff55\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55" +
    "\072\uff55\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55\100" +
    "\uff55\101\uff55\102\uff55\103\uff55\104\uff55\105\uff55\106\uff55" +
    "\110\uff55\111\uff55\112\uff55\113\uff55\114\uff55\115\uff55\116" +
    "\uff55\121\uff55\122\uff55\123\uff55\124\uff55\125\uff55\126\uff55" +
    "\127\uff55\130\uff55\131\uff55\132\uff55\140\uff55\141\uff55\142" +
    "\uff55\001\002\000\064\004\uff23\005\uff23\006\uff23\007\uff23" +
    "\010\uff23\011\uff23\012\uff23\013\uff23\014\uff23\015\uff23\053" +
    "\uff23\054\uff23\055\uff23\056\uff23\057\uff23\060\uff23\105\uff23" +
    "\112\uff23\117\uff23\120\uff23\121\uff23\122\uff23\137\uff23\143" +
    "\uff23\144\uff23\001\002\000\010\035\274\105\267\113\uff1c" +
    "\001\002\000\004\113\277\001\002\000\120\035\274\057" +
    "\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d" +
    "\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d\073\uff5d\074" +
    "\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d\102\uff5d" +
    "\105\257\106\uff5d\111\uff5d\113\uff5d\115\256\121\uff5d\122" +
    "\uff5d\123\uff5d\124\uff5d\125\uff5d\126\uff5d\127\uff5d\130\uff5d" +
    "\131\uff5d\132\uff5d\140\uff5d\141\uff5d\142\uff5d\001\002\000" +
    "\004\113\271\001\002\000\004\113\251\001\002\000\200" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\053\242\054\214\055\165" +
    "\056\217\057\uff58\060\uff58\061\uff58\062\uff58\063\uff58\064" +
    "\uff58\065\uff58\066\uff58\067\uff58\070\uff58\071\uff58\072\uff58" +
    "\073\uff58\074\uff58\075\uff58\076\uff58\077\uff58\100\uff58\101" +
    "\uff58\102\uff58\103\uff58\104\uff58\105\210\106\uff58\110\uff58" +
    "\111\uff58\112\254\113\uff58\114\uff58\115\uff58\116\uff58\117" +
    "\135\120\243\121\uff58\122\uff58\123\uff58\124\uff58\125\uff58" +
    "\126\uff58\127\uff58\130\uff58\131\uff58\132\uff58\137\234\140" +
    "\uff58\141\uff58\142\uff58\143\042\144\147\001\002\000\122" +
    "\061\uff1d\062\uff1d\063\uff1d\064\uff1d\065\uff1d\066\uff1d\067" +
    "\uff1d\070\uff1d\071\uff1d\072\uff1d\073\uff1d\074\uff1d\075\uff1d" +
    "\076\uff1d\077\uff1d\100\uff1d\101\uff1d\102\uff1d\103\uff1d\104" +
    "\uff1d\106\uff1d\110\uff1d\111\uff1d\112\uff1d\113\uff1d\114\uff1d" +
    "\116\uff1d\121\uff1d\122\uff1d\123\uff1d\124\uff1d\125\uff1d\126" +
    "\uff1d\127\uff1d\130\uff1d\131\uff1d\132\uff1d\140\uff1d\141\uff1d" +
    "\142\uff1d\001\002\000\004\105\267\001\002\000\064\004" +
    "\072\005\054\006\077\007\053\010\061\011\102\012\101" +
    "\013\057\014\076\015\064\053\242\054\214\055\165\056" +
    "\217\057\155\060\126\105\210\112\241\117\135\120\243" +
    "\121\171\122\220\137\234\143\042\144\147\001\002\000" +
    "\132\057\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d\064\uff5d" +
    "\065\uff5d\066\uff5d\067\uff5d\070\uff5d\071\uff5d\072\uff5d\073" +
    "\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\100\uff5d\101\uff5d" +
    "\102\uff5d\103\uff5d\104\uff5d\105\257\106\uff5d\110\uff5d\111" +
    "\uff5d\112\uff5d\113\uff5d\114\uff5d\115\256\116\uff5d\121\uff5d" +
    "\122\uff5d\123\uff5d\124\uff5d\125\uff5d\126\uff5d\127\uff5d\130" +
    "\uff5d\131\uff5d\132\uff5d\140\uff5d\141\uff5d\142\uff5d\001\002" +
    "\000\064\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\105\210\112\241\117" +
    "\135\120\243\121\171\122\220\137\234\143\042\144\147" +
    "\001\002\000\012\032\262\054\261\137\234\143\046\001" +
    "\002\000\130\057\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f" +
    "\064\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072" +
    "\uff3f\073\uff3f\074\uff3f\075\uff3f\076\uff3f\077\uff3f\100\uff3f" +
    "\101\uff3f\102\uff3f\103\uff3f\104\uff3f\105\uff3f\106\uff3f\110" +
    "\uff3f\111\uff3f\112\uff3f\113\uff3f\114\uff3f\116\uff3f\121\uff3f" +
    "\122\uff3f\123\uff3f\124\uff3f\125\uff3f\126\uff3f\127\uff3f\130" +
    "\uff3f\131\uff3f\132\uff3f\140\uff3f\141\uff3f\142\uff3f\001\002" +
    "\000\132\057\uff4d\060\uff4d\061\uff4d\062\uff4d\063\uff4d\064" +
    "\uff4d\065\uff4d\066\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d" +
    "\073\uff4d\074\uff4d\075\uff4d\076\uff4d\077\uff4d\100\uff4d\101" +
    "\uff4d\102\uff4d\103\uff4d\104\uff4d\105\uff4d\106\uff4d\110\uff4d" +
    "\111\uff4d\112\uff4d\113\uff4d\114\uff4d\115\uff4d\116\uff4d\121" +
    "\uff4d\122\uff4d\123\uff4d\124\uff4d\125\uff4d\126\uff4d\127\uff4d" +
    "\130\uff4d\131\uff4d\132\uff4d\140\uff4d\141\uff4d\142\uff4d\001" +
    "\002\000\132\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c" +
    "\064\uff4c\065\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072" +
    "\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c\077\uff4c\100\uff4c" +
    "\101\uff4c\102\uff4c\103\uff4c\104\uff4c\105\uff4c\106\uff4c\110" +
    "\uff4c\111\uff4c\112\uff4c\113\uff4c\114\uff4c\115\uff4c\116\uff4c" +
    "\121\uff4c\122\uff4c\123\uff4c\124\uff4c\125\uff4c\126\uff4c\127" +
    "\uff4c\130\uff4c\131\uff4c\132\uff4c\140\uff4c\141\uff4c\142\uff4c" +
    "\001\002\000\004\116\264\001\002\000\132\057\uff51\060" +
    "\uff51\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51" +
    "\067\uff51\070\uff51\071\uff51\072\uff51\073\uff51\074\uff51\075" +
    "\uff51\076\uff51\077\uff51\100\uff51\101\uff51\102\uff51\103\uff51" +
    "\104\uff51\105\uff51\106\uff51\110\uff51\111\uff51\112\uff51\113" +
    "\uff51\114\uff51\115\uff51\116\uff51\121\uff51\122\uff51\123\uff51" +
    "\124\uff51\125\uff51\126\uff51\127\uff51\130\uff51\131\uff51\132" +
    "\uff51\140\uff51\141\uff51\142\uff51\001\002\000\004\113\266" +
    "\001\002\000\132\057\uff58\060\uff58\061\uff58\062\uff58\063" +
    "\uff58\064\uff58\065\uff58\066\uff58\067\uff58\070\uff58\071\uff58" +
    "\072\uff58\073\uff58\074\uff58\075\uff58\076\uff58\077\uff58\100" +
    "\uff58\101\uff58\102\uff58\103\uff58\104\uff58\105\uff58\106\uff58" +
    "\110\uff58\111\uff58\112\uff58\113\uff58\114\uff58\115\uff58\116" +
    "\uff58\121\uff58\122\uff58\123\uff58\124\uff58\125\uff58\126\uff58" +
    "\127\uff58\130\uff58\131\uff58\132\uff58\140\uff58\141\uff58\142" +
    "\uff58\001\002\000\004\032\270\001\002\000\132\057\uff4b" +
    "\060\uff4b\061\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b\066" +
    "\uff4b\067\uff4b\070\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b" +
    "\075\uff4b\076\uff4b\077\uff4b\100\uff4b\101\uff4b\102\uff4b\103" +
    "\uff4b\104\uff4b\105\uff4b\106\uff4b\110\uff4b\111\uff4b\112\uff4b" +
    "\113\uff4b\114\uff4b\115\uff4b\116\uff4b\121\uff4b\122\uff4b\123" +
    "\uff4b\124\uff4b\125\uff4b\126\uff4b\127\uff4b\130\uff4b\131\uff4b" +
    "\132\uff4b\140\uff4b\141\uff4b\142\uff4b\001\002\000\064\004" +
    "\072\005\054\006\077\007\053\010\061\011\102\012\101" +
    "\013\057\014\076\015\064\053\242\054\214\055\165\056" +
    "\217\057\155\060\126\105\210\112\241\117\135\120\243" +
    "\121\171\122\220\137\234\143\042\144\147\001\002\000" +
    "\122\061\uff1e\062\uff1e\063\uff1e\064\uff1e\065\uff1e\066\uff1e" +
    "\067\uff1e\070\uff1e\071\uff1e\072\uff1e\073\uff1e\074\uff1e\075" +
    "\uff1e\076\uff1e\077\uff1e\100\uff1e\101\uff1e\102\uff1e\103\uff1e" +
    "\104\uff1e\106\uff1e\110\uff1e\111\uff1e\112\uff1e\113\uff1e\114" +
    "\uff1e\116\uff1e\121\uff1e\122\uff1e\123\uff1e\124\uff1e\125\uff1e" +
    "\126\uff1e\127\uff1e\130\uff1e\131\uff1e\132\uff1e\140\uff1e\141" +
    "\uff1e\142\uff1e\001\002\000\122\061\uff20\062\uff20\063\uff20" +
    "\064\uff20\065\uff20\066\uff20\067\uff20\070\uff20\071\uff20\072" +
    "\uff20\073\uff20\074\uff20\075\uff20\076\uff20\077\uff20\100\uff20" +
    "\101\uff20\102\uff20\103\uff20\104\uff20\106\uff20\110\uff20\111" +
    "\uff20\112\uff20\113\uff20\114\uff20\116\uff20\121\uff20\122\uff20" +
    "\123\uff20\124\uff20\125\uff20\126\uff20\127\uff20\130\uff20\131" +
    "\uff20\132\uff20\140\uff20\141\uff20\142\uff20\001\002\000\136" +
    "\035\uff30\057\uff30\060\uff30\061\uff30\062\uff30\063\uff30\064" +
    "\uff30\065\uff30\066\uff30\067\uff30\070\uff30\071\uff30\072\uff30" +
    "\073\uff30\074\uff30\075\uff30\076\uff30\077\uff30\100\uff30\101" +
    "\uff30\102\uff30\103\uff30\104\uff30\105\uff30\106\uff30\107\uff30" +
    "\110\uff30\111\uff30\112\uff30\113\uff30\114\uff30\116\uff30\121" +
    "\uff30\122\uff30\123\uff30\124\uff30\125\uff30\126\uff30\127\uff30" +
    "\130\uff30\131\uff30\132\uff30\140\uff30\141\uff30\142\uff30\143" +
    "\uff30\001\002\000\006\035\276\113\uff1a\001\002\000\136" +
    "\035\uff2f\057\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f\064" +
    "\uff2f\065\uff2f\066\uff2f\067\uff2f\070\uff2f\071\uff2f\072\uff2f" +
    "\073\uff2f\074\uff2f\075\uff2f\076\uff2f\077\uff2f\100\uff2f\101" +
    "\uff2f\102\uff2f\103\uff2f\104\uff2f\105\uff2f\106\uff2f\107\uff2f" +
    "\110\uff2f\111\uff2f\112\uff2f\113\uff2f\114\uff2f\116\uff2f\121" +
    "\uff2f\122\uff2f\123\uff2f\124\uff2f\125\uff2f\126\uff2f\127\uff2f" +
    "\130\uff2f\131\uff2f\132\uff2f\140\uff2f\141\uff2f\142\uff2f\143" +
    "\uff2f\001\002\000\064\004\072\005\054\006\077\007\053" +
    "\010\061\011\102\012\101\013\057\014\076\015\064\053" +
    "\242\054\214\055\165\056\217\057\155\060\126\105\210" +
    "\112\241\117\135\120\243\121\171\122\220\137\234\143" +
    "\042\144\147\001\002\000\122\061\uff1f\062\uff1f\063\uff1f" +
    "\064\uff1f\065\uff1f\066\uff1f\067\uff1f\070\uff1f\071\uff1f\072" +
    "\uff1f\073\uff1f\074\uff1f\075\uff1f\076\uff1f\077\uff1f\100\uff1f" +
    "\101\uff1f\102\uff1f\103\uff1f\104\uff1f\106\uff1f\110\uff1f\111" +
    "\uff1f\112\uff1f\113\uff1f\114\uff1f\116\uff1f\121\uff1f\122\uff1f" +
    "\123\uff1f\124\uff1f\125\uff1f\126\uff1f\127\uff1f\130\uff1f\131" +
    "\uff1f\132\uff1f\140\uff1f\141\uff1f\142\uff1f\001\002\000\006" +
    "\035\276\113\uff1b\001\002\000\064\004\ufef4\005\ufef4\006" +
    "\ufef4\007\ufef4\010\ufef4\011\ufef4\012\ufef4\013\ufef4\014\ufef4" +
    "\015\ufef4\053\ufef4\054\ufef4\055\ufef4\056\ufef4\057\ufef4\060" +
    "\ufef4\105\ufef4\112\ufef4\117\ufef4\120\ufef4\121\ufef4\122\ufef4" +
    "\137\ufef4\143\ufef4\144\ufef4\001\002\000\064\004\ufef7\005" +
    "\ufef7\006\ufef7\007\ufef7\010\ufef7\011\ufef7\012\ufef7\013\ufef7" +
    "\014\ufef7\015\ufef7\053\ufef7\054\ufef7\055\ufef7\056\ufef7\057" +
    "\ufef7\060\ufef7\105\ufef7\112\ufef7\117\ufef7\120\ufef7\121\ufef7" +
    "\122\ufef7\137\ufef7\143\ufef7\144\ufef7\001\002\000\064\004" +
    "\ufef0\005\ufef0\006\ufef0\007\ufef0\010\ufef0\011\ufef0\012\ufef0" +
    "\013\ufef0\014\ufef0\015\ufef0\053\ufef0\054\ufef0\055\ufef0\056" +
    "\ufef0\057\ufef0\060\ufef0\105\ufef0\112\ufef0\117\ufef0\120\ufef0" +
    "\121\ufef0\122\ufef0\137\ufef0\143\ufef0\144\ufef0\001\002\000" +
    "\064\004\072\005\054\006\077\007\053\010\061\011\102" +
    "\012\101\013\057\014\076\015\064\053\242\054\214\055" +
    "\165\056\217\057\155\060\126\105\210\112\241\117\135" +
    "\120\243\121\171\122\220\137\234\143\042\144\147\001" +
    "\002\000\064\004\ufef3\005\ufef3\006\ufef3\007\ufef3\010\ufef3" +
    "\011\ufef3\012\ufef3\013\ufef3\014\ufef3\015\ufef3\053\ufef3\054" +
    "\ufef3\055\ufef3\056\ufef3\057\ufef3\060\ufef3\105\ufef3\112\ufef3" +
    "\117\ufef3\120\ufef3\121\ufef3\122\ufef3\137\ufef3\143\ufef3\144" +
    "\ufef3\001\002\000\064\004\ufef2\005\ufef2\006\ufef2\007\ufef2" +
    "\010\ufef2\011\ufef2\012\ufef2\013\ufef2\014\ufef2\015\ufef2\053" +
    "\ufef2\054\ufef2\055\ufef2\056\ufef2\057\ufef2\060\ufef2\105\ufef2" +
    "\112\ufef2\117\ufef2\120\ufef2\121\ufef2\122\ufef2\137\ufef2\143" +
    "\ufef2\144\ufef2\001\002\000\064\004\ufef5\005\ufef5\006\ufef5" +
    "\007\ufef5\010\ufef5\011\ufef5\012\ufef5\013\ufef5\014\ufef5\015" +
    "\ufef5\053\ufef5\054\ufef5\055\ufef5\056\ufef5\057\ufef5\060\ufef5" +
    "\105\ufef5\112\ufef5\117\ufef5\120\ufef5\121\ufef5\122\ufef5\137" +
    "\ufef5\143\ufef5\144\ufef5\001\002\000\064\004\ufeef\005\ufeef" +
    "\006\ufeef\007\ufeef\010\ufeef\011\ufeef\012\ufeef\013\ufeef\014" +
    "\ufeef\015\ufeef\053\ufeef\054\ufeef\055\ufeef\056\ufeef\057\ufeef" +
    "\060\ufeef\105\ufeef\112\ufeef\117\ufeef\120\ufeef\121\ufeef\122" +
    "\ufeef\137\ufeef\143\ufeef\144\ufeef\001\002\000\064\004\ufef1" +
    "\005\ufef1\006\ufef1\007\ufef1\010\ufef1\011\ufef1\012\ufef1\013" +
    "\ufef1\014\ufef1\015\ufef1\053\ufef1\054\ufef1\055\ufef1\056\ufef1" +
    "\057\ufef1\060\ufef1\105\ufef1\112\ufef1\117\ufef1\120\ufef1\121" +
    "\ufef1\122\ufef1\137\ufef1\143\ufef1\144\ufef1\001\002\000\064" +
    "\004\ufeec\005\ufeec\006\ufeec\007\ufeec\010\ufeec\011\ufeec\012" +
    "\ufeec\013\ufeec\014\ufeec\015\ufeec\053\ufeec\054\ufeec\055\ufeec" +
    "\056\ufeec\057\ufeec\060\ufeec\105\ufeec\112\ufeec\117\ufeec\120" +
    "\ufeec\121\ufeec\122\ufeec\137\ufeec\143\ufeec\144\ufeec\001\002" +
    "\000\064\004\ufef6\005\ufef6\006\ufef6\007\ufef6\010\ufef6\011" +
    "\ufef6\012\ufef6\013\ufef6\014\ufef6\015\ufef6\053\ufef6\054\ufef6" +
    "\055\ufef6\056\ufef6\057\ufef6\060\ufef6\105\ufef6\112\ufef6\117" +
    "\ufef6\120\ufef6\121\ufef6\122\ufef6\137\ufef6\143\ufef6\144\ufef6" +
    "\001\002\000\064\004\ufeee\005\ufeee\006\ufeee\007\ufeee\010" +
    "\ufeee\011\ufeee\012\ufeee\013\ufeee\014\ufeee\015\ufeee\053\ufeee" +
    "\054\ufeee\055\ufeee\056\ufeee\057\ufeee\060\ufeee\105\ufeee\112" +
    "\ufeee\117\ufeee\120\ufeee\121\ufeee\122\ufeee\137\ufeee\143\ufeee" +
    "\144\ufeee\001\002\000\064\004\ufeed\005\ufeed\006\ufeed\007" +
    "\ufeed\010\ufeed\011\ufeed\012\ufeed\013\ufeed\014\ufeed\015\ufeed" +
    "\053\ufeed\054\ufeed\055\ufeed\056\ufeed\057\ufeed\060\ufeed\105" +
    "\ufeed\112\ufeed\117\ufeed\120\ufeed\121\ufeed\122\ufeed\137\ufeed" +
    "\143\ufeed\144\ufeed\001\002\000\020\103\ufef8\104\ufef8\110" +
    "\ufef8\112\ufef8\113\ufef8\114\ufef8\116\ufef8\001\002\000\130" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012" +
    "\uff88\013\uff88\014\uff88\015\uff88\021\uff88\031\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\057\uff88\060\uff88\104\uff88\105\uff88\107\uff88\110" +
    "\uff88\112\uff88\117\uff88\120\uff88\121\uff88\122\uff88\133\uff88" +
    "\134\uff88\137\uff88\143\uff88\144\uff88\001\002\000\010\035" +
    "\274\112\326\115\323\001\002\000\136\035\uff33\057\uff33" +
    "\060\uff33\061\uff33\062\uff33\063\uff33\064\uff33\065\uff33\066" +
    "\uff33\067\uff33\070\uff33\071\uff33\072\uff33\073\uff33\074\uff33" +
    "\075\uff33\076\uff33\077\uff33\100\uff33\101\uff33\102\uff33\103" +
    "\uff33\104\uff33\105\uff33\106\uff33\107\uff33\110\uff33\111\uff33" +
    "\112\uff33\113\uff33\114\uff33\115\uff33\116\uff33\121\uff33\122" +
    "\uff33\123\uff33\124\uff33\125\uff33\126\uff33\127\uff33\130\uff33" +
    "\131\uff33\132\uff33\140\uff33\141\uff33\142\uff33\001\002\000" +
    "\064\004\072\005\054\006\077\007\053\010\061\011\102" +
    "\012\101\013\057\014\076\015\064\053\242\054\214\055" +
    "\165\056\217\057\155\060\126\105\210\112\241\117\135" +
    "\120\243\121\171\122\220\137\234\143\042\144\147\001" +
    "\002\000\136\035\274\057\uff35\060\uff35\061\uff35\062\uff35" +
    "\063\uff35\064\uff35\065\uff35\066\uff35\067\uff35\070\uff35\071" +
    "\uff35\072\uff35\073\uff35\074\uff35\075\uff35\076\uff35\077\uff35" +
    "\100\uff35\101\uff35\102\uff35\103\uff35\104\uff35\105\uff35\106" +
    "\uff35\107\uff35\110\uff35\111\uff35\112\uff35\113\uff35\114\uff35" +
    "\115\323\116\uff35\121\uff35\122\uff35\123\uff35\124\uff35\125" +
    "\uff35\126\uff35\127\uff35\130\uff35\131\uff35\132\uff35\140\uff35" +
    "\141\uff35\142\uff35\001\002\000\134\035\276\057\uff34\060" +
    "\uff34\061\uff34\062\uff34\063\uff34\064\uff34\065\uff34\066\uff34" +
    "\067\uff34\070\uff34\071\uff34\072\uff34\073\uff34\074\uff34\075" +
    "\uff34\076\uff34\077\uff34\100\uff34\101\uff34\102\uff34\103\uff34" +
    "\104\uff34\105\uff34\106\uff34\107\uff34\110\uff34\111\uff34\112" +
    "\uff34\113\uff34\114\uff34\116\uff34\121\uff34\122\uff34\123\uff34" +
    "\124\uff34\125\uff34\126\uff34\127\uff34\130\uff34\131\uff34\132" +
    "\uff34\140\uff34\141\uff34\142\uff34\001\002\000\066\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\105\210\112\241\113\330\117\135\120" +
    "\243\121\171\122\220\137\234\143\042\144\147\001\002" +
    "\000\006\103\332\113\333\001\002\000\132\057\uff37\060" +
    "\uff37\061\uff37\062\uff37\063\uff37\064\uff37\065\uff37\066\uff37" +
    "\067\uff37\070\uff37\071\uff37\072\uff37\073\uff37\074\uff37\075" +
    "\uff37\076\uff37\077\uff37\100\uff37\101\uff37\102\uff37\103\uff37" +
    "\104\uff37\105\uff37\106\uff37\107\uff37\110\uff37\111\uff37\112" +
    "\uff37\113\uff37\114\uff37\116\uff37\121\uff37\122\uff37\123\uff37" +
    "\124\uff37\125\uff37\126\uff37\127\uff37\130\uff37\131\uff37\132" +
    "\uff37\140\uff37\141\uff37\142\uff37\001\002\000\006\103\uff42" +
    "\113\uff42\001\002\000\064\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\105" +
    "\210\112\241\117\135\120\243\121\171\122\220\137\234" +
    "\143\042\144\147\001\002\000\132\057\uff38\060\uff38\061" +
    "\uff38\062\uff38\063\uff38\064\uff38\065\uff38\066\uff38\067\uff38" +
    "\070\uff38\071\uff38\072\uff38\073\uff38\074\uff38\075\uff38\076" +
    "\uff38\077\uff38\100\uff38\101\uff38\102\uff38\103\uff38\104\uff38" +
    "\105\uff38\106\uff38\107\uff38\110\uff38\111\uff38\112\uff38\113" +
    "\uff38\114\uff38\116\uff38\121\uff38\122\uff38\123\uff38\124\uff38" +
    "\125\uff38\126\uff38\127\uff38\130\uff38\131\uff38\132\uff38\140" +
    "\uff38\141\uff38\142\uff38\001\002\000\006\103\uff41\113\uff41" +
    "\001\002\000\136\035\uff32\057\uff32\060\uff32\061\uff32\062" +
    "\uff32\063\uff32\064\uff32\065\uff32\066\uff32\067\uff32\070\uff32" +
    "\071\uff32\072\uff32\073\uff32\074\uff32\075\uff32\076\uff32\077" +
    "\uff32\100\uff32\101\uff32\102\uff32\103\uff32\104\uff32\105\uff32" +
    "\106\uff32\107\uff32\110\uff32\111\uff32\112\uff32\113\uff32\114" +
    "\uff32\115\uff32\116\uff32\121\uff32\122\uff32\123\uff32\124\uff32" +
    "\125\uff32\126\uff32\127\uff32\130\uff32\131\uff32\132\uff32\140" +
    "\uff32\141\uff32\142\uff32\001\002\000\134\035\276\057\uff36" +
    "\060\uff36\061\uff36\062\uff36\063\uff36\064\uff36\065\uff36\066" +
    "\uff36\067\uff36\070\uff36\071\uff36\072\uff36\073\uff36\074\uff36" +
    "\075\uff36\076\uff36\077\uff36\100\uff36\101\uff36\102\uff36\103" +
    "\uff36\104\uff36\105\uff36\106\uff36\107\uff36\110\uff36\111\uff36" +
    "\112\uff36\113\uff36\114\uff36\116\uff36\121\uff36\122\uff36\123" +
    "\uff36\124\uff36\125\uff36\126\uff36\127\uff36\130\uff36\131\uff36" +
    "\132\uff36\140\uff36\141\uff36\142\uff36\001\002\000\004\116" +
    "\340\001\002\000\136\035\uff31\057\uff31\060\uff31\061\uff31" +
    "\062\uff31\063\uff31\064\uff31\065\uff31\066\uff31\067\uff31\070" +
    "\uff31\071\uff31\072\uff31\073\uff31\074\uff31\075\uff31\076\uff31" +
    "\077\uff31\100\uff31\101\uff31\102\uff31\103\uff31\104\uff31\105" +
    "\uff31\106\uff31\107\uff31\110\uff31\111\uff31\112\uff31\113\uff31" +
    "\114\uff31\115\uff31\116\uff31\121\uff31\122\uff31\123\uff31\124" +
    "\uff31\125\uff31\126\uff31\127\uff31\130\uff31\131\uff31\132\uff31" +
    "\140\uff31\141\uff31\142\uff31\001\002\000\004\114\343\001" +
    "\002\000\004\114\ufeea\001\002\000\130\004\uff80\005\uff80" +
    "\006\uff80\007\uff80\010\uff80\011\uff80\012\uff80\013\uff80\014" +
    "\uff80\015\uff80\021\uff80\031\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80" +
    "\060\uff80\104\uff80\105\uff80\107\uff80\110\uff80\112\uff80\117" +
    "\uff80\120\uff80\121\uff80\122\uff80\133\uff80\134\uff80\137\uff80" +
    "\143\uff80\144\uff80\001\002\000\064\004\072\005\054\006" +
    "\077\007\053\010\061\011\102\012\101\013\057\014\076" +
    "\015\064\053\242\054\214\055\165\056\217\057\155\060" +
    "\126\105\210\112\241\117\135\120\243\121\171\122\220" +
    "\137\234\143\042\144\147\001\002\000\004\113\346\001" +
    "\002\000\122\004\072\005\054\006\077\007\053\010\061" +
    "\011\102\012\101\013\057\014\076\015\064\031\225\040" +
    "\233\041\215\042\230\043\177\045\172\046\200\047\201" +
    "\050\206\051\203\052\205\053\242\054\214\055\165\056" +
    "\217\057\155\060\126\104\176\105\210\107\074\112\241" +
    "\117\135\120\243\121\171\122\220\133\227\134\142\137" +
    "\234\143\127\144\147\001\002\000\130\004\uff7d\005\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d\014" +
    "\uff7d\015\uff7d\021\uff7d\031\uff7d\040\uff7d\041\uff7d\042\uff7d" +
    "\043\uff7d\044\350\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051" +
    "\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\060\uff7d\104\uff7d\105\uff7d\107\uff7d\110\uff7d\112\uff7d\117" +
    "\uff7d\120\uff7d\121\uff7d\122\uff7d\133\uff7d\134\uff7d\137\uff7d" +
    "\143\uff7d\144\uff7d\001\002\000\122\004\072\005\054\006" +
    "\077\007\053\010\061\011\102\012\101\013\057\014\076" +
    "\015\064\031\225\040\233\041\215\042\230\043\177\045" +
    "\172\046\200\047\201\050\206\051\203\052\205\053\242" +
    "\054\214\055\165\056\217\057\155\060\126\104\176\105" +
    "\210\107\074\112\241\117\135\120\243\121\171\122\220" +
    "\133\227\134\142\137\234\143\127\144\147\001\002\000" +
    "\130\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\011\uff7c" +
    "\012\uff7c\013\uff7c\014\uff7c\015\uff7c\021\uff7c\031\uff7c\040" +
    "\uff7c\041\uff7c\042\uff7c\043\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\104\uff7c\105\uff7c\107\uff7c" +
    "\110\uff7c\112\uff7c\117\uff7c\120\uff7c\121\uff7c\122\uff7c\133" +
    "\uff7c\134\uff7c\137\uff7c\143\uff7c\144\uff7c\001\002\000\004" +
    "\104\354\001\002\000\130\004\uff6b\005\uff6b\006\uff6b\007" +
    "\uff6b\010\uff6b\011\uff6b\012\uff6b\013\uff6b\014\uff6b\015\uff6b" +
    "\021\uff6b\031\uff6b\040\uff6b\041\uff6b\042\uff6b\043\uff6b\044" +
    "\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\104" +
    "\uff6b\105\uff6b\107\uff6b\110\uff6b\112\uff6b\117\uff6b\120\uff6b" +
    "\121\uff6b\122\uff6b\133\uff6b\134\uff6b\137\uff6b\143\uff6b\144" +
    "\uff6b\001\002\000\130\004\uff6c\005\uff6c\006\uff6c\007\uff6c" +
    "\010\uff6c\011\uff6c\012\uff6c\013\uff6c\014\uff6c\015\uff6c\021" +
    "\uff6c\031\uff6c\040\uff6c\041\uff6c\042\uff6c\043\uff6c\044\uff6c" +
    "\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053" +
    "\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c\104\uff6c" +
    "\105\uff6c\107\uff6c\110\uff6c\112\uff6c\117\uff6c\120\uff6c\121" +
    "\uff6c\122\uff6c\133\uff6c\134\uff6c\137\uff6c\143\uff6c\144\uff6c" +
    "\001\002\000\130\057\uff2c\060\uff2c\061\uff2c\062\uff2c\063" +
    "\uff2c\064\uff2c\065\uff2c\066\uff2c\067\uff2c\070\uff2c\071\uff2c" +
    "\072\uff2c\073\uff2c\074\uff2c\075\uff2c\076\uff2c\077\uff2c\100" +
    "\uff2c\101\uff2c\102\uff2c\103\uff2c\104\uff2c\105\uff2c\106\uff2c" +
    "\110\uff2c\111\uff2c\112\uff2c\113\uff2c\114\uff2c\116\uff2c\121" +
    "\uff2c\122\uff2c\123\uff2c\124\uff2c\125\uff2c\126\uff2c\127\uff2c" +
    "\130\uff2c\131\uff2c\132\uff2c\140\uff2c\141\uff2c\142\uff2c\001" +
    "\002\000\130\057\uff2b\060\uff2b\061\uff2b\062\uff2b\063\uff2b" +
    "\064\uff2b\065\uff2b\066\uff2b\067\uff2b\070\uff2b\071\uff2b\072" +
    "\uff2b\073\uff2b\074\uff2b\075\uff2b\076\uff2b\077\uff2b\100\uff2b" +
    "\101\uff2b\102\uff2b\103\uff2b\104\uff2b\105\uff2b\106\uff2b\110" +
    "\uff2b\111\uff2b\112\uff2b\113\uff2b\114\uff2b\116\uff2b\121\uff2b" +
    "\122\uff2b\123\uff2b\124\uff2b\125\uff2b\126\uff2b\127\uff2b\130" +
    "\uff2b\131\uff2b\132\uff2b\140\uff2b\141\uff2b\142\uff2b\001\002" +
    "\000\064\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\105\210\112\241\117" +
    "\135\120\243\121\171\122\220\137\234\143\042\144\147" +
    "\001\002\000\004\112\361\001\002\000\122\004\072\005" +
    "\054\006\077\007\053\010\061\011\102\012\101\013\057" +
    "\014\076\015\064\031\225\040\233\041\215\042\230\043" +
    "\177\045\172\046\200\047\201\050\206\051\203\052\205" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\104" +
    "\176\105\210\107\074\112\241\117\135\120\243\121\171" +
    "\122\220\133\227\134\142\137\234\143\127\144\147\001" +
    "\002\000\130\004\uff67\005\uff67\006\uff67\007\uff67\010\uff67" +
    "\011\uff67\012\uff67\013\uff67\014\uff67\015\uff67\021\uff67\031" +
    "\uff67\040\uff67\041\uff67\042\uff67\043\uff67\044\uff67\045\uff67" +
    "\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053\uff67\054" +
    "\uff67\055\uff67\056\uff67\057\uff67\060\uff67\104\uff67\105\uff67" +
    "\107\uff67\110\uff67\112\uff67\117\uff67\120\uff67\121\uff67\122" +
    "\uff67\133\uff67\134\uff67\137\uff67\143\uff67\144\uff67\001\002" +
    "\000\064\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\105\210\112\241\117" +
    "\135\120\243\121\171\122\220\137\234\143\042\144\147" +
    "\001\002\000\030\066\ufefe\067\ufefe\103\ufefe\104\ufefe\110" +
    "\ufefe\112\ufefe\113\ufefe\114\ufefe\116\ufefe\130\365\132\ufefe" +
    "\001\002\000\064\004\072\005\054\006\077\007\053\010" +
    "\061\011\102\012\101\013\057\014\076\015\064\053\242" +
    "\054\214\055\165\056\217\057\155\060\126\105\210\112" +
    "\241\117\135\120\243\121\171\122\220\137\234\143\042" +
    "\144\147\001\002\000\032\066\uff00\067\uff00\103\uff00\104" +
    "\uff00\110\uff00\112\uff00\113\uff00\114\uff00\116\uff00\127\367" +
    "\130\uff00\132\uff00\001\002\000\064\004\072\005\054\006" +
    "\077\007\053\010\061\011\102\012\101\013\057\014\076" +
    "\015\064\053\242\054\214\055\165\056\217\057\155\060" +
    "\126\105\210\112\241\117\135\120\243\121\171\122\220" +
    "\137\234\143\042\144\147\001\002\000\034\066\uff02\067" +
    "\uff02\103\uff02\104\uff02\110\uff02\112\uff02\113\uff02\114\uff02" +
    "\116\uff02\127\uff02\130\uff02\131\371\132\uff02\001\002\000" +
    "\064\004\072\005\054\006\077\007\053\010\061\011\102" +
    "\012\101\013\057\014\076\015\064\053\242\054\214\055" +
    "\165\056\217\057\155\060\126\105\210\112\241\117\135" +
    "\120\243\121\171\122\220\137\234\143\042\144\147\001" +
    "\002\000\040\064\374\065\373\066\uff04\067\uff04\103\uff04" +
    "\104\uff04\110\uff04\112\uff04\113\uff04\114\uff04\116\uff04\127" +
    "\uff04\130\uff04\131\uff04\132\uff04\001\002\000\064\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\105\210\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\064" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\053\242\054\214\055\165" +
    "\056\217\057\155\060\126\105\210\112\241\117\135\120" +
    "\243\121\171\122\220\137\234\143\042\144\147\001\002" +
    "\000\052\061\376\062\u0100\063\u0101\064\uff07\065\uff07\066" +
    "\uff07\067\uff07\103\uff07\104\uff07\110\uff07\112\uff07\113\uff07" +
    "\114\uff07\116\uff07\125\377\126\u0102\127\uff07\130\uff07\131" +
    "\uff07\132\uff07\001\002\000\064\004\072\005\054\006\077" +
    "\007\053\010\061\011\102\012\101\013\057\014\076\015" +
    "\064\053\242\054\214\055\165\056\217\057\155\060\126" +
    "\105\210\112\241\117\135\120\243\121\171\122\220\137" +
    "\234\143\042\144\147\001\002\000\064\004\072\005\054" +
    "\006\077\007\053\010\061\011\102\012\101\013\057\014" +
    "\076\015\064\053\242\054\214\055\165\056\217\057\155" +
    "\060\126\105\210\112\241\117\135\120\243\121\171\122" +
    "\220\137\234\143\042\144\147\001\002\000\064\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\105\210\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\030" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\143\042\001\002\000\064" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\053\242\054\214\055\165" +
    "\056\217\057\155\060\126\105\210\112\241\117\135\120" +
    "\243\121\171\122\220\137\234\143\042\144\147\001\002" +
    "\000\060\061\uff0d\062\uff0d\063\uff0d\064\uff0d\065\uff0d\066" +
    "\uff0d\067\uff0d\103\uff0d\104\uff0d\110\uff0d\112\uff0d\113\uff0d" +
    "\114\uff0d\116\uff0d\125\uff0d\126\uff0d\127\uff0d\130\uff0d\131" +
    "\uff0d\132\uff0d\140\u0106\141\u0104\142\u0105\001\002\000\064" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\053\242\054\214\055\165" +
    "\056\217\057\155\060\126\105\210\112\241\117\135\120" +
    "\243\121\171\122\220\137\234\143\042\144\147\001\002" +
    "\000\064\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\105\210\112\241\117" +
    "\135\120\243\121\171\122\220\137\234\143\042\144\147" +
    "\001\002\000\064\004\072\005\054\006\077\007\053\010" +
    "\061\011\102\012\101\013\057\014\076\015\064\053\242" +
    "\054\214\055\165\056\217\057\155\060\126\105\210\112" +
    "\241\117\135\120\243\121\171\122\220\137\234\143\042" +
    "\144\147\001\002\000\064\061\uff11\062\uff11\063\uff11\064" +
    "\uff11\065\uff11\066\uff11\067\uff11\103\uff11\104\uff11\110\uff11" +
    "\112\uff11\113\uff11\114\uff11\116\uff11\121\u0108\122\u0109\125" +
    "\uff11\126\uff11\127\uff11\130\uff11\131\uff11\132\uff11\140\uff11" +
    "\141\uff11\142\uff11\001\002\000\064\004\072\005\054\006" +
    "\077\007\053\010\061\011\102\012\101\013\057\014\076" +
    "\015\064\053\242\054\214\055\165\056\217\057\155\060" +
    "\126\105\210\112\241\117\135\120\243\121\171\122\220" +
    "\137\234\143\042\144\147\001\002\000\064\004\072\005" +
    "\054\006\077\007\053\010\061\011\102\012\101\013\057" +
    "\014\076\015\064\053\242\054\214\055\165\056\217\057" +
    "\155\060\126\105\210\112\241\117\135\120\243\121\171" +
    "\122\220\137\234\143\042\144\147\001\002\000\072\061" +
    "\uff13\062\uff13\063\uff13\064\uff13\065\uff13\066\uff13\067\uff13" +
    "\103\uff13\104\uff13\106\u010c\110\uff13\112\uff13\113\uff13\114" +
    "\uff13\116\uff13\121\uff13\122\uff13\123\u010d\124\u010b\125\uff13" +
    "\126\uff13\127\uff13\130\uff13\131\uff13\132\uff13\140\uff13\141" +
    "\uff13\142\uff13\001\002\000\064\004\072\005\054\006\077" +
    "\007\053\010\061\011\102\012\101\013\057\014\076\015" +
    "\064\053\242\054\214\055\165\056\217\057\155\060\126" +
    "\105\210\112\241\117\135\120\243\121\171\122\220\137" +
    "\234\143\042\144\147\001\002\000\064\004\072\005\054" +
    "\006\077\007\053\010\061\011\102\012\101\013\057\014" +
    "\076\015\064\053\242\054\214\055\165\056\217\057\155" +
    "\060\126\105\210\112\241\117\135\120\243\121\171\122" +
    "\220\137\234\143\042\144\147\001\002\000\064\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\105\210\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\072" +
    "\061\uff17\062\uff17\063\uff17\064\uff17\065\uff17\066\uff17\067" +
    "\uff17\103\uff17\104\uff17\106\uff17\110\uff17\112\uff17\113\uff17" +
    "\114\uff17\116\uff17\121\uff17\122\uff17\123\uff17\124\uff17\125" +
    "\uff17\126\uff17\127\uff17\130\uff17\131\uff17\132\uff17\140\uff17" +
    "\141\uff17\142\uff17\001\002\000\072\061\uff18\062\uff18\063" +
    "\uff18\064\uff18\065\uff18\066\uff18\067\uff18\103\uff18\104\uff18" +
    "\106\uff18\110\uff18\112\uff18\113\uff18\114\uff18\116\uff18\121" +
    "\uff18\122\uff18\123\uff18\124\uff18\125\uff18\126\uff18\127\uff18" +
    "\130\uff18\131\uff18\132\uff18\140\uff18\141\uff18\142\uff18\001" +
    "\002\000\072\061\uff16\062\uff16\063\uff16\064\uff16\065\uff16" +
    "\066\uff16\067\uff16\103\uff16\104\uff16\106\uff16\110\uff16\112" +
    "\uff16\113\uff16\114\uff16\116\uff16\121\uff16\122\uff16\123\uff16" +
    "\124\uff16\125\uff16\126\uff16\127\uff16\130\uff16\131\uff16\132" +
    "\uff16\140\uff16\141\uff16\142\uff16\001\002\000\072\061\uff14" +
    "\062\uff14\063\uff14\064\uff14\065\uff14\066\uff14\067\uff14\103" +
    "\uff14\104\uff14\106\u010c\110\uff14\112\uff14\113\uff14\114\uff14" +
    "\116\uff14\121\uff14\122\uff14\123\u010d\124\u010b\125\uff14\126" +
    "\uff14\127\uff14\130\uff14\131\uff14\132\uff14\140\uff14\141\uff14" +
    "\142\uff14\001\002\000\064\061\uff0f\062\uff0f\063\uff0f\064" +
    "\uff0f\065\uff0f\066\uff0f\067\uff0f\103\uff0f\104\uff0f\110\uff0f" +
    "\112\uff0f\113\uff0f\114\uff0f\116\uff0f\121\u0108\122\u0109\125" +
    "\uff0f\126\uff0f\127\uff0f\130\uff0f\131\uff0f\132\uff0f\140\uff0f" +
    "\141\uff0f\142\uff0f\001\002\000\064\061\uff10\062\uff10\063" +
    "\uff10\064\uff10\065\uff10\066\uff10\067\uff10\103\uff10\104\uff10" +
    "\110\uff10\112\uff10\113\uff10\114\uff10\116\uff10\121\u0108\122" +
    "\u0109\125\uff10\126\uff10\127\uff10\130\uff10\131\uff10\132\uff10" +
    "\140\uff10\141\uff10\142\uff10\001\002\000\052\061\uff09\062" +
    "\uff09\063\uff09\064\uff09\065\uff09\066\uff09\067\uff09\103\uff09" +
    "\104\uff09\110\uff09\112\uff09\113\uff09\114\uff09\116\uff09\125" +
    "\uff09\126\uff09\127\uff09\130\uff09\131\uff09\132\uff09\001\002" +
    "\000\060\061\uff0a\062\uff0a\063\uff0a\064\uff0a\065\uff0a\066" +
    "\uff0a\067\uff0a\103\uff0a\104\uff0a\110\uff0a\112\uff0a\113\uff0a" +
    "\114\uff0a\116\uff0a\125\uff0a\126\uff0a\127\uff0a\130\uff0a\131" +
    "\uff0a\132\uff0a\140\u0106\141\u0104\142\u0105\001\002\000\060" +
    "\061\uff0c\062\uff0c\063\uff0c\064\uff0c\065\uff0c\066\uff0c\067" +
    "\uff0c\103\uff0c\104\uff0c\110\uff0c\112\uff0c\113\uff0c\114\uff0c" +
    "\116\uff0c\125\uff0c\126\uff0c\127\uff0c\130\uff0c\131\uff0c\132" +
    "\uff0c\140\u0106\141\u0104\142\u0105\001\002\000\060\061\uff0b" +
    "\062\uff0b\063\uff0b\064\uff0b\065\uff0b\066\uff0b\067\uff0b\103" +
    "\uff0b\104\uff0b\110\uff0b\112\uff0b\113\uff0b\114\uff0b\116\uff0b" +
    "\125\uff0b\126\uff0b\127\uff0b\130\uff0b\131\uff0b\132\uff0b\140" +
    "\u0106\141\u0104\142\u0105\001\002\000\052\061\376\062\u0100" +
    "\063\u0101\064\uff06\065\uff06\066\uff06\067\uff06\103\uff06\104" +
    "\uff06\110\uff06\112\uff06\113\uff06\114\uff06\116\uff06\125\377" +
    "\126\u0102\127\uff06\130\uff06\131\uff06\132\uff06\001\002\000" +
    "\130\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\011\uff7f" +
    "\012\uff7f\013\uff7f\014\uff7f\015\uff7f\021\uff7f\031\uff7f\040" +
    "\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\045\uff7f\046\uff7f" +
    "\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054\uff7f\055" +
    "\uff7f\056\uff7f\057\uff7f\060\uff7f\104\uff7f\105\uff7f\107\uff7f" +
    "\110\uff7f\112\uff7f\117\uff7f\120\uff7f\121\uff7f\122\uff7f\133" +
    "\uff7f\134\uff7f\137\uff7f\143\uff7f\144\uff7f\001\002\000\012" +
    "\057\uff5b\060\uff5b\105\uff5b\112\uff47\001\002\000\014\057" +
    "\uff5d\060\uff5d\105\257\112\uff46\115\256\001\002\000\004" +
    "\112\u011f\001\002\000\014\057\uff57\060\uff57\105\uff57\112" +
    "\uff48\115\uff57\001\002\000\006\057\355\060\356\001\002" +
    "\000\066\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\105\210\112\241\113" +
    "\u0121\117\135\120\243\121\171\122\220\137\234\143\042" +
    "\144\147\001\002\000\006\103\332\113\u0122\001\002\000" +
    "\132\057\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49" +
    "\065\uff49\066\uff49\067\uff49\070\uff49\071\uff49\072\uff49\073" +
    "\uff49\074\uff49\075\uff49\076\uff49\077\uff49\100\uff49\101\uff49" +
    "\102\uff49\103\uff49\104\uff49\105\uff49\106\uff49\110\uff49\111" +
    "\uff49\112\uff49\113\uff49\114\uff49\115\uff49\116\uff49\121\uff49" +
    "\122\uff49\123\uff49\124\uff49\125\uff49\126\uff49\127\uff49\130" +
    "\uff49\131\uff49\132\uff49\140\uff49\141\uff49\142\uff49\001\002" +
    "\000\132\057\uff4a\060\uff4a\061\uff4a\062\uff4a\063\uff4a\064" +
    "\uff4a\065\uff4a\066\uff4a\067\uff4a\070\uff4a\071\uff4a\072\uff4a" +
    "\073\uff4a\074\uff4a\075\uff4a\076\uff4a\077\uff4a\100\uff4a\101" +
    "\uff4a\102\uff4a\103\uff4a\104\uff4a\105\uff4a\106\uff4a\110\uff4a" +
    "\111\uff4a\112\uff4a\113\uff4a\114\uff4a\115\uff4a\116\uff4a\121" +
    "\uff4a\122\uff4a\123\uff4a\124\uff4a\125\uff4a\126\uff4a\127\uff4a" +
    "\130\uff4a\131\uff4a\132\uff4a\140\uff4a\141\uff4a\142\uff4a\001" +
    "\002\000\004\104\u0125\001\002\000\130\004\uff6d\005\uff6d" +
    "\006\uff6d\007\uff6d\010\uff6d\011\uff6d\012\uff6d\013\uff6d\014" +
    "\uff6d\015\uff6d\021\uff6d\031\uff6d\040\uff6d\041\uff6d\042\uff6d" +
    "\043\uff6d\044\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051" +
    "\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d" +
    "\060\uff6d\104\uff6d\105\uff6d\107\uff6d\110\uff6d\112\uff6d\117" +
    "\uff6d\120\uff6d\121\uff6d\122\uff6d\133\uff6d\134\uff6d\137\uff6d" +
    "\143\uff6d\144\uff6d\001\002\000\130\004\uff6e\005\uff6e\006" +
    "\uff6e\007\uff6e\010\uff6e\011\uff6e\012\uff6e\013\uff6e\014\uff6e" +
    "\015\uff6e\021\uff6e\031\uff6e\040\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060" +
    "\uff6e\104\uff6e\105\uff6e\107\uff6e\110\uff6e\112\uff6e\117\uff6e" +
    "\120\uff6e\121\uff6e\122\uff6e\133\uff6e\134\uff6e\137\uff6e\143" +
    "\uff6e\144\uff6e\001\002\000\006\135\u012b\136\u0127\001\002" +
    "\000\004\107\074\001\002\000\004\107\074\001\002\000" +
    "\134\004\uff63\005\uff63\006\uff63\007\uff63\010\uff63\011\uff63" +
    "\012\uff63\013\uff63\014\uff63\015\uff63\021\uff63\031\uff63\040" +
    "\uff63\041\uff63\042\uff63\043\uff63\044\uff63\045\uff63\046\uff63" +
    "\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\055" +
    "\uff63\056\uff63\057\uff63\060\uff63\104\uff63\105\uff63\107\uff63" +
    "\110\uff63\112\uff63\117\uff63\120\uff63\121\uff63\122\uff63\133" +
    "\uff63\134\uff63\135\uff63\136\uff63\137\uff63\143\uff63\144\uff63" +
    "\001\002\000\130\004\uff66\005\uff66\006\uff66\007\uff66\010" +
    "\uff66\011\uff66\012\uff66\013\uff66\014\uff66\015\uff66\021\uff66" +
    "\031\uff66\040\uff66\041\uff66\042\uff66\043\uff66\044\uff66\045" +
    "\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66" +
    "\054\uff66\055\uff66\056\uff66\057\uff66\060\uff66\104\uff66\105" +
    "\uff66\107\uff66\110\uff66\112\uff66\117\uff66\120\uff66\121\uff66" +
    "\122\uff66\133\uff66\134\uff66\137\uff66\143\uff66\144\uff66\001" +
    "\002\000\004\112\u012f\001\002\000\134\004\uff65\005\uff65" +
    "\006\uff65\007\uff65\010\uff65\011\uff65\012\uff65\013\uff65\014" +
    "\uff65\015\uff65\021\uff65\031\uff65\040\uff65\041\uff65\042\uff65" +
    "\043\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051" +
    "\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057\uff65" +
    "\060\uff65\104\uff65\105\uff65\107\uff65\110\uff65\112\uff65\117" +
    "\uff65\120\uff65\121\uff65\122\uff65\133\uff65\134\uff65\135\u012b" +
    "\136\u0127\137\uff65\143\uff65\144\uff65\001\002\000\134\004" +
    "\uff62\005\uff62\006\uff62\007\uff62\010\uff62\011\uff62\012\uff62" +
    "\013\uff62\014\uff62\015\uff62\021\uff62\031\uff62\040\uff62\041" +
    "\uff62\042\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62" +
    "\050\uff62\051\uff62\052\uff62\053\uff62\054\uff62\055\uff62\056" +
    "\uff62\057\uff62\060\uff62\104\uff62\105\uff62\107\uff62\110\uff62" +
    "\112\uff62\117\uff62\120\uff62\121\uff62\122\uff62\133\uff62\134" +
    "\uff62\135\uff62\136\uff62\137\uff62\143\uff62\144\uff62\001\002" +
    "\000\130\004\uff64\005\uff64\006\uff64\007\uff64\010\uff64\011" +
    "\uff64\012\uff64\013\uff64\014\uff64\015\uff64\021\uff64\031\uff64" +
    "\040\uff64\041\uff64\042\uff64\043\uff64\044\uff64\045\uff64\046" +
    "\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054\uff64" +
    "\055\uff64\056\uff64\057\uff64\060\uff64\104\uff64\105\uff64\107" +
    "\uff64\110\uff64\112\uff64\117\uff64\120\uff64\121\uff64\122\uff64" +
    "\133\uff64\134\uff64\137\uff64\143\uff64\144\uff64\001\002\000" +
    "\030\004\072\005\054\006\077\007\053\010\061\011\102" +
    "\012\101\013\057\014\076\015\064\143\042\001\002\000" +
    "\006\113\u0132\143\u0131\001\002\000\004\113\u0133\001\002" +
    "\000\004\107\uff5f\001\002\000\004\107\uff60\001\002\000" +
    "\134\004\uff61\005\uff61\006\uff61\007\uff61\010\uff61\011\uff61" +
    "\012\uff61\013\uff61\014\uff61\015\uff61\021\uff61\031\uff61\040" +
    "\uff61\041\uff61\042\uff61\043\uff61\044\uff61\045\uff61\046\uff61" +
    "\047\uff61\050\uff61\051\uff61\052\uff61\053\uff61\054\uff61\055" +
    "\uff61\056\uff61\057\uff61\060\uff61\104\uff61\105\uff61\107\uff61" +
    "\110\uff61\112\uff61\117\uff61\120\uff61\121\uff61\122\uff61\133" +
    "\uff61\134\uff61\135\uff61\136\uff61\137\uff61\143\uff61\144\uff61" +
    "\001\002\000\130\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010" +
    "\uff5e\011\uff5e\012\uff5e\013\uff5e\014\uff5e\015\uff5e\021\uff5e" +
    "\031\uff5e\040\uff5e\041\uff5e\042\uff5e\043\uff5e\044\uff5e\045" +
    "\uff5e\046\uff5e\047\uff5e\050\uff5e\051\uff5e\052\uff5e\053\uff5e" +
    "\054\uff5e\055\uff5e\056\uff5e\057\uff5e\060\uff5e\104\uff5e\105" +
    "\uff5e\107\uff5e\110\uff5e\112\uff5e\117\uff5e\120\uff5e\121\uff5e" +
    "\122\uff5e\133\uff5e\134\uff5e\137\uff5e\143\uff5e\144\uff5e\001" +
    "\002\000\130\004\uff69\005\uff69\006\uff69\007\uff69\010\uff69" +
    "\011\uff69\012\uff69\013\uff69\014\uff69\015\uff69\021\uff69\031" +
    "\uff69\040\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045\uff69" +
    "\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054" +
    "\uff69\055\uff69\056\uff69\057\uff69\060\uff69\104\uff69\105\uff69" +
    "\107\uff69\110\uff69\112\uff69\117\uff69\120\uff69\121\uff69\122" +
    "\uff69\133\uff69\134\uff69\137\uff69\143\uff69\144\uff69\001\002" +
    "\000\004\104\u0138\001\002\000\130\004\uff6a\005\uff6a\006" +
    "\uff6a\007\uff6a\010\uff6a\011\uff6a\012\uff6a\013\uff6a\014\uff6a" +
    "\015\uff6a\021\uff6a\031\uff6a\040\uff6a\041\uff6a\042\uff6a\043" +
    "\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051\uff6a" +
    "\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a\057\uff6a\060" +
    "\uff6a\104\uff6a\105\uff6a\107\uff6a\110\uff6a\112\uff6a\117\uff6a" +
    "\120\uff6a\121\uff6a\122\uff6a\133\uff6a\134\uff6a\137\uff6a\143" +
    "\uff6a\144\uff6a\001\002\000\006\103\u0146\104\u0147\001\002" +
    "\000\012\035\120\103\uffb4\104\uffb4\111\u013c\001\002\000" +
    "\006\103\uffb6\104\uffb6\001\002\000\066\004\072\005\054" +
    "\006\077\007\053\010\061\011\102\012\101\013\057\014" +
    "\076\015\064\053\242\054\214\055\165\056\217\057\155" +
    "\060\126\105\210\107\u013d\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\070" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\053\242\054\214\055\165" +
    "\056\217\057\155\060\126\105\210\107\u013d\110\u0141\112" +
    "\241\117\135\120\243\121\171\122\220\137\234\143\042" +
    "\144\147\001\002\000\010\103\uffb2\104\uffb2\110\uffb2\001" +
    "\002\000\006\103\uffb3\104\uffb3\001\002\000\006\103\u0143" +
    "\110\u0144\001\002\000\010\103\uffb1\104\uffb1\110\uffb1\001" +
    "\002\000\006\103\uffaf\110\uffaf\001\002\000\072\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\103\uffad\105\210\107\u013d\110\uffad\112" +
    "\241\117\135\120\243\121\171\122\220\137\234\143\042" +
    "\144\147\001\002\000\010\103\uffb0\104\uffb0\110\uffb0\001" +
    "\002\000\006\103\uffae\110\uffae\001\002\000\004\143\117" +
    "\001\002\000\126\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\021\uff8c" +
    "\031\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\056\uff8c\057\uff8c\060\uff8c\104\uff8c\105\uff8c\107" +
    "\uff8c\110\uff8c\112\uff8c\117\uff8c\120\uff8c\121\uff8c\122\uff8c" +
    "\133\uff8c\134\uff8c\137\uff8c\143\uff8c\144\uff8c\001\002\000" +
    "\006\103\uffb5\104\uffb5\001\002\000\070\004\072\005\054" +
    "\006\077\007\053\010\061\011\102\012\101\013\057\014" +
    "\076\015\064\021\151\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\104\u014b\105\210\112\241\117\135\120" +
    "\243\121\171\122\220\137\234\143\042\144\147\001\002" +
    "\000\066\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\053\242\054\214" +
    "\055\165\056\217\057\155\060\126\104\u0152\105\210\112" +
    "\241\117\135\120\243\121\171\122\220\137\234\143\042" +
    "\144\147\001\002\000\066\004\uff74\005\uff74\006\uff74\007" +
    "\uff74\010\uff74\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74" +
    "\053\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\104" +
    "\uff74\105\uff74\112\uff74\117\uff74\120\uff74\121\uff74\122\uff74" +
    "\137\uff74\143\uff74\144\uff74\001\002\000\010\103\uff70\104" +
    "\uff70\113\uff70\001\002\000\006\103\u014f\104\u0150\001\002" +
    "\000\066\004\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011" +
    "\uff75\012\uff75\013\uff75\014\uff75\015\uff75\053\uff75\054\uff75" +
    "\055\uff75\056\uff75\057\uff75\060\uff75\104\uff75\105\uff75\112" +
    "\uff75\117\uff75\120\uff75\121\uff75\122\uff75\137\uff75\143\uff75" +
    "\144\uff75\001\002\000\064\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\105" +
    "\210\112\241\117\135\120\243\121\171\122\220\137\234" +
    "\143\042\144\147\001\002\000\066\004\uff76\005\uff76\006" +
    "\uff76\007\uff76\010\uff76\011\uff76\012\uff76\013\uff76\014\uff76" +
    "\015\uff76\053\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060" +
    "\uff76\104\uff76\105\uff76\112\uff76\117\uff76\120\uff76\121\uff76" +
    "\122\uff76\137\uff76\143\uff76\144\uff76\001\002\000\010\103" +
    "\uff6f\104\uff6f\113\uff6f\001\002\000\066\004\uff72\005\uff72" +
    "\006\uff72\007\uff72\010\uff72\011\uff72\012\uff72\013\uff72\014" +
    "\uff72\015\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72" +
    "\060\uff72\105\uff72\112\uff72\113\uff72\117\uff72\120\uff72\121" +
    "\uff72\122\uff72\137\uff72\143\uff72\144\uff72\001\002\000\004" +
    "\104\u015b\001\002\000\066\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\105" +
    "\210\112\241\113\u0155\117\135\120\243\121\171\122\220" +
    "\137\234\143\042\144\147\001\002\000\122\004\072\005" +
    "\054\006\077\007\053\010\061\011\102\012\101\013\057" +
    "\014\076\015\064\031\225\040\233\041\215\042\230\043" +
    "\177\045\172\046\200\047\201\050\206\051\203\052\205" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\104" +
    "\176\105\210\107\074\112\241\117\135\120\243\121\171" +
    "\122\220\133\227\134\142\137\234\143\127\144\147\001" +
    "\002\000\006\103\u014f\113\uff71\001\002\000\004\113\u0158" +
    "\001\002\000\122\004\072\005\054\006\077\007\053\010" +
    "\061\011\102\012\101\013\057\014\076\015\064\031\225" +
    "\040\233\041\215\042\230\043\177\045\172\046\200\047" +
    "\201\050\206\051\203\052\205\053\242\054\214\055\165" +
    "\056\217\057\155\060\126\104\176\105\210\107\074\112" +
    "\241\117\135\120\243\121\171\122\220\133\227\134\142" +
    "\137\234\143\127\144\147\001\002\000\130\004\uff78\005" +
    "\uff78\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\013\uff78" +
    "\014\uff78\015\uff78\021\uff78\031\uff78\040\uff78\041\uff78\042" +
    "\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057" +
    "\uff78\060\uff78\104\uff78\105\uff78\107\uff78\110\uff78\112\uff78" +
    "\117\uff78\120\uff78\121\uff78\122\uff78\133\uff78\134\uff78\137" +
    "\uff78\143\uff78\144\uff78\001\002\000\130\004\uff77\005\uff77" +
    "\006\uff77\007\uff77\010\uff77\011\uff77\012\uff77\013\uff77\014" +
    "\uff77\015\uff77\021\uff77\031\uff77\040\uff77\041\uff77\042\uff77" +
    "\043\uff77\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051" +
    "\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057\uff77" +
    "\060\uff77\104\uff77\105\uff77\107\uff77\110\uff77\112\uff77\117" +
    "\uff77\120\uff77\121\uff77\122\uff77\133\uff77\134\uff77\137\uff77" +
    "\143\uff77\144\uff77\001\002\000\066\004\uff73\005\uff73\006" +
    "\uff73\007\uff73\010\uff73\011\uff73\012\uff73\013\uff73\014\uff73" +
    "\015\uff73\053\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060" +
    "\uff73\105\uff73\112\uff73\113\uff73\117\uff73\120\uff73\121\uff73" +
    "\122\uff73\137\uff73\143\uff73\144\uff73\001\002\000\004\045" +
    "\u015d\001\002\000\004\112\u015e\001\002\000\064\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\105\210\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\004" +
    "\113\u0160\001\002\000\004\104\u0161\001\002\000\130\004" +
    "\uff79\005\uff79\006\uff79\007\uff79\010\uff79\011\uff79\012\uff79" +
    "\013\uff79\014\uff79\015\uff79\021\uff79\031\uff79\040\uff79\041" +
    "\uff79\042\uff79\043\uff79\044\uff79\045\uff79\046\uff79\047\uff79" +
    "\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056" +
    "\uff79\057\uff79\060\uff79\104\uff79\105\uff79\107\uff79\110\uff79" +
    "\112\uff79\117\uff79\120\uff79\121\uff79\122\uff79\133\uff79\134" +
    "\uff79\137\uff79\143\uff79\144\uff79\001\002\000\064\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\105\210\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\004" +
    "\113\u0164\001\002\000\004\107\074\001\002\000\130\004" +
    "\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\011\uff7b\012\uff7b" +
    "\013\uff7b\014\uff7b\015\uff7b\021\uff7b\031\uff7b\040\uff7b\041" +
    "\uff7b\042\uff7b\043\uff7b\044\uff7b\045\uff7b\046\uff7b\047\uff7b" +
    "\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056" +
    "\uff7b\057\uff7b\060\uff7b\104\uff7b\105\uff7b\107\uff7b\110\uff7b" +
    "\112\uff7b\117\uff7b\120\uff7b\121\uff7b\122\uff7b\133\uff7b\134" +
    "\uff7b\137\uff7b\143\uff7b\144\uff7b\001\002\000\064\004\072" +
    "\005\054\006\077\007\053\010\061\011\102\012\101\013" +
    "\057\014\076\015\064\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\105\210\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\064" +
    "\004\072\005\054\006\077\007\053\010\061\011\102\012" +
    "\101\013\057\014\076\015\064\053\242\054\214\055\165" +
    "\056\217\057\155\060\126\105\210\112\241\117\135\120" +
    "\243\121\171\122\220\137\234\143\042\144\147\001\002" +
    "\000\026\066\363\067\ufefc\103\ufefc\104\ufefc\110\ufefc\112" +
    "\ufefc\113\ufefc\114\ufefc\116\ufefc\132\ufefc\001\002\000\004" +
    "\114\u016a\001\002\000\064\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\105" +
    "\210\112\241\117\135\120\243\121\171\122\220\137\234" +
    "\143\042\144\147\001\002\000\020\103\ufefa\104\ufefa\110" +
    "\ufefa\112\ufefa\113\ufefa\114\ufefa\116\ufefa\001\002\000\126" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\014\uff8f\015\uff8f\021\uff8f\031\uff8f\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\045\uff8f\046\uff8f\047\uff8f\050" +
    "\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\057\uff8f\060\uff8f\104\uff8f\105\uff8f\107\uff8f\110\uff8f\112" +
    "\uff8f\117\uff8f\120\uff8f\121\uff8f\122\uff8f\133\uff8f\134\uff8f" +
    "\137\uff8f\143\uff8f\144\uff8f\001\002\000\160\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\013\uff92" +
    "\014\uff92\015\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92" +
    "\033\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92\104\uff92\105" +
    "\uff92\107\uff92\110\uff92\112\uff92\117\uff92\120\uff92\121\uff92" +
    "\122\uff92\133\uff92\134\uff92\135\uff92\136\uff92\137\uff92\143" +
    "\uff92\144\uff92\001\002\000\064\004\072\005\054\006\077" +
    "\007\053\010\061\011\102\012\101\013\057\014\076\015" +
    "\064\053\242\054\214\055\165\056\217\057\155\060\126" +
    "\105\210\112\241\117\135\120\243\121\171\122\220\137" +
    "\234\143\042\144\147\001\002\000\004\113\u0170\001\002" +
    "\000\122\004\072\005\054\006\077\007\053\010\061\011" +
    "\102\012\101\013\057\014\076\015\064\031\225\040\233" +
    "\041\215\042\230\043\177\045\172\046\200\047\201\050" +
    "\206\051\203\052\205\053\242\054\214\055\165\056\217" +
    "\057\155\060\126\104\176\105\210\107\074\112\241\117" +
    "\135\120\243\121\171\122\220\133\227\134\142\137\234" +
    "\143\127\144\147\001\002\000\130\004\uff7a\005\uff7a\006" +
    "\uff7a\007\uff7a\010\uff7a\011\uff7a\012\uff7a\013\uff7a\014\uff7a" +
    "\015\uff7a\021\uff7a\031\uff7a\040\uff7a\041\uff7a\042\uff7a\043" +
    "\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a" +
    "\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060" +
    "\uff7a\104\uff7a\105\uff7a\107\uff7a\110\uff7a\112\uff7a\117\uff7a" +
    "\120\uff7a\121\uff7a\122\uff7a\133\uff7a\134\uff7a\137\uff7a\143" +
    "\uff7a\144\uff7a\001\002\000\070\004\072\005\054\006\077" +
    "\007\053\010\061\011\102\012\101\013\057\014\076\015" +
    "\064\053\242\054\214\055\165\056\217\057\155\060\126" +
    "\105\210\107\u013d\110\u0174\112\241\117\135\120\243\121" +
    "\171\122\220\137\234\143\042\144\147\001\002\000\006" +
    "\103\u0143\110\u0175\001\002\000\130\057\uff3c\060\uff3c\061" +
    "\uff3c\062\uff3c\063\uff3c\064\uff3c\065\uff3c\066\uff3c\067\uff3c" +
    "\070\uff3c\071\uff3c\072\uff3c\073\uff3c\074\uff3c\075\uff3c\076" +
    "\uff3c\077\uff3c\100\uff3c\101\uff3c\102\uff3c\103\uff3c\104\uff3c" +
    "\105\uff3c\106\uff3c\110\uff3c\111\uff3c\112\uff3c\113\uff3c\114" +
    "\uff3c\116\uff3c\121\uff3c\122\uff3c\123\uff3c\124\uff3c\125\uff3c" +
    "\126\uff3c\127\uff3c\130\uff3c\131\uff3c\132\uff3c\140\uff3c\141" +
    "\uff3c\142\uff3c\001\002\000\130\057\uff3a\060\uff3a\061\uff3a" +
    "\062\uff3a\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067\uff3a\070" +
    "\uff3a\071\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a\076\uff3a" +
    "\077\uff3a\100\uff3a\101\uff3a\102\uff3a\103\uff3a\104\uff3a\105" +
    "\uff3a\106\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\114\uff3a" +
    "\116\uff3a\121\uff3a\122\uff3a\123\uff3a\124\uff3a\125\uff3a\126" +
    "\uff3a\127\uff3a\130\uff3a\131\uff3a\132\uff3a\140\uff3a\141\uff3a" +
    "\142\uff3a\001\002\000\064\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\020\027\021\025\022\015\023\021\024\012\025\065\026" +
    "\024\027\016\030\013\031\032\032\007\033\026\107\074" +
    "\110\u0178\143\106\001\002\000\064\004\072\005\054\006" +
    "\077\007\053\010\061\011\102\012\101\013\057\014\076" +
    "\015\064\020\027\021\025\022\015\023\021\024\012\025" +
    "\065\026\024\027\016\030\013\031\032\032\007\033\026" +
    "\107\074\110\u017a\143\106\001\002\000\130\057\uff3b\060" +
    "\uff3b\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065\uff3b\066\uff3b" +
    "\067\uff3b\070\uff3b\071\uff3b\072\uff3b\073\uff3b\074\uff3b\075" +
    "\uff3b\076\uff3b\077\uff3b\100\uff3b\101\uff3b\102\uff3b\103\uff3b" +
    "\104\uff3b\105\uff3b\106\uff3b\110\uff3b\111\uff3b\112\uff3b\113" +
    "\uff3b\114\uff3b\116\uff3b\121\uff3b\122\uff3b\123\uff3b\124\uff3b" +
    "\125\uff3b\126\uff3b\127\uff3b\130\uff3b\131\uff3b\132\uff3b\140" +
    "\uff3b\141\uff3b\142\uff3b\001\002\000\064\004\uffc1\005\uffc1" +
    "\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\107\uffc1\110\uffc1\143\uffc1\001\002\000\130\057\uff39" +
    "\060\uff39\061\uff39\062\uff39\063\uff39\064\uff39\065\uff39\066" +
    "\uff39\067\uff39\070\uff39\071\uff39\072\uff39\073\uff39\074\uff39" +
    "\075\uff39\076\uff39\077\uff39\100\uff39\101\uff39\102\uff39\103" +
    "\uff39\104\uff39\105\uff39\106\uff39\110\uff39\111\uff39\112\uff39" +
    "\113\uff39\114\uff39\116\uff39\121\uff39\122\uff39\123\uff39\124" +
    "\uff39\125\uff39\126\uff39\127\uff39\130\uff39\131\uff39\132\uff39" +
    "\140\uff39\141\uff39\142\uff39\001\002\000\004\143\u017c\001" +
    "\002\000\132\057\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f" +
    "\064\uff4f\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071\uff4f\072" +
    "\uff4f\073\uff4f\074\uff4f\075\uff4f\076\uff4f\077\uff4f\100\uff4f" +
    "\101\uff4f\102\uff4f\103\uff4f\104\uff4f\105\uff4f\106\uff4f\110" +
    "\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\115\uff4f\116\uff4f" +
    "\121\uff4f\122\uff4f\123\uff4f\124\uff4f\125\uff4f\126\uff4f\127" +
    "\uff4f\130\uff4f\131\uff4f\132\uff4f\140\uff4f\141\uff4f\142\uff4f" +
    "\001\002\000\122\061\uff28\062\uff28\063\uff28\064\uff28\065" +
    "\uff28\066\uff28\067\uff28\070\uff28\071\uff28\072\uff28\073\uff28" +
    "\074\uff28\075\uff28\076\uff28\077\uff28\100\uff28\101\uff28\102" +
    "\uff28\103\uff28\104\uff28\106\uff28\110\uff28\111\uff28\112\uff28" +
    "\113\uff28\114\uff28\116\uff28\121\uff28\122\uff28\123\uff28\124" +
    "\uff28\125\uff28\126\uff28\127\uff28\130\uff28\131\uff28\132\uff28" +
    "\140\uff28\141\uff28\142\uff28\001\002\000\122\061\uff2a\062" +
    "\uff2a\063\uff2a\064\uff2a\065\uff2a\066\uff2a\067\uff2a\070\uff2a" +
    "\071\uff2a\072\uff2a\073\uff2a\074\uff2a\075\uff2a\076\uff2a\077" +
    "\uff2a\100\uff2a\101\uff2a\102\uff2a\103\uff2a\104\uff2a\106\uff2a" +
    "\110\uff2a\111\uff2a\112\uff2a\113\uff2a\114\uff2a\116\uff2a\121" +
    "\uff2a\122\uff2a\123\uff2a\124\uff2a\125\uff2a\126\uff2a\127\uff2a" +
    "\130\uff2a\131\uff2a\132\uff2a\140\uff2a\141\uff2a\142\uff2a\001" +
    "\002\000\004\143\117\001\002\000\006\103\u0146\104\u0181" +
    "\001\002\000\126\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b\015\uff8b\021\uff8b" +
    "\031\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\104\uff8b\105\uff8b\107" +
    "\uff8b\110\uff8b\112\uff8b\117\uff8b\120\uff8b\121\uff8b\122\uff8b" +
    "\133\uff8b\134\uff8b\137\uff8b\143\uff8b\144\uff8b\001\002\000" +
    "\004\104\u0183\001\002\000\130\004\uff68\005\uff68\006\uff68" +
    "\007\uff68\010\uff68\011\uff68\012\uff68\013\uff68\014\uff68\015" +
    "\uff68\021\uff68\031\uff68\040\uff68\041\uff68\042\uff68\043\uff68" +
    "\044\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052" +
    "\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68\060\uff68" +
    "\104\uff68\105\uff68\107\uff68\110\uff68\112\uff68\117\uff68\120" +
    "\uff68\121\uff68\122\uff68\133\uff68\134\uff68\137\uff68\143\uff68" +
    "\144\uff68\001\002\000\064\004\072\005\054\006\077\007" +
    "\053\010\061\011\102\012\101\013\057\014\076\015\064" +
    "\053\242\054\214\055\165\056\217\057\155\060\126\105" +
    "\210\112\241\117\135\120\243\121\171\122\220\137\234" +
    "\143\042\144\147\001\002\000\004\116\u0186\001\002\000" +
    "\132\057\uff50\060\uff50\061\uff50\062\uff50\063\uff50\064\uff50" +
    "\065\uff50\066\uff50\067\uff50\070\uff50\071\uff50\072\uff50\073" +
    "\uff50\074\uff50\075\uff50\076\uff50\077\uff50\100\uff50\101\uff50" +
    "\102\uff50\103\uff50\104\uff50\105\uff50\106\uff50\110\uff50\111" +
    "\uff50\112\uff50\113\uff50\114\uff50\115\uff50\116\uff50\121\uff50" +
    "\122\uff50\123\uff50\124\uff50\125\uff50\126\uff50\127\uff50\130" +
    "\uff50\131\uff50\132\uff50\140\uff50\141\uff50\142\uff50\001\002" +
    "\000\122\061\uff25\062\uff25\063\uff25\064\uff25\065\uff25\066" +
    "\uff25\067\uff25\070\uff25\071\uff25\072\uff25\073\uff25\074\uff25" +
    "\075\uff25\076\uff25\077\uff25\100\uff25\101\uff25\102\uff25\103" +
    "\uff25\104\uff25\106\uff25\110\uff25\111\uff25\112\uff25\113\uff25" +
    "\114\uff25\116\uff25\121\uff25\122\uff25\123\uff25\124\uff25\125" +
    "\uff25\126\uff25\127\uff25\130\uff25\131\uff25\132\uff25\140\uff25" +
    "\141\uff25\142\uff25\001\002\000\004\143\u0189\001\002\000" +
    "\132\057\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e" +
    "\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e\073" +
    "\uff4e\074\uff4e\075\uff4e\076\uff4e\077\uff4e\100\uff4e\101\uff4e" +
    "\102\uff4e\103\uff4e\104\uff4e\105\uff4e\106\uff4e\110\uff4e\111" +
    "\uff4e\112\uff4e\113\uff4e\114\uff4e\115\uff4e\116\uff4e\121\uff4e" +
    "\122\uff4e\123\uff4e\124\uff4e\125\uff4e\126\uff4e\127\uff4e\130" +
    "\uff4e\131\uff4e\132\uff4e\140\uff4e\141\uff4e\142\uff4e\001\002" +
    "\000\130\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\011" +
    "\uff81\012\uff81\013\uff81\014\uff81\015\uff81\021\uff81\031\uff81" +
    "\040\uff81\041\uff81\042\uff81\043\uff81\044\uff81\045\uff81\046" +
    "\uff81\047\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\104\uff81\105\uff81\107" +
    "\uff81\110\uff81\112\uff81\117\uff81\120\uff81\121\uff81\122\uff81" +
    "\133\uff81\134\uff81\137\uff81\143\uff81\144\uff81\001\002\000" +
    "\122\061\uff29\062\uff29\063\uff29\064\uff29\065\uff29\066\uff29" +
    "\067\uff29\070\uff29\071\uff29\072\uff29\073\uff29\074\uff29\075" +
    "\uff29\076\uff29\077\uff29\100\uff29\101\uff29\102\uff29\103\uff29" +
    "\104\uff29\106\uff29\110\uff29\111\uff29\112\uff29\113\uff29\114" +
    "\uff29\116\uff29\121\uff29\122\uff29\123\uff29\124\uff29\125\uff29" +
    "\126\uff29\127\uff29\130\uff29\131\uff29\132\uff29\140\uff29\141" +
    "\uff29\142\uff29\001\002\000\070\002\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\104\uffdb\107\uffdb\110\uffdb\143\uffdb\001\002\000\066" +
    "\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\013\uff96\014\uff96\015\uff96\020\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031" +
    "\uff96\032\uff96\033\uff96\104\uff96\107\uff96\110\uff96\143\uff96" +
    "\001\002\000\066\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\104\uffbe\107\uffbe" +
    "\110\uffbe\143\uffbe\001\002\000\006\103\u0146\104\uffb7\001" +
    "\002\000\014\035\120\103\uffb4\104\uffb4\111\u013c\112\u019d" +
    "\001\002\000\012\035\u0192\036\u0196\104\u0195\107\074\001" +
    "\002\000\012\035\uffa6\036\uffa6\104\uffa6\107\uffa6\001\002" +
    "\000\066\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011" +
    "\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e\020\uff9e\021\uff9e" +
    "\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\104\uff9e\107\uff9e\110\uff9e" +
    "\143\uff9e\001\002\000\066\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9" +
    "\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\104\uffa9" +
    "\107\uffa9\110\uffa9\143\uffa9\001\002\000\066\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d" +
    "\033\uff9d\104\uff9d\107\uff9d\110\uff9d\143\uff9d\001\002\000" +
    "\004\143\042\001\002\000\006\104\u0195\107\074\001\002" +
    "\000\066\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\104\uffaa\107\uffaa\110\uffaa" +
    "\143\uffaa\001\002\000\010\103\u019b\104\uff9f\107\uff9f\001" +
    "\002\000\012\103\ufffc\104\ufffc\105\045\107\ufffc\001\002" +
    "\000\004\143\042\001\002\000\012\103\ufffb\104\ufffb\105" +
    "\045\107\ufffb\001\002\000\034\004\072\005\054\006\077" +
    "\007\053\010\061\011\102\012\101\013\057\014\076\015" +
    "\064\021\114\113\u019e\143\042\001\002\000\012\035\uffa7" +
    "\036\uffa7\104\uffa7\107\uffa7\001\002\000\006\103\121\113" +
    "\u01a0\001\002\000\012\035\uffa8\036\uffa8\104\uffa8\107\uffa8" +
    "\001\002\000\056\035\276\061\uffff\062\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\067\uffff\103\uffff\104\uffff\110\uffff" +
    "\112\uffff\113\uffff\114\uffff\116\uffff\125\uffff\126\uffff\127" +
    "\uffff\130\uffff\131\uffff\132\uffff\143\uffff\001\002\000\066" +
    "\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\013\uff99\014\uff99\015\uff99\020\uff99\021\uff99\022\uff99" +
    "\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031" +
    "\uff99\032\uff99\033\uff99\104\uff99\107\uff99\110\uff99\143\uff99" +
    "\001\002\000\004\107\074\001\002\000\066\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a" +
    "\014\uff9a\015\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a" +
    "\033\uff9a\104\uff9a\107\uff9a\110\uff9a\143\uff9a\001\002\000" +
    "\060\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\143\uffd0\001\002\000\004\143" +
    "\u01b1\001\002\000\004\143\117\001\002\000\006\036\u0196" +
    "\107\074\001\002\000\066\004\uff9b\005\uff9b\006\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\104\uff9b" +
    "\107\uff9b\110\uff9b\143\uff9b\001\002\000\004\107\074\001" +
    "\002\000\066\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\030\uff9c\031\uff9c\032\uff9c\033\uff9c\104\uff9c\107\uff9c\110" +
    "\uff9c\143\uff9c\001\002\000\006\103\u0146\104\uffb8\001\002" +
    "\000\012\035\u0192\036\u0196\104\u0195\107\074\001\002\000" +
    "\066\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\014\uffab\015\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\032\uffab\033\uffab\104\uffab\107\uffab\110\uffab\143" +
    "\uffab\001\002\000\006\104\u0195\107\074\001\002\000\066" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\013\uffac\014\uffac\015\uffac\020\uffac\021\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\104\uffac\107\uffac\110\uffac\143\uffac" +
    "\001\002\000\010\034\u01b5\037\u01b2\107\uffd5\001\002\000" +
    "\030\004\072\005\054\006\077\007\053\010\061\011\102" +
    "\012\101\013\057\014\076\015\064\143\042\001\002\000" +
    "\004\107\uffd7\001\002\000\010\034\u01b5\103\u01b7\107\uffd8" +
    "\001\002\000\004\143\042\001\002\000\006\103\u019b\107" +
    "\uffc3\001\002\000\030\004\072\005\054\006\077\007\053" +
    "\010\061\011\102\012\101\013\057\014\076\015\064\143" +
    "\042\001\002\000\004\107\uffd9\001\002\000\010\034\uff93" +
    "\103\uff93\107\uff93\001\002\000\010\034\uff94\103\uff94\107" +
    "\uff94\001\002\000\036\002\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031" +
    "\uffe2\032\uffe2\033\uffe2\104\047\001\002\000\034\002\uffeb" +
    "\020\027\021\025\022\015\023\021\024\012\025\020\026" +
    "\024\027\016\030\013\031\032\032\007\033\026\001\002" +
    "\000\036\002\uffec\017\004\020\027\021\025\022\015\023" +
    "\021\024\012\025\020\026\024\027\016\030\013\031\032" +
    "\032\007\033\026\001\002\000\034\002\uffed\020\027\021" +
    "\025\022\015\023\021\024\012\025\020\026\024\027\016" +
    "\030\013\031\032\032\007\033\026\001\002\000\004\002" +
    "\001\001\002\000\010\034\u01b5\037\u01b2\107\uffd2\001\002" +
    "\000\010\034\u01b5\103\u01b7\107\uffd4\001\002\000\004\107" +
    "\uffd3\001\002\000\004\107\uffd6\001\002\000\006\104\044" +
    "\105\u01c6\001\002\000\040\002\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\104\047\001\002\000" +
    "\006\106\u01c7\143\046\001\002\000\004\104\044\001\002" +
    "\000\040\002\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\104\047\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01c6\000\032\002\034\003\013\004\022\005\033\006" +
    "\021\007\016\010\032\011\027\012\010\013\004\021\005" +
    "\063\007\001\001\000\004\121\u01c3\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u01a4\021\u01a5\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\u01bb\005\033\006\021\007\016" +
    "\010\u01bc\011\027\012\010\013\004\021\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\u01ba\001\001\000" +
    "\016\005\037\006\021\011\027\012\010\013\004\021\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\121\040" +
    "\001\001\000\002\001\001\000\022\004\036\005\033\006" +
    "\021\007\035\011\027\012\010\013\004\021\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\037\006\021\011\027\012\010\013\004\021\005" +
    "\001\001\000\002\001\001\000\004\060\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\070\011\027\012\050\013\004\016\065\020\067\021\005" +
    "\022\077\023\054\024\103\025\102\034\104\035\051\061" +
    "\066\072\055\073\057\074\061\121\072\143\062\001\001" +
    "\000\020\013\u01a4\021\u01a5\035\u01a7\072\055\073\057\074" +
    "\u01a6\121\072\001\001\000\006\030\u01a2\034\u01a1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\131\u01a0\001\001" +
    "\000\002\001\001\000\012\027\u0190\142\u018f\144\u018e\145" +
    "\u013a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\034\u018c\001\001\000\046\006\070\011\027\012\050\013" +
    "\004\020\u0178\021\005\022\077\023\054\024\103\025\102" +
    "\034\104\035\051\061\066\072\055\073\057\074\061\121" +
    "\072\143\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\142\034\145\036\173\037\143\040\127\041\163\042\130" +
    "\043\131\044\157\045\231\046\136\051\235\056\152\057" +
    "\156\062\210\070\133\072\137\073\057\074\201\075\147" +
    "\076\174\077\203\100\215\101\212\102\172\103\155\104" +
    "\144\105\166\106\161\111\153\112\140\113\167\114\151" +
    "\115\237\116\225\117\132\120\236\121\211\122\160\123" +
    "\221\124\234\125\165\126\162\127\230\133\135\134\142" +
    "\135\223\136\222\137\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\032\112\033\110\072\055\073\057\074\111\121\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\142\123" +
    "\001\001\000\002\001\001\000\012\072\055\073\057\074" +
    "\114\121\072\001\001\000\004\142\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\122\072\055\073\057\074\111\121\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\056\152\057\156\070\133\072\252\106\161" +
    "\115\u018a\116\225\117\132\120\236\121\254\122\160\123" +
    "\221\124\234\125\165\126\162\133\135\134\142\135\223" +
    "\136\222\137\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\056\152\057\156\070\133\072\252\106\161\115" +
    "\u0186\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\133\135\134\142\135\223\136" +
    "\222\137\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\106\056\152\057\156\070\133\072\252\075\147\076\174" +
    "\077\203\100\215\101\212\102\172\103\155\104\144\105" +
    "\166\106\161\111\153\112\140\113\167\114\151\115\237" +
    "\116\225\117\132\120\236\121\254\122\160\123\221\124" +
    "\234\125\165\126\162\127\u0181\133\135\134\142\135\223" +
    "\136\222\137\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\072\055\073\057\074\u017e\121" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\056\152\057\156\070\133\072\252\106" +
    "\161\115\u017d\116\225\117\132\120\236\121\254\122\160" +
    "\123\221\124\234\125\165\126\162\133\135\134\142\135" +
    "\223\136\222\137\220\001\001\000\002\001\001\000\054" +
    "\056\152\057\156\070\133\072\252\105\u017c\106\161\115" +
    "\272\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\133\135\134\142\135\223\136" +
    "\222\137\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\140\034\145\037\u016b\040\127\041\163\042\130" +
    "\043\131\044\157\045\231\046\136\051\235\056\152\057" +
    "\156\062\210\070\133\072\137\073\057\074\201\075\147" +
    "\076\174\077\203\100\215\101\212\102\172\103\155\104" +
    "\144\105\166\106\161\111\153\112\140\113\167\114\151" +
    "\115\237\116\225\117\132\120\236\121\211\122\160\123" +
    "\221\124\234\125\165\126\162\127\230\133\135\134\142" +
    "\135\223\136\222\137\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\130\034\145\040\u015b" +
    "\041\163\042\130\043\131\044\157\045\231\046\136\051" +
    "\235\056\152\057\156\070\133\072\252\075\147\076\174" +
    "\077\203\100\215\101\212\102\172\103\155\104\144\105" +
    "\166\106\161\111\153\112\140\113\167\114\151\115\237" +
    "\116\225\117\132\120\236\121\254\122\160\123\221\124" +
    "\234\125\165\126\162\127\230\133\135\134\142\135\223" +
    "\136\222\137\220\001\001\000\002\001\001\000\010\142" +
    "\u0139\144\u0138\145\u013a\001\001\000\106\056\152\057\156" +
    "\070\133\072\252\075\147\076\174\077\203\100\215\101" +
    "\212\102\172\103\155\104\144\105\166\106\161\111\153" +
    "\112\140\113\167\114\151\115\237\116\225\117\132\120" +
    "\236\121\254\122\160\123\221\124\234\125\165\126\162" +
    "\127\u0136\133\135\134\142\135\223\136\222\137\220\001" +
    "\001\000\002\001\001\000\004\034\u0125\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\056\u0119\072\252\116" +
    "\u011d\117\132\120\236\121\u011a\122\160\123\221\124\234" +
    "\125\165\126\162\133\135\134\u011c\135\223\136\222\137" +
    "\220\140\u011b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\047\340\056\152\057\156\070\133\072\252\076\174" +
    "\077\341\100\215\101\212\102\172\103\155\104\144\105" +
    "\166\106\161\111\153\112\140\113\167\114\151\115\272" +
    "\116\225\117\132\120\236\121\254\122\160\123\221\124" +
    "\234\125\165\126\162\133\135\134\142\135\223\136\222" +
    "\137\220\001\001\000\010\072\055\073\320\121\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\304\001\001\000\112\056\152\057\156\070" +
    "\133\072\243\075\147\076\174\077\203\100\215\101\212" +
    "\102\172\103\155\104\144\105\166\106\161\107\244\110" +
    "\246\111\153\112\140\113\167\114\151\115\237\116\225" +
    "\117\132\120\236\121\245\122\160\123\221\124\234\125" +
    "\165\126\162\127\247\133\135\134\142\135\223\136\222" +
    "\137\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\131\300\001\001\000\002\001\001\000\004\131\274" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\056" +
    "\152\070\133\072\252\106\251\116\225\117\132\120\236" +
    "\121\254\122\160\123\221\124\234\125\165\126\162\133" +
    "\135\134\142\135\223\136\222\137\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\056\152\057\156\070" +
    "\133\072\252\075\147\076\174\077\203\100\215\101\212" +
    "\102\172\103\155\104\144\105\166\106\161\111\153\112" +
    "\140\113\167\114\151\115\237\116\225\117\132\120\236" +
    "\121\254\122\160\123\221\124\234\125\165\126\162\127" +
    "\264\133\135\134\142\135\223\136\222\137\220\001\001" +
    "\000\002\001\001\000\106\056\152\057\156\070\133\072" +
    "\252\075\147\076\174\077\203\100\215\101\212\102\172" +
    "\103\155\104\144\105\166\106\161\111\153\112\140\113" +
    "\167\114\151\115\237\116\225\117\132\120\236\121\254" +
    "\122\160\123\221\124\234\125\165\126\162\127\262\133" +
    "\135\134\142\135\223\136\222\137\220\001\001\000\010" +
    "\124\257\125\165\126\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\056\152\057\156\070\133" +
    "\072\252\105\271\106\161\115\272\116\225\117\132\120" +
    "\236\121\254\122\160\123\221\124\234\125\165\126\162" +
    "\133\135\134\142\135\223\136\222\137\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\056\152\057\156\070" +
    "\133\072\252\105\277\106\161\115\272\116\225\117\132" +
    "\120\236\121\254\122\160\123\221\124\234\125\165\126" +
    "\162\133\135\134\142\135\223\136\222\137\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\104\056\152\057\156" +
    "\070\133\072\252\075\316\076\174\077\203\100\215\101" +
    "\212\102\172\103\155\104\144\105\166\106\161\111\153" +
    "\112\140\113\167\114\151\115\237\116\225\117\132\120" +
    "\236\121\254\122\160\123\221\124\234\125\165\126\162" +
    "\133\135\134\142\135\223\136\222\137\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\130\323\131\324\132\321\001" +
    "\001\000\002\001\001\000\106\056\152\057\156\070\133" +
    "\072\252\075\147\076\174\077\203\100\215\101\212\102" +
    "\172\103\155\104\144\105\166\106\161\111\153\112\140" +
    "\113\167\114\151\115\237\116\225\117\132\120\236\121" +
    "\254\122\160\123\221\124\234\125\165\126\162\127\336" +
    "\133\135\134\142\135\223\136\222\137\220\001\001\000" +
    "\006\131\335\132\334\001\001\000\002\001\001\000\110" +
    "\055\326\056\152\057\156\070\133\072\252\075\147\076" +
    "\174\077\203\100\215\101\212\102\172\103\155\104\144" +
    "\105\166\106\161\111\153\112\140\113\167\114\151\115" +
    "\237\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\127\330\133\135\134\142\135" +
    "\223\136\222\137\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\056\152\057\156\070" +
    "\133\072\252\075\147\076\174\077\203\100\215\101\212" +
    "\102\172\103\155\104\144\105\166\106\161\111\153\112" +
    "\140\113\167\114\151\115\237\116\225\117\132\120\236" +
    "\121\254\122\160\123\221\124\234\125\165\126\162\127" +
    "\333\133\135\134\142\135\223\136\222\137\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\056" +
    "\152\057\156\070\133\072\252\075\147\076\174\077\203" +
    "\100\215\101\212\102\172\103\155\104\144\105\166\106" +
    "\161\111\153\112\140\113\167\114\151\115\237\116\225" +
    "\117\132\120\236\121\254\122\160\123\221\124\234\125" +
    "\165\126\162\127\344\133\135\134\142\135\223\136\222" +
    "\137\220\001\001\000\002\001\001\000\130\034\145\040" +
    "\346\041\163\042\130\043\131\044\157\045\231\046\136" +
    "\051\235\056\152\057\156\070\133\072\252\075\147\076" +
    "\174\077\203\100\215\101\212\102\172\103\155\104\144" +
    "\105\166\106\161\111\153\112\140\113\167\114\151\115" +
    "\237\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\127\230\133\135\134\142\135" +
    "\223\136\222\137\220\001\001\000\002\001\001\000\130" +
    "\034\145\040\350\041\163\042\130\043\131\044\157\045" +
    "\231\046\136\051\235\056\152\057\156\070\133\072\252" +
    "\075\147\076\174\077\203\100\215\101\212\102\172\103" +
    "\155\104\144\105\166\106\161\111\153\112\140\113\167" +
    "\114\151\115\237\116\225\117\132\120\236\121\254\122" +
    "\160\123\221\124\234\125\165\126\162\127\230\133\135" +
    "\134\142\135\223\136\222\137\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\056\152\057" +
    "\156\070\133\072\252\075\147\076\174\077\203\100\215" +
    "\101\212\102\172\103\155\104\144\105\166\106\161\111" +
    "\153\112\140\113\167\114\151\115\237\116\225\117\132" +
    "\120\236\121\254\122\160\123\221\124\234\125\165\126" +
    "\162\127\357\133\135\134\142\135\223\136\222\137\220" +
    "\001\001\000\002\001\001\000\130\034\145\040\361\041" +
    "\163\042\130\043\131\044\157\045\231\046\136\051\235" +
    "\056\152\057\156\070\133\072\252\075\147\076\174\077" +
    "\203\100\215\101\212\102\172\103\155\104\144\105\166" +
    "\106\161\111\153\112\140\113\167\114\151\115\237\116" +
    "\225\117\132\120\236\121\254\122\160\123\221\124\234" +
    "\125\165\126\162\127\230\133\135\134\142\135\223\136" +
    "\222\137\220\001\001\000\002\001\001\000\074\056\152" +
    "\057\156\070\133\072\252\101\212\102\172\103\155\104" +
    "\363\105\166\106\161\111\153\112\140\113\167\114\151" +
    "\115\272\116\225\117\132\120\236\121\254\122\160\123" +
    "\221\124\234\125\165\126\162\133\135\134\142\135\223" +
    "\136\222\137\220\001\001\000\002\001\001\000\072\056" +
    "\152\057\156\070\133\072\252\101\212\102\172\103\365" +
    "\105\166\106\161\111\153\112\140\113\167\114\151\115" +
    "\272\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\133\135\134\142\135\223\136" +
    "\222\137\220\001\001\000\002\001\001\000\070\056\152" +
    "\057\156\070\133\072\252\101\212\102\367\105\166\106" +
    "\161\111\153\112\140\113\167\114\151\115\272\116\225" +
    "\117\132\120\236\121\254\122\160\123\221\124\234\125" +
    "\165\126\162\133\135\134\142\135\223\136\222\137\220" +
    "\001\001\000\002\001\001\000\066\056\152\057\156\070" +
    "\133\072\252\101\371\105\166\106\161\111\153\112\140" +
    "\113\167\114\151\115\272\116\225\117\132\120\236\121" +
    "\254\122\160\123\221\124\234\125\165\126\162\133\135" +
    "\134\142\135\223\136\222\137\220\001\001\000\002\001" +
    "\001\000\064\056\152\057\156\070\133\072\252\105\166" +
    "\106\161\111\153\112\140\113\167\114\u0117\115\272\116" +
    "\225\117\132\120\236\121\254\122\160\123\221\124\234" +
    "\125\165\126\162\133\135\134\142\135\223\136\222\137" +
    "\220\001\001\000\064\056\152\057\156\070\133\072\252" +
    "\105\166\106\161\111\153\112\140\113\167\114\374\115" +
    "\272\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\133\135\134\142\135\223\136" +
    "\222\137\220\001\001\000\002\001\001\000\062\056\152" +
    "\057\156\070\133\072\252\105\166\106\161\111\153\112" +
    "\140\113\u0116\115\272\116\225\117\132\120\236\121\254" +
    "\122\160\123\221\124\234\125\165\126\162\133\135\134" +
    "\142\135\223\136\222\137\220\001\001\000\062\056\152" +
    "\057\156\070\133\072\252\105\166\106\161\111\153\112" +
    "\140\113\u0115\115\272\116\225\117\132\120\236\121\254" +
    "\122\160\123\221\124\234\125\165\126\162\133\135\134" +
    "\142\135\223\136\222\137\220\001\001\000\062\056\152" +
    "\057\156\070\133\072\252\105\166\106\161\111\153\112" +
    "\140\113\u0114\115\272\116\225\117\132\120\236\121\254" +
    "\122\160\123\221\124\234\125\165\126\162\133\135\134" +
    "\142\135\223\136\222\137\220\001\001\000\012\072\055" +
    "\073\057\074\u0113\121\072\001\001\000\062\056\152\057" +
    "\156\070\133\072\252\105\166\106\161\111\153\112\140" +
    "\113\u0102\115\272\116\225\117\132\120\236\121\254\122" +
    "\160\123\221\124\234\125\165\126\162\133\135\134\142" +
    "\135\223\136\222\137\220\001\001\000\002\001\001\000" +
    "\060\056\152\057\156\070\133\072\252\105\166\106\161" +
    "\111\153\112\u0112\115\272\116\225\117\132\120\236\121" +
    "\254\122\160\123\221\124\234\125\165\126\162\133\135" +
    "\134\142\135\223\136\222\137\220\001\001\000\060\056" +
    "\152\057\156\070\133\072\252\105\166\106\161\111\153" +
    "\112\u0111\115\272\116\225\117\132\120\236\121\254\122" +
    "\160\123\221\124\234\125\165\126\162\133\135\134\142" +
    "\135\223\136\222\137\220\001\001\000\060\056\152\057" +
    "\156\070\133\072\252\105\166\106\161\111\153\112\u0106" +
    "\115\272\116\225\117\132\120\236\121\254\122\160\123" +
    "\221\124\234\125\165\126\162\133\135\134\142\135\223" +
    "\136\222\137\220\001\001\000\002\001\001\000\056\056" +
    "\152\057\156\070\133\072\252\105\166\106\161\111\u0110" +
    "\115\272\116\225\117\132\120\236\121\254\122\160\123" +
    "\221\124\234\125\165\126\162\133\135\134\142\135\223" +
    "\136\222\137\220\001\001\000\056\056\152\057\156\070" +
    "\133\072\252\105\166\106\161\111\u0109\115\272\116\225" +
    "\117\132\120\236\121\254\122\160\123\221\124\234\125" +
    "\165\126\162\133\135\134\142\135\223\136\222\137\220" +
    "\001\001\000\002\001\001\000\054\056\152\057\156\070" +
    "\133\072\252\105\u010f\106\161\115\272\116\225\117\132" +
    "\120\236\121\254\122\160\123\221\124\234\125\165\126" +
    "\162\133\135\134\142\135\223\136\222\137\220\001\001" +
    "\000\054\056\152\057\156\070\133\072\252\105\u010e\106" +
    "\161\115\272\116\225\117\132\120\236\121\254\122\160" +
    "\123\221\124\234\125\165\126\162\133\135\134\142\135" +
    "\223\136\222\137\220\001\001\000\054\056\152\057\156" +
    "\070\133\072\252\105\u010d\106\161\115\272\116\225\117" +
    "\132\120\236\121\254\122\160\123\221\124\234\125\165" +
    "\126\162\133\135\134\142\135\223\136\222\137\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\110\055\u011f\056\152\057\156\070" +
    "\133\072\252\075\147\076\174\077\203\100\215\101\212" +
    "\102\172\103\155\104\144\105\166\106\161\111\153\112" +
    "\140\113\167\114\151\115\237\116\225\117\132\120\236" +
    "\121\254\122\160\123\221\124\234\125\165\126\162\127" +
    "\330\133\135\134\142\135\223\136\222\137\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\052\u012b\053\u0129\054\u0127\067\u0128\001\001\000\004\034" +
    "\u0134\001\001\000\004\034\u0133\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\u012d\054" +
    "\u0127\067\u012c\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\072\055\073\057\074\u012f\121\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\110\056\152\057" +
    "\156\070\133\072\252\075\147\076\174\077\203\100\215" +
    "\101\212\102\172\103\155\104\144\105\166\106\161\111" +
    "\153\112\140\113\167\114\151\115\237\116\225\117\132" +
    "\120\236\121\254\122\160\123\221\124\234\125\165\126" +
    "\162\127\u013d\133\135\134\142\135\223\136\222\137\220" +
    "\141\u013e\001\001\000\112\026\u013f\056\152\057\156\070" +
    "\133\072\252\075\147\076\174\077\203\100\215\101\212" +
    "\102\172\103\155\104\144\105\166\106\161\111\153\112" +
    "\140\113\167\114\151\115\237\116\225\117\132\120\236" +
    "\121\254\122\160\123\221\124\234\125\165\126\162\127" +
    "\u013d\133\135\134\142\135\223\136\222\137\220\141\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\110\056\152" +
    "\057\156\070\133\072\252\075\147\076\174\077\203\100" +
    "\215\101\212\102\172\103\155\104\144\105\166\106\161" +
    "\111\153\112\140\113\167\114\151\115\237\116\225\117" +
    "\132\120\236\121\254\122\160\123\221\124\234\125\165" +
    "\126\162\127\u013d\133\135\134\142\135\223\136\222\137" +
    "\220\141\u0144\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\142\u0139\145\u0147\001\001\000\002\001\001\000" +
    "\002\001\001\000\122\050\u0149\051\u014b\056\152\057\156" +
    "\062\u014d\066\u014c\070\133\072\137\073\057\074\201\075" +
    "\147\076\174\077\203\100\215\101\212\102\172\103\155" +
    "\104\144\105\166\106\161\111\153\112\140\113\167\114" +
    "\151\115\237\116\225\117\132\120\236\121\211\122\160" +
    "\123\221\124\234\125\165\126\162\127\230\133\135\134" +
    "\142\135\223\136\222\137\220\001\001\000\110\056\152" +
    "\057\156\064\u0153\070\133\072\252\075\147\076\174\077" +
    "\203\100\215\101\212\102\172\103\155\104\144\105\166" +
    "\106\161\111\153\112\140\113\167\114\151\115\237\116" +
    "\225\117\132\120\236\121\254\122\160\123\221\124\234" +
    "\125\165\126\162\127\u0152\133\135\134\142\135\223\136" +
    "\222\137\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\110\051\u0150\056" +
    "\152\057\156\070\133\072\252\075\147\076\174\077\203" +
    "\100\215\101\212\102\172\103\155\104\144\105\166\106" +
    "\161\111\153\112\140\113\167\114\151\115\237\116\225" +
    "\117\132\120\236\121\254\122\160\123\221\124\234\125" +
    "\165\126\162\127\230\133\135\134\142\135\223\136\222" +
    "\137\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\114\051\u014b\056\152" +
    "\057\156\065\u0156\066\u0155\070\133\072\252\075\147\076" +
    "\174\077\203\100\215\101\212\102\172\103\155\104\144" +
    "\105\166\106\161\111\153\112\140\113\167\114\151\115" +
    "\237\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\127\230\133\135\134\142\135" +
    "\223\136\222\137\220\001\001\000\130\034\145\040\u0159" +
    "\041\163\042\130\043\131\044\157\045\231\046\136\051" +
    "\235\056\152\057\156\070\133\072\252\075\147\076\174" +
    "\077\203\100\215\101\212\102\172\103\155\104\144\105" +
    "\166\106\161\111\153\112\140\113\167\114\151\115\237" +
    "\116\225\117\132\120\236\121\254\122\160\123\221\124" +
    "\234\125\165\126\162\127\230\133\135\134\142\135\223" +
    "\136\222\137\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\130\034\145\040\u0158\041\163\042\130\043\131" +
    "\044\157\045\231\046\136\051\235\056\152\057\156\070" +
    "\133\072\252\075\147\076\174\077\203\100\215\101\212" +
    "\102\172\103\155\104\144\105\166\106\161\111\153\112" +
    "\140\113\167\114\151\115\237\116\225\117\132\120\236" +
    "\121\254\122\160\123\221\124\234\125\165\126\162\127" +
    "\230\133\135\134\142\135\223\136\222\137\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\056\152\057\156" +
    "\070\133\072\252\075\147\076\174\077\203\100\215\101" +
    "\212\102\172\103\155\104\144\105\166\106\161\111\153" +
    "\112\140\113\167\114\151\115\237\116\225\117\132\120" +
    "\236\121\254\122\160\123\221\124\234\125\165\126\162" +
    "\127\u015e\133\135\134\142\135\223\136\222\137\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\106\056\152\057\156\070\133\072\252\075\147\076" +
    "\174\077\203\100\215\101\212\102\172\103\155\104\144" +
    "\105\166\106\161\111\153\112\140\113\167\114\151\115" +
    "\237\116\225\117\132\120\236\121\254\122\160\123\221" +
    "\124\234\125\165\126\162\127\u0162\133\135\134\142\135" +
    "\223\136\222\137\220\001\001\000\002\001\001\000\004" +
    "\034\u0164\001\001\000\002\001\001\000\106\056\152\057" +
    "\156\070\133\072\252\075\147\076\174\077\203\100\215" +
    "\101\212\102\172\103\155\104\144\105\166\106\161\111" +
    "\153\112\140\113\167\114\151\115\237\116\225\117\132" +
    "\120\236\121\254\122\160\123\221\124\234\125\165\126" +
    "\162\127\u0168\133\135\134\142\135\223\136\222\137\220" +
    "\001\001\000\076\056\152\057\156\070\133\072\252\100" +
    "\u0167\101\212\102\172\103\155\104\144\105\166\106\161" +
    "\111\153\112\140\113\167\114\151\115\272\116\225\117" +
    "\132\120\236\121\254\122\160\123\221\124\234\125\165" +
    "\126\162\133\135\134\142\135\223\136\222\137\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\056\152" +
    "\057\156\070\133\072\252\076\174\077\u016a\100\215\101" +
    "\212\102\172\103\155\104\144\105\166\106\161\111\153" +
    "\112\140\113\167\114\151\115\272\116\225\117\132\120" +
    "\236\121\254\122\160\123\221\124\234\125\165\126\162" +
    "\133\135\134\142\135\223\136\222\137\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\056\152\057\156\070\133\072\252\075\147\076\174\077" +
    "\203\100\215\101\212\102\172\103\155\104\144\105\166" +
    "\106\161\111\153\112\140\113\167\114\151\115\237\116" +
    "\225\117\132\120\236\121\254\122\160\123\221\124\234" +
    "\125\165\126\162\127\u016e\133\135\134\142\135\223\136" +
    "\222\137\220\001\001\000\002\001\001\000\130\034\145" +
    "\040\u0170\041\163\042\130\043\131\044\157\045\231\046" +
    "\136\051\235\056\152\057\156\070\133\072\252\075\147" +
    "\076\174\077\203\100\215\101\212\102\172\103\155\104" +
    "\144\105\166\106\161\111\153\112\140\113\167\114\151" +
    "\115\237\116\225\117\132\120\236\121\254\122\160\123" +
    "\221\124\234\125\165\126\162\127\230\133\135\134\142" +
    "\135\223\136\222\137\220\001\001\000\002\001\001\000" +
    "\112\026\u0172\056\152\057\156\070\133\072\252\075\147" +
    "\076\174\077\203\100\215\101\212\102\172\103\155\104" +
    "\144\105\166\106\161\111\153\112\140\113\167\114\151" +
    "\115\237\116\225\117\132\120\236\121\254\122\160\123" +
    "\221\124\234\125\165\126\162\127\u013d\133\135\134\142" +
    "\135\223\136\222\137\220\141\u0141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\006\070" +
    "\011\027\012\050\013\004\016\u0176\020\067\021\005\022" +
    "\077\023\054\024\103\025\102\034\104\035\051\061\066" +
    "\072\055\073\057\074\061\121\072\143\062\001\001\000" +
    "\046\006\070\011\027\012\050\013\004\020\u0178\021\005" +
    "\022\077\023\054\024\103\025\102\034\104\035\051\061" +
    "\066\072\055\073\057\074\061\121\072\143\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\142\u0139\144\u017f\145\u013a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\056\152\057\156\070\133\072\252\075" +
    "\147\076\174\077\203\100\215\101\212\102\172\103\155" +
    "\104\144\105\166\106\161\111\153\112\140\113\167\114" +
    "\151\115\237\116\225\117\132\120\236\121\254\122\160" +
    "\123\221\124\234\125\165\126\162\127\u0184\133\135\134" +
    "\142\135\223\136\222\137\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\u0196\031\u0193\034\u0192" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\u0198\121\u0199\001\001" +
    "\000\006\031\u0197\034\u0192\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\121\u019b\001\001" +
    "\000\002\001\001\000\016\032\u019e\033\110\072\055\073" +
    "\057\074\111\121\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\u01a3\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\027\u01ac\142\u018f\144" +
    "\u01ab\145\u013a\001\001\000\006\030\u01a9\034\u01a8\001\001" +
    "\000\002\001\001\000\004\034\u01aa\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\030\u01ae\031\u01ad\034\u0192" +
    "\001\001\000\002\001\001\000\006\031\u01af\034\u0192\001" +
    "\001\000\002\001\001\000\006\014\u01b3\015\u01b2\001\001" +
    "\000\010\072\055\073\u01b9\121\072\001\001\000\002\001" +
    "\001\000\004\015\u01b7\001\001\000\006\017\u01b5\121\u0199" +
    "\001\001\000\002\001\001\000\010\072\055\073\u01b8\121" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\037\006\021\011" +
    "\027\012\010\013\004\021\005\001\001\000\022\004\u01bd" +
    "\005\033\006\021\007\035\011\027\012\010\013\004\021" +
    "\005\001\001\000\016\005\037\006\021\011\027\012\010" +
    "\013\004\021\005\001\001\000\002\001\001\000\006\014" +
    "\u01c0\015\u01c1\001\001\000\004\015\u01c2\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\u01c4\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\u01c7\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalisadorSintaticoGen$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalisadorSintaticoGen$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalisadorSintaticoGen$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Util util = new Util();
    public String resultado = "";
    public static LinkedList<TError> TabelaERSintatico = new  LinkedList<TError>();


    public void syntaxError(Symbol symbol){

        String lexema = symbol.value.toString();
        int linha = symbol.right;
        int coluna = symbol.left;
        
        System.out.println("Erro sintatico!");
        System.out.println("\tLexema:   " + lexema);
        System.out.println("\tLinha: " + linha);
        System.out.println("\tColuna: " + coluna);



        TError dados = new TError(lexema, linha, coluna, "Erro Sintatico",  "Caractere nao reconhecido!");
        TabelaERSintatico.add(dados);   
    }

    public void unrecoveredSyntaxError(Symbol symbol) throws java.lang.Exception{
        String lexema = symbol.value.toString();
        int linha = symbol.right;
        int coluna = symbol.left;

        System.out.println("Erro sintatico irrecuperavel!");
        System.out.println("\tLexema:   " + lexema);
        System.out.println("\tLinha: " + linha);
        System.out.println("\tColuna: " + coluna);

        TError dados = new TError(lexema, linha, coluna, "Erro Sintatico",  "Caractere nao reconhecido!");
        TabelaERSintatico.add(dados);
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$AnalisadorSintaticoGen$actions {



	ArmazenadorVariavel armazemVar = new ArmazenadorVariavel();





  private final AnalisadorSintaticoGen parser;

  /** Constructor */
  CUP$AnalisadorSintaticoGen$actions(AnalisadorSintaticoGen parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintaticoGen$do_action_part00000000(
    int                        CUP$AnalisadorSintaticoGen$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintaticoGen$parser,
    java.util.Stack            CUP$AnalisadorSintaticoGen$stack,
    int                        CUP$AnalisadorSintaticoGen$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalisadorSintaticoGen$result;

      /* select the action based on the action number */
      switch (CUP$AnalisadorSintaticoGen$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		RESULT = start_val;
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalisadorSintaticoGen$parser.done_parsing();
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TypeSpecifier ::= TypeName 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",58, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TypeSpecifier ::= TypeName Dims 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type + val; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeSpecifier",58, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TypeName ::= PrimitiveType 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeName",57, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TypeName ::= QualifiedName 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeName",57, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassNameList ::= QualifiedName 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassNameList",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassNameList ::= ClassNameList COMMA QualifiedName 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassNameList",13, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PrimitiveType ::= BOOLEAN 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "boolean"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PrimitiveType ::= CHAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "char"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PrimitiveType ::= BYTE 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "byte"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PrimitiveType ::= SHORT 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "short"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PrimitiveType ::= INT 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "int"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PrimitiveType ::= LONG 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "long"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PrimitiveType ::= FLOAT 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "float"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PrimitiveType ::= DOUBLE 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "double"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PrimitiveType ::= VOID 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "void"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PrimitiveType ::= STRGN 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = "String"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveType",56, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SemiColons ::= SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SemiColons",46, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SemiColons ::= SemiColons SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SemiColons",46, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CompilationUnit ::= ProgramFile 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("CompilationUnit",49, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ProgramFile ::= PackageStatement ImportStatements TypeDeclarations 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ProgramFile ::= PackageStatement ImportStatements 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ProgramFile ::= PackageStatement TypeDeclarations 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ProgramFile ::= ImportStatements TypeDeclarations 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ProgramFile ::= PackageStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ProgramFile ::= ImportStatements 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ProgramFile ::= TypeDeclarations 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ProgramFile",0, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PackageStatement ::= PACKAGE QualifiedName SemiColons 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PackageStatement",1, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TypeDeclarations ::= TypeDeclarationOptSemi 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeDeclarations",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TypeDeclarations ::= TypeDeclarations TypeDeclarationOptSemi 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeDeclarations",2, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TypeDeclarationOptSemi ::= TypeDeclaration 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeDeclarationOptSemi",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TypeDeclarationOptSemi ::= TypeDeclaration SemiColons 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeDeclarationOptSemi",3, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ImportStatements ::= ImportStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ImportStatements",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ImportStatements ::= ImportStatements ImportStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ImportStatements",6, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ImportStatement ::= IMPORT QualifiedName SemiColons 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ImportStatement",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ImportStatement ::= IMPORT QualifiedName DOT MULT SemiColons 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ImportStatement",5, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // QualifiedName ::= IDENTIFIER 
            {
              String RESULT =null;
		int lexvalleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int lexvalright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String lexval = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = lexval; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("QualifiedName",79, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // QualifiedName ::= QualifiedName DOT IDENTIFIER 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int lexvalleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int lexvalright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String lexval = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = (val + "." + lexval); 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("QualifiedName",79, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TypeDeclaration ::= ClassHeader OPENKEYS FieldDeclarations CLOSEKEYS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TypeDeclaration ::= ClassHeader OPENKEYS CLOSEKEYS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",4, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ClassHeader ::= Modifiers ClassWord IDENTIFIER Extends Interfaces 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassHeader ::= Modifiers ClassWord IDENTIFIER Extends 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassHeader ::= Modifiers ClassWord IDENTIFIER Interfaces 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ClassHeader ::= ClassWord IDENTIFIER Extends Interfaces 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ClassHeader ::= Modifiers ClassWord IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ClassHeader ::= ClassWord IDENTIFIER Extends 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ClassHeader ::= ClassWord IDENTIFIER Interfaces 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ClassHeader ::= ClassWord IDENTIFIER 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassHeader",7, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Modifiers ::= Modifier 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifiers",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Modifiers ::= Modifiers Modifier 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifiers",8, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Modifier ::= ABSTRACT 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Modifier ::= FINAL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Modifier ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Modifier ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Modifier ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Modifier ::= STATIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Modifier ::= TRANSIENT 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Modifier ::= VOLATILE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Modifier ::= NATIVE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Modifier ::= SYNCHRONIZED 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Modifier",9, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ClassWord ::= CLASS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassWord",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ClassWord ::= INTERFACE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassWord",15, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Interfaces ::= IMPLEMENTS ClassNameList 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Interfaces",11, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FieldDeclarations ::= FieldDeclarationOptSemi 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FieldDeclarations ::= FieldDeclarations FieldDeclarationOptSemi 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",12, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FieldDeclarationOptSemi ::= FieldDeclaration 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclarationOptSemi",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FieldDeclarationOptSemi ::= FieldDeclaration SemiColons 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclarationOptSemi",14, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FieldDeclaration ::= FieldVariableDeclaration SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FieldDeclaration ::= MethodDeclaration 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FieldDeclaration ::= ConstructorDeclaration 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FieldDeclaration ::= StaticInitializer 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FieldDeclaration ::= NonStaticInitializer 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FieldDeclaration ::= TypeDeclaration 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",16, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FieldVariableDeclaration ::= Modifiers TypeSpecifier VariableDeclarators 
            {
              Variavel RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Variavel var1 = (Variavel)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(armazemVar.containsVariavel(var1.getNome())){
																		System.out.println("ERRO SEMANTICO, O NOME DE VARIAVEL " + var1.getNome() + " JA ESTA SENDO USADO");
																	} else {
																		if(var1.getTipo() == null || var1.getTipo().equals(type)){
																			Variavel var = new Variavel(var1.getNome(), type);
																			armazemVar.addVariavel(var);
																			RESULT = var;
																		} else {
																			System.out.println("ERRO SEMANTICO, O TIPO DA EXPRESSAO EH DIFERENTE DO TIPO DA VARIAVEL");
																		}
																	}
																 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldVariableDeclaration",97, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FieldVariableDeclaration ::= TypeSpecifier VariableDeclarators 
            {
              Variavel RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Variavel var1 = (Variavel)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(armazemVar.containsVariavel(var1.getNome())){
																		System.out.println("ERRO SEMANTICO, O NOME DE VARIAVEL " + var1.getNome() + " JA ESTA SENDO USADO");
																	} else {
																		if(var1.getTipo() == null || var1.getTipo().equals(type)){
																			Variavel var = new Variavel(var1.getNome(), type);
																			armazemVar.addVariavel(var);
																			RESULT = var;
																		} else {
																			System.out.println("ERRO SEMANTICO, O TIPO DA EXPRESSAO EH DIFERENTE DO TIPO DA VARIAVEL");
																		}
																	}
																 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldVariableDeclaration",97, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VariableDeclarators ::= VariableDeclarator 
            {
              Variavel RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		Variavel var = (Variavel)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = var; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("VariableDeclarators",98, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VariableDeclarators ::= VariableDeclarators COMMA VariableDeclarator 
            {
              Variavel RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("VariableDeclarators",98, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VariableDeclarator ::= DeclaratorName 
            {
              Variavel RESULT =null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = new Variavel(varname, null); 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("VariableDeclarator",99, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VariableDeclarator ::= DeclaratorName EQU VariableInitializer 
            {
              Variavel RESULT =null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = new Variavel(varname, type); 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("VariableDeclarator",99, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VariableInitializer ::= Expression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("VariableInitializer",95, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VariableInitializer ::= OPENKEYS CLOSEKEYS 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("VariableInitializer",95, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VariableInitializer ::= OPENKEYS ArrayInitializers CLOSEKEYS 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("VariableInitializer",95, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ArrayInitializers ::= VariableInitializer 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayInitializers",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ArrayInitializers ::= ArrayInitializers COMMA VariableInitializer 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayInitializers",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ArrayInitializers ::= ArrayInitializers COMMA 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayInitializers",20, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // MethodDeclaration ::= Modifiers TypeSpecifier MethodDeclarator Throws MethodBody 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // MethodDeclaration ::= Modifiers TypeSpecifier MethodDeclarator MethodBody 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MethodDeclaration ::= TypeSpecifier MethodDeclarator Throws MethodBody 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MethodDeclaration ::= TypeSpecifier MethodDeclarator MethodBody 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",17, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MethodDeclarator ::= DeclaratorName OPENPAR ParameterList CLOSEPAR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MethodDeclarator ::= DeclaratorName OPENPAR CLOSEPAR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MethodDeclarator ::= MethodDeclarator OP_DIM 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodDeclarator",21, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ParameterList ::= Parameter 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ParameterList",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ParameterList ::= ParameterList COMMA Parameter 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ParameterList",24, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Parameter ::= TypeSpecifier DeclaratorName 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Parameter",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Parameter ::= FINAL TypeSpecifier DeclaratorName 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Parameter",25, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DeclaratorName ::= IDENTIFIER 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = name; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("DeclaratorName",96, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DeclaratorName ::= DeclaratorName OP_DIM 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		 RESULT = name; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("DeclaratorName",96, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Throws ::= THROWS ClassNameList 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Throws",22, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // MethodBody ::= Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodBody",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MethodBody ::= SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodBody",23, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ConstructorDeclaration ::= Modifiers ConstructorDeclarator Throws Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ConstructorDeclaration ::= Modifiers ConstructorDeclarator Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ConstructorDeclaration ::= ConstructorDeclarator Throws Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ConstructorDeclaration ::= ConstructorDeclarator Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConstructorDeclaration",18, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ConstructorDeclarator ::= IDENTIFIER OPENPAR ParameterList CLOSEPAR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConstructorDeclarator",27, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ConstructorDeclarator ::= IDENTIFIER OPENPAR CLOSEPAR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConstructorDeclarator",27, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // StaticInitializer ::= STATIC Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("StaticInitializer",19, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NonStaticInitializer ::= Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("NonStaticInitializer",47, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Extends ::= EXTENDS TypeName 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Extends ::= Extends COMMA TypeName 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Extends",10, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Block ::= OPENKEYS LocalVariableDeclarationsAndStatements CLOSEKEYS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Block",26, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Block ::= OPENKEYS CLOSEKEYS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Block",26, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // LocalVariableDeclarationsAndStatements ::= LocalVariableDeclarationOrStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationsAndStatements",28, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // LocalVariableDeclarationsAndStatements ::= LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationsAndStatements",28, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // LocalVariableDeclarationOrStatement ::= LocalVariableDeclarationStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationOrStatement",29, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // LocalVariableDeclarationOrStatement ::= Statement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationOrStatement",29, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // LocalVariableDeclarationStatement ::= TypeSpecifier VariableDeclarators SEMIC 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int var1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		Variavel var1 = (Variavel)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		 if(armazemVar.containsVariavel(var1.getNome())){
																		System.out.println("ERRO SEMANTICO, O NOME DE VARIAVEL " + var1.getNome() + " JA ESTA SENDO USADO");
																	} else {
																		if(var1.getTipo() == null || var1.getTipo().equals(type)){
																			Variavel var = new Variavel(var1.getNome(), type);
																			armazemVar.addVariavel(var);
																			RESULT = var;
																		} else {
																			System.out.println("ERRO SEMANTICO, O TIPO DA EXPRESSAO EH DIFERENTE DO TIPO DA VARIAVEL: " + type + " " + var1.getTipo());
																		}
																	}
																 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationStatement",48, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // LocalVariableDeclarationStatement ::= FINAL TypeSpecifier VariableDeclarators SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LocalVariableDeclarationStatement",48, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Statement ::= EmptyStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Statement ::= LabelStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Statement ::= ExpressionStatement SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Statement ::= SelectionStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Statement ::= IterationStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Statement ::= JumpStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Statement ::= GuardingStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Statement ::= Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Statement",30, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EmptyStatement ::= SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("EmptyStatement",31, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // LabelStatement ::= IDENTIFIER COLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LabelStatement",32, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // LabelStatement ::= CASE ConstantExpression COLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LabelStatement",32, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // LabelStatement ::= DEFAULT COLON 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LabelStatement",32, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ExpressionStatement ::= Expression 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ExpressionStatement",39, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SelectionStatement ::= IF OPENPAR Expression CLOSEPAR Statement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SelectionStatement",33, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SelectionStatement ::= IF OPENPAR Expression CLOSEPAR Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SelectionStatement",33, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SelectionStatement ::= SWITCH OPENPAR Expression CLOSEPAR Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SelectionStatement",33, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // IterationStatement ::= WHILE OPENPAR Expression CLOSEPAR Statement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("IterationStatement",34, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IterationStatement ::= DO Statement WHILE OPENPAR Expression CLOSEPAR SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("IterationStatement",34, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // IterationStatement ::= FOR OPENPAR ForInit ForExpr ForIncr CLOSEPAR Statement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("IterationStatement",34, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-6)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // IterationStatement ::= FOR OPENPAR ForInit ForExpr CLOSEPAR Statement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("IterationStatement",34, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-5)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ForInit ::= ExpressionStatements SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ForInit",38, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ForInit ::= LocalVariableDeclarationStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ForInit",38, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ForInit ::= SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ForInit",38, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ForExpr ::= Expression SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ForExpr",50, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ForExpr ::= SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ForExpr",50, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ForIncr ::= ExpressionStatements 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ForIncr",51, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ExpressionStatements ::= ExpressionStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ExpressionStatements",52, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ExpressionStatements ::= ExpressionStatements COMMA ExpressionStatement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ExpressionStatements",52, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // JumpStatement ::= BREAK IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("JumpStatement",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // JumpStatement ::= BREAK SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("JumpStatement",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // JumpStatement ::= CONTINUE IDENTIFIER SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("JumpStatement",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // JumpStatement ::= CONTINUE SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("JumpStatement",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // JumpStatement ::= RETURN Expression SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("JumpStatement",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // JumpStatement ::= RETURN SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("JumpStatement",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // JumpStatement ::= THROW Expression SEMIC 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("JumpStatement",35, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // GuardingStatement ::= SYNCHRONIZED OPENPAR Expression OPENPAR Statement 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("GuardingStatement",36, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // GuardingStatement ::= TRY Block Finally 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("GuardingStatement",36, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // GuardingStatement ::= TRY Block Catches 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("GuardingStatement",36, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // GuardingStatement ::= TRY Block Catches Finally 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("GuardingStatement",36, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Catches ::= Catch 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Catches",40, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Catches ::= Catches Catch 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Catches",40, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Catch ::= CatchHeader Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Catch",53, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CatchHeader ::= CATCH OPENPAR TypeSpecifier IDENTIFIER CLOSEPAR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("CatchHeader",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CatchHeader ::= CATCH OPENPAR TypeSpecifier CLOSEPAR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("CatchHeader",42, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Finally ::= FINALLY Block 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Finally",41, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // PrimaryExpression ::= QualifiedName 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = name; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",78, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // PrimaryExpression ::= NotJustName 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = name; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimaryExpression",78, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NotJustName ::= SpecialName 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("NotJustName",80, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NotJustName ::= NewAllocationExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("NotJustName",80, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // NotJustName ::= ComplexPrimary 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("NotJustName",80, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ComplexPrimary ::= OPENPAR Expression CLOSEPAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ComplexPrimary",89, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ComplexPrimary ::= ComplexPrimaryNoParenthesis 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ComplexPrimary",89, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ComplexPrimaryNoParenthesis ::= LITERAL 
            {
              String RESULT =null;
		int lexvalleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int lexvalright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String lexval = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(lexval.contains("'")){
								RESULT = "char";
							}else if(lexval.contains("\"")){
								RESULT = "String";
							}else if(lexval.contains(".")){
								RESULT = "double";
							} else {
								RESULT = "int";
							}  
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",90, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ComplexPrimaryNoParenthesis ::= BOOLLIT 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",90, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ComplexPrimaryNoParenthesis ::= ArrayAccess 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",90, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ComplexPrimaryNoParenthesis ::= FieldAccess 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",90, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ComplexPrimaryNoParenthesis ::= MethodCall 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ComplexPrimaryNoParenthesis",90, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // ArrayAccess ::= QualifiedName OPENBRAC Expression CLOSEBRAC 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayAccess",91, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ArrayAccess ::= ComplexPrimary OPENBRAC Expression CLOSEBRAC 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayAccess",91, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // FieldAccess ::= NotJustName DOT IDENTIFIER 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldAccess",92, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // FieldAccess ::= RealPostfixExpression DOT IDENTIFIER 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldAccess",92, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // FieldAccess ::= QualifiedName DOT THIS 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldAccess",92, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FieldAccess ::= QualifiedName DOT CLASS 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldAccess",92, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FieldAccess ::= PrimitiveType DOT CLASS 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("FieldAccess",92, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // MethodCall ::= DOT MethodAccess OPENPAR ArgumentList CLOSEPAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodCall",93, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // MethodCall ::= DOT MethodAccess OPENPAR CLOSEPAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodCall",93, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // MethodAccess ::= ComplexPrimaryNoParenthesis 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodAccess",94, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // MethodAccess ::= SpecialName 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodAccess",94, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // MethodAccess ::= QualifiedName 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MethodAccess",94, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // SpecialName ::= THIS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SpecialName",44, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // SpecialName ::= SUPER 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SpecialName",44, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // SpecialName ::= JNULL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("SpecialName",44, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // ArgumentList ::= Expression 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArgumentList",43, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ArgumentList ::= ArgumentList COMMA Expression 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArgumentList",43, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // NewAllocationExpression ::= PlainNewAllocationExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("NewAllocationExpression",81, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // NewAllocationExpression ::= QualifiedName DOT PlainNewAllocationExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("NewAllocationExpression",81, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // PlainNewAllocationExpression ::= ArrayAllocationExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PlainNewAllocationExpression",82, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // PlainNewAllocationExpression ::= ClassAllocationExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PlainNewAllocationExpression",82, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // PlainNewAllocationExpression ::= ArrayAllocationExpression OPENKEYS CLOSEKEYS 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PlainNewAllocationExpression",82, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // PlainNewAllocationExpression ::= ClassAllocationExpression OPENKEYS CLOSEKEYS 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PlainNewAllocationExpression",82, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // PlainNewAllocationExpression ::= ArrayAllocationExpression OPENKEYS ArrayInitializers CLOSEKEYS 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PlainNewAllocationExpression",82, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // PlainNewAllocationExpression ::= ClassAllocationExpression OPENKEYS FieldDeclarations CLOSEKEYS 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PlainNewAllocationExpression",82, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ClassAllocationExpression ::= NEW TypeName OPENPAR ArgumentList CLOSEPAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassAllocationExpression",84, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // ClassAllocationExpression ::= NEW TypeName OPENPAR CLOSEPAR 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassAllocationExpression",84, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // ArrayAllocationExpression ::= NEW TypeName DimExprs Dims 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String t3 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = t1 + t2 + t3; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayAllocationExpression",83, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // ArrayAllocationExpression ::= NEW TypeName DimExprs 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = t1 + t2; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayAllocationExpression",83, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // ArrayAllocationExpression ::= NEW TypeName Dims 
            {
              String RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String t1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String t2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = t1 + t2; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArrayAllocationExpression",83, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // DimExprs ::= DimExpr 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = val ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("DimExprs",86, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // DimExprs ::= DimExprs DimExpr 
            {
              String RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String val1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String val2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = val1 + val2 ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("DimExprs",86, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // DimExpr ::= OPENBRAC Expression CLOSEBRAC 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		 RESULT = "[" + type + "]" ; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("DimExpr",88, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Dims ::= OP_DIM 
            {
              String RESULT =null;
		 RESULT = "[]"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Dims",87, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Dims ::= Dims OP_DIM 
            {
              String RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		 RESULT = val + "[]"; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Dims",87, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // PostfixExpression ::= PrimaryExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PostfixExpression",76, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // PostfixExpression ::= RealPostfixExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PostfixExpression",76, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // RealPostfixExpression ::= PostfixExpression OP_INC 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RealPostfixExpression",77, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // RealPostfixExpression ::= PostfixExpression OP_DEC 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RealPostfixExpression",77, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // UnaryExpression ::= OP_INC UnaryExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("UnaryExpression",75, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // UnaryExpression ::= OP_DEC UnaryExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("UnaryExpression",75, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // UnaryExpression ::= ArithmeticUnaryOperator CastExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("UnaryExpression",75, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // UnaryExpression ::= LogicalUnaryExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("UnaryExpression",75, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // LogicalUnaryExpression ::= PostfixExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LogicalUnaryExpression",68, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // LogicalUnaryExpression ::= LogicalUnaryOperator UnaryExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LogicalUnaryExpression",68, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // LogicalUnaryOperator ::= TIL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LogicalUnaryOperator",54, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // LogicalUnaryOperator ::= NE 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("LogicalUnaryOperator",54, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // ArithmeticUnaryOperator ::= PLUS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArithmeticUnaryOperator",45, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // ArithmeticUnaryOperator ::= MINUS 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ArithmeticUnaryOperator",45, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CastExpression ::= UnaryExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("CastExpression",67, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CastExpression ::= OPENPAR PrimitiveTypeExpression CLOSEPAR CastExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("CastExpression",67, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CastExpression ::= OPENPAR ClassTypeExpression CLOSEPAR CastExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("CastExpression",67, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CastExpression ::= OPENPAR Expression CLOSEPAR LogicalUnaryExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("CastExpression",67, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-3)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // PrimitiveTypeExpression ::= PrimitiveType 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveTypeExpression",69, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // PrimitiveTypeExpression ::= PrimitiveType Dims 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("PrimitiveTypeExpression",69, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // ClassTypeExpression ::= QualifiedName Dims 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ClassTypeExpression",70, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-1)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // MultiplicativeExpression ::= CastExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",71, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // MultiplicativeExpression ::= MultiplicativeExpression MULT CastExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if (util.verificaExpressaoAritimetica(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaExpressaoAritimetica(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",71, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // MultiplicativeExpression ::= MultiplicativeExpression DIV CastExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if (util.verificaExpressaoAritimetica(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaExpressaoAritimetica(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",71, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // MultiplicativeExpression ::= MultiplicativeExpression MOD CastExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if (util.verificaExpressaoAritimetica(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaExpressaoAritimetica(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpression",71, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // AdditiveExpression ::= MultiplicativeExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",72, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // AdditiveExpression ::= AdditiveExpression PLUS MultiplicativeExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if (util.verificaExpressaoAritimetica(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaExpressaoAritimetica(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",72, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // AdditiveExpression ::= AdditiveExpression MINUS MultiplicativeExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if (util.verificaExpressaoAritimetica(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaExpressaoAritimetica(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AdditiveExpression",72, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // ShiftExpression ::= AdditiveExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ShiftExpression",73, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // ShiftExpression ::= ShiftExpression OP_SHL AdditiveExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ShiftExpression",73, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // ShiftExpression ::= ShiftExpression OP_SHR AdditiveExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ShiftExpression",73, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // ShiftExpression ::= ShiftExpression OP_SHRR AdditiveExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ShiftExpression",73, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // RelationalExpression ::= ShiftExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RelationalExpression",74, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // RelationalExpression ::= RelationalExpression LTHEN ShiftExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		  
                                                                        if (util.verificaTiposNumericos(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaTiposNumericos(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RelationalExpression",74, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // RelationalExpression ::= RelationalExpression BTHEN ShiftExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		  
                                                                        if (util.verificaTiposNumericos(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaTiposNumericos(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RelationalExpression",74, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // RelationalExpression ::= RelationalExpression OP_LE ShiftExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 
                                                                        if (util.verificaTiposNumericos(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaTiposNumericos(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RelationalExpression",74, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // RelationalExpression ::= RelationalExpression OP_GE ShiftExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		  
                                                                        if (util.verificaTiposNumericos(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaTiposNumericos(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RelationalExpression",74, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // RelationalExpression ::= RelationalExpression INSTANCEOF TypeSpecifier 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("RelationalExpression",74, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // EqualityExpression ::= RelationalExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("EqualityExpression",63, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // EqualityExpression ::= EqualityExpression OP_EQ RelationalExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		  if (type1.equals(type2)){ RESULT = type1;}
                                                                        if (util.verificaTiposNumericos(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaTiposNumericos(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("EqualityExpression",63, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // EqualityExpression ::= EqualityExpression OP_NE RelationalExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		  if (type1.equals(type2)){ RESULT = type1;}
                                                                        if (util.verificaTiposNumericos(type1,type2).equals("error")){
                                                                           System.out.println("ERRO SEMANTICO"); 
                                                                        }else{
                                                                            RESULT = util.verificaTiposNumericos(type1,type2);
                                                                        }
                                                                     
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("EqualityExpression",63, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // AndExpression ::= EqualityExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AndExpression",64, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // AndExpression ::= AndExpression AMPER EqualityExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(type1.equals(type2)){
										    RESULT = type1;} else { 
										    System.out.println("ERRO SEMANTICO");
										     } 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AndExpression",64, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ExclusiveOrExpression ::= AndExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ExclusiveOrExpression",65, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ExclusiveOrExpression ::= ExclusiveOrExpression XOR AndExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(type1.equals(type2)){
										    RESULT = type1;} else { 
										    System.out.println("ERRO SEMANTICO");
										     } 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ExclusiveOrExpression",65, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // InclusiveOrExpression ::= ExclusiveOrExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("InclusiveOrExpression",66, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // InclusiveOrExpression ::= InclusiveOrExpression SOR ExclusiveOrExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(type1.equals(type2)){
										    RESULT = type1;} else { 
										    System.out.println("ERRO SEMANTICO");
										     } 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("InclusiveOrExpression",66, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ConditionalAndExpression ::= InclusiveOrExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",62, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ConditionalAndExpression ::= ConditionalAndExpression OP_LAND InclusiveOrExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(type1.equals(type2)){
													RESULT = type1;} else { 
													System.out.println("ERRO SEMANTICO");
													} 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConditionalAndExpression",62, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ConditionalOrExpression ::= ConditionalAndExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",60, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ConditionalOrExpression ::= ConditionalOrExpression OP_LOR ConditionalAndExpression 
            {
              String RESULT =null;
		int type1left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int type1right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String type1 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(type1.equals(type2)){
													RESULT = type1;} else { 
													System.out.println("ERRO SEMANTICO");
                                                                                                        } 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConditionalOrExpression",60, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ConditionalExpression ::= ConditionalOrExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",61, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // ConditionalExpression ::= ConditionalOrExpression QUE Expression COLON ConditionalExpression 
            {
              String RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConditionalExpression",61, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-4)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // AssignmentExpression ::= ConditionalExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type; 
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",59, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // AssignmentExpression ::= UnaryExpression AssignmentOperator AssignmentExpression 
            {
              String RESULT =null;
		int varnameleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).left;
		int varnameright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).right;
		String varname = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)).value;
		int type2left = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int type2right = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type2 = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 if(armazemVar.containsVariavel(varname)){
																					String type1 = armazemVar.getVariavel(varname).getTipo();
																					if(type1.equals(type2)){
																						RESULT = type1;
																					} else {
																						System.out.println("ERRO SEMANTICO NA ATRIBUICAO. OS DOIS VALORES TEM QUE SER DO MESMO TIPO: " + type1 + " " + type2);
																					}
																				} else {
																					System.out.println("ERRO SEMANTICO, VARIAVEL " + varname + " NAO EXISTE. CRIE ELA ANTES DE USAR");
																				}
																																								
																				
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentExpression",59, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.elementAt(CUP$AnalisadorSintaticoGen$top-2)), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // AssignmentOperator ::= EQU 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // AssignmentOperator ::= ASS_MUL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // AssignmentOperator ::= ASS_DIV 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // AssignmentOperator ::= ASS_MOD 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // AssignmentOperator ::= ASS_ADD 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // AssignmentOperator ::= ASS_SUB 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // AssignmentOperator ::= ASS_SHL 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // AssignmentOperator ::= ASS_SHR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // AssignmentOperator ::= ASS_SHRR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // AssignmentOperator ::= ASS_AND 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // AssignmentOperator ::= ASS_XOR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // AssignmentOperator ::= ASS_OR 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("AssignmentOperator",55, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // Expression ::= AssignmentExpression 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$AnalisadorSintaticoGen$stack.peek()).value;
		 RESULT = type;
              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("Expression",85, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ConstantExpression ::= ConditionalExpression 
            {
              Object RESULT =null;

              CUP$AnalisadorSintaticoGen$result = parser.getSymbolFactory().newSymbol("ConstantExpression",37, ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalisadorSintaticoGen$stack.peek()), RESULT);
            }
          return CUP$AnalisadorSintaticoGen$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalisadorSintaticoGen$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalisadorSintaticoGen$do_action(
    int                        CUP$AnalisadorSintaticoGen$act_num,
    java_cup.runtime.lr_parser CUP$AnalisadorSintaticoGen$parser,
    java.util.Stack            CUP$AnalisadorSintaticoGen$stack,
    int                        CUP$AnalisadorSintaticoGen$top)
    throws java.lang.Exception
    {
              return CUP$AnalisadorSintaticoGen$do_action_part00000000(
                               CUP$AnalisadorSintaticoGen$act_num,
                               CUP$AnalisadorSintaticoGen$parser,
                               CUP$AnalisadorSintaticoGen$stack,
                               CUP$AnalisadorSintaticoGen$top);
    }
}

}
