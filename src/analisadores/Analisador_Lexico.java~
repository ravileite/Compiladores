/* The following code was generated by JFlex 1.6.1 */

/* Código do Usuário */

package Analisadores;
import java_cup.runtime.*;
import java.util.LinkedList;

/* Opções e Declarações */


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalisadorLexico_1.jflex</tt>
 */
public class Analisador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 55, 55, 56, 55, 55,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    55, 45,  0,  0,  0, 38, 32,  0, 39, 40, 43, 41, 52, 42,  3, 44, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 54, 53, 35, 36, 37, 47, 
     0,  4,  5, 10, 22, 13, 23, 27, 18, 20, 30, 16, 12, 25, 14, 11, 
    26,  1,  9,  7,  8, 21, 28, 29, 24, 17, 31, 48,  0, 49, 33,  1, 
     0,  4,  5, 10, 22, 13, 23, 27, 18, 20, 30, 16, 12, 25, 14, 11, 
    26,  1,  9,  7,  8, 21, 28, 29, 24, 17, 31, 50, 34, 51, 46,  0, 
     0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\2\1\1\7\2\1\1"+
    "\7\2\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\2\1\34\4\2\5\0\15\2\1\0\5\2"+
    "\1\0\1\35\1\0\1\2\1\35\1\2\1\36\4\2"+
    "\1\0\7\2\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\0\4\2\5\0"+
    "\6\2\1\62\2\2\1\0\2\2\1\0\6\2\1\0"+
    "\1\2\1\0\3\2\1\63\1\0\1\64\1\0\1\2"+
    "\1\64\4\2\1\65\1\2\1\0\3\2\1\0\3\2"+
    "\1\0\1\2\1\0\2\2\1\66\1\67\1\70\1\0"+
    "\3\2\1\71\5\0\6\2\1\72\1\2\2\73\1\2"+
    "\2\74\2\2\1\0\1\2\1\75\1\76\1\0\1\2"+
    "\2\77\1\2\1\0\1\2\4\0\6\2\1\0\1\2"+
    "\1\0\1\2\1\0\2\2\1\0\3\2\2\100\1\0"+
    "\2\2\1\101\1\0\1\2\2\102\1\2\2\0\1\103"+
    "\1\104\1\0\2\2\1\103\1\104\1\2\1\0\1\2"+
    "\1\105\1\2\1\106\1\0\1\2\2\107\1\0\2\2"+
    "\1\0\1\2\4\0\6\2\1\72\1\110\2\111\1\0"+
    "\2\2\1\0\1\2\1\0\2\2\2\112\1\113\1\0"+
    "\2\2\1\114\1\0\1\115\1\114\1\2\1\115\1\0"+
    "\1\2\2\116\1\117\1\0\1\2\1\0\2\2\2\120"+
    "\2\0\1\121\1\0\2\2\1\121\1\2\1\122\1\2"+
    "\1\0\1\2\1\0\2\2\1\0\1\2\2\123\1\0"+
    "\1\2\1\0\1\2\1\124\1\0\1\2\1\0\1\2"+
    "\1\0\1\2\2\34\2\125\3\0\3\2\1\126\2\127"+
    "\2\130\1\2\2\131\1\0\1\2\2\132\1\0\1\2"+
    "\1\0\1\2\2\133\3\0\4\2\2\134\1\0\1\2"+
    "\2\135\1\0\1\136\1\0\1\2\1\136\1\2\1\137"+
    "\1\0\1\2\1\140\1\141\1\140\1\141\1\0\1\2"+
    "\2\142";

  private static int [] zzUnpackAction() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\71\0\71\0\u0675"+
    "\0\u06ae\0\u06e7\0\u0720\0\u0759\0\71\0\71\0\u0792\0\71"+
    "\0\71\0\71\0\71\0\71\0\71\0\71\0\u07cb\0\253"+
    "\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a\0\u0993"+
    "\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b"+
    "\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\71\0\u0e79\0\u0eb2"+
    "\0\162\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\71"+
    "\0\71\0\71\0\71\0\71\0\u1209\0\71\0\71\0\71"+
    "\0\u1242\0\71\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\71\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\162\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7"+
    "\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\162\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\162"+
    "\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d"+
    "\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\71\0\71"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\162\0\u2049\0\u2082"+
    "\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\162\0\u22bc\0\71\0\162\0\u22f5\0\71\0\162"+
    "\0\u232e\0\u2367\0\u23a0\0\u23d9\0\162\0\162\0\u2412\0\u244b"+
    "\0\71\0\162\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931"+
    "\0\u296a\0\u29a3\0\71\0\162\0\u29dc\0\u2a15\0\u2a4e\0\71"+
    "\0\u2a87\0\u2ac0\0\71\0\162\0\u2af9\0\u2b32\0\u2b6b\0\71"+
    "\0\71\0\u2ba4\0\u2bdd\0\u2c16\0\162\0\162\0\u2c4f\0\u2c88"+
    "\0\u2cc1\0\u2cfa\0\u2d33\0\162\0\u2d6c\0\u2da5\0\71\0\162"+
    "\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d"+
    "\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc\0\71"+
    "\0\162\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b"+
    "\0\u32c4\0\u32fd\0\u3336\0\71\0\162\0\162\0\u336f\0\u33a8"+
    "\0\u33e1\0\71\0\u341a\0\71\0\162\0\u3453\0\162\0\u348c"+
    "\0\u34c5\0\71\0\162\0\162\0\u34fe\0\u3537\0\u3570\0\u35a9"+
    "\0\u35e2\0\71\0\162\0\u361b\0\u3654\0\71\0\u368d\0\u36c6"+
    "\0\u36ff\0\162\0\u3738\0\162\0\u3771\0\u37aa\0\u37e3\0\u381c"+
    "\0\u3855\0\u388e\0\u38c7\0\u3900\0\71\0\162\0\u3939\0\u3972"+
    "\0\u39ab\0\u39e4\0\162\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01"+
    "\0\u3b3a\0\71\0\162\0\71\0\162\0\u3b73\0\u3bac\0\u3be5"+
    "\0\u3c1e\0\u3c57\0\u3c90\0\162\0\71\0\162\0\71\0\162"+
    "\0\u3cc9\0\71\0\162\0\u3d02\0\u3d3b\0\71\0\162\0\u3d74"+
    "\0\u3dad\0\u3de6\0\u3e1f\0\71\0\162\0\u3e58\0\u3e91\0\u3eca"+
    "\0\u3f03\0\u3f3c\0\u3f75\0\u3fae\0\71\0\162\0\u3fe7\0\u4020"+
    "\0\71\0\162\0\u4059\0\71\0\u4092\0\u40cb\0\162\0\u4104"+
    "\0\162\0\u413d\0\u4176\0\71\0\71\0\162\0\162\0\u41af"+
    "\0\u41e8\0\71\0\162";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\3\1\14\1\15\1\16\1\2"+
    "\3\3\1\17\1\20\1\3\1\21\1\22\2\3\1\23"+
    "\1\3\1\24\1\25\1\26\1\3\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\73\0\1\3\1\57"+
    "\1\60\2\3\1\0\10\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\60\1\0\3\60\1\0\10\60\1\0\3\60"+
    "\1\0\14\60\32\0\1\3\1\57\1\60\1\3\1\61"+
    "\1\0\10\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\2\3\1\62\1\3\1\63"+
    "\3\3\1\0\1\3\1\64\1\3\1\0\14\3\41\0"+
    "\1\65\10\0\1\66\1\67\2\0\1\70\7\0\1\71"+
    "\34\0\1\3\1\57\1\60\2\3\1\0\1\3\1\72"+
    "\6\3\1\0\1\3\1\73\1\74\1\0\1\3\1\75"+
    "\7\3\1\76\2\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\2\3\1\77\5\3\1\0\2\3\1\100\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\6\3"+
    "\1\101\1\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\1\102\1\3\1\0\4\3\1\103\1\104"+
    "\2\3\1\0\2\3\1\105\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\4\3\1\106\3\3\1\0"+
    "\3\3\1\107\1\110\13\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\5\3\1\111\2\3\1\0\3\3\1\0"+
    "\4\3\1\112\7\3\32\0\1\3\1\57\1\60\1\113"+
    "\1\3\1\0\6\3\1\114\1\3\1\0\3\3\1\0"+
    "\14\3\47\0\1\115\10\0\1\116\1\0\1\117\40\0"+
    "\1\3\1\57\1\60\2\3\1\0\7\3\1\120\1\0"+
    "\3\3\1\0\3\3\1\121\1\3\1\122\6\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\4\3\1\123\1\3"+
    "\1\124\1\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\1\125\1\3\1\0\4\3\1\126\1\127"+
    "\2\3\1\0\3\3\1\130\1\131\13\3\32\0\1\3"+
    "\1\57\1\60\1\132\1\3\1\0\2\3\1\133\5\3"+
    "\1\0\3\3\1\0\1\3\1\134\12\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\4\3\1\135\3\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\2\3\1\136\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\7\3\1\137\1\0"+
    "\3\3\1\0\14\3\71\0\1\140\3\0\1\141\70\0"+
    "\1\142\66\0\1\143\1\0\1\144\67\0\1\145\1\146"+
    "\70\0\1\147\70\0\1\150\1\151\67\0\1\152\70\0"+
    "\1\153\4\0\1\154\63\0\1\155\5\0\1\156\62\0"+
    "\1\157\70\0\1\160\70\0\1\161\105\0\1\162\10\0"+
    "\2\57\1\0\2\57\1\0\10\57\1\0\3\57\1\0"+
    "\14\57\32\0\1\3\1\57\1\60\2\3\1\163\1\164"+
    "\7\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\6\3\1\165\1\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\4\3\1\166\3\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\1\3\1\167\6\3"+
    "\1\0\3\3\1\0\14\3\35\0\1\170\102\0\1\171"+
    "\65\0\1\172\107\0\1\173\61\0\2\174\45\0\1\3"+
    "\1\57\1\60\1\175\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\7\3\1\176\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\4\3\1\177\3\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\6\3\1\200\5\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\10\3\1\0"+
    "\3\3\1\174\1\201\13\3\32\0\1\3\1\57\1\60"+
    "\1\202\1\3\1\0\10\3\1\0\1\3\1\203\1\3"+
    "\1\0\1\3\1\204\12\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\2\3\1\205\5\3\1\0\3\3\1\206"+
    "\1\207\13\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\1\3\1\210\6\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\211\1\212\1\213\6\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\7\3\1\214\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\1\215\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\1\216\1\3\1\0\10\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\7\3\1\217"+
    "\1\0\3\3\1\0\14\3\41\0\1\220\61\0\1\3"+
    "\1\57\1\60\2\3\1\0\1\3\1\221\6\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\222\1\223\7\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\1\3\1\224\6\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\1\3\1\225\6\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\11\3\1\226\2\3\37\0\2\227"+
    "\1\230\112\0\1\231\37\0\1\3\1\57\1\60\2\3"+
    "\1\227\1\232\1\233\6\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\6\3\1\234\5\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\1\235\12\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\3\3\1\236\10\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\5\3\1\237\2\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\2\3\1\240\5\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\4\3"+
    "\1\241\3\3\1\0\3\3\1\0\14\3\47\0\1\242"+
    "\53\0\1\3\1\57\1\60\2\3\1\0\7\3\1\243"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\3\3\1\244\4\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\4\3"+
    "\1\245\3\3\1\0\3\3\1\246\1\247\13\3\32\0"+
    "\1\3\1\57\1\60\1\3\1\250\1\0\10\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\5\3\1\251\2\3\1\0\3\3\1\252\1\253"+
    "\13\3\32\0\1\3\1\57\1\60\2\3\1\0\10\3"+
    "\1\0\3\3\1\254\1\255\13\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\10\3\1\0\3\3\1\0\1\3"+
    "\1\256\12\3\75\0\1\257\70\0\1\260\1\261\33\0"+
    "\1\262\61\0\1\3\1\57\1\60\2\3\1\0\1\3"+
    "\1\263\6\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\1\264\1\3\1\0\10\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\5\3\1\265\2\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\6\3\1\266\1\3"+
    "\1\0\3\3\1\0\14\3\41\0\1\267\72\0\1\270"+
    "\67\0\1\271\74\0\1\272\63\0\1\273\61\0\1\3"+
    "\1\57\1\60\2\3\1\0\1\3\1\274\6\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\3\3\1\275\4\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\2\3\1\276"+
    "\5\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\6\3\1\277\1\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\1\3\1\300\6\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\7\3\1\301\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\6\3\1\302\1\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\4\3\1\303"+
    "\3\3\1\0\3\3\1\0\14\3\37\0\2\304\62\0"+
    "\1\3\1\57\1\60\2\3\1\304\1\305\7\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\1\3\1\306\12\3"+
    "\46\0\1\307\54\0\1\3\1\57\1\60\2\3\1\0"+
    "\6\3\1\310\1\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\3\3\1\311\4\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\1\3\1\312\6\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\313\1\314"+
    "\7\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\2\3\1\315\5\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\7\3\1\316\4\3\46\0"+
    "\1\317\54\0\1\3\1\57\1\60\2\3\1\0\6\3"+
    "\1\320\1\3\1\0\3\3\1\0\14\3\46\0\1\321"+
    "\54\0\1\3\1\57\1\60\2\3\1\0\6\3\1\322"+
    "\1\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\6\3\1\323\1\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\10\3\1\0\3\3\1\324\1\325\13\3\41\0\1\326"+
    "\75\0\1\327\66\0\1\330\1\331\55\0\1\3\1\57"+
    "\1\60\2\3\1\0\1\3\1\332\6\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\6\3\1\333\1\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\4\3\1\334\1\335"+
    "\2\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\1\3\1\336\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\1\337\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\340\1\204\7\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\1\341\1\3\1\0"+
    "\10\3\1\0\3\3\1\0\14\3\35\0\1\342\65\0"+
    "\1\3\1\57\1\60\1\343\1\3\1\0\10\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\344\1\345\2\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\1\3\1\346\6\3"+
    "\1\0\3\3\1\0\14\3\65\0\1\347\35\0\1\3"+
    "\1\57\1\60\2\3\1\0\10\3\1\0\3\3\1\0"+
    "\10\3\1\350\3\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\5\3\1\351\2\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\1\352\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\14\3\57\0\1\353\43\0\1\3"+
    "\1\57\1\60\2\3\1\0\10\3\1\0\3\3\1\0"+
    "\2\3\1\354\11\3\45\0\1\355\55\0\1\3\1\57"+
    "\1\60\2\3\1\0\5\3\1\356\2\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\5\3\1\357\2\3\1\0\3\3\1\0\14\3\75\0"+
    "\1\360\35\0\1\361\60\0\1\3\1\57\1\60\2\3"+
    "\1\0\2\3\1\362\5\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\10\3\1\363"+
    "\1\364\2\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\6\3\1\365\1\3\1\0\3\3\1\0"+
    "\14\3\54\0\2\366\66\0\1\367\56\0\1\370\71\0"+
    "\1\371\71\0\1\372\57\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\3\3\1\366\1\373\13\3\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\10\3\1\0\2\3"+
    "\1\374\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\1\3\1\375\6\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\2\3\1\376"+
    "\5\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\3\3\1\377\4\3\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\u0100"+
    "\1\u0101\7\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\10\3\1\0\3\3\1\0"+
    "\11\3\1\u0102\2\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\2\3\1\u0103\5\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\10\3\1\0"+
    "\2\3\1\u0104\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\10\3\1\0\3\3\1\u0105\1\u0106\13\3"+
    "\37\0\2\u0107\62\0\1\3\1\57\1\60\2\3\1\u0107"+
    "\1\u0108\7\3\1\0\3\3\1\0\14\3\42\0\1\u0109"+
    "\60\0\1\3\1\57\1\60\2\3\1\0\2\3\1\u010a"+
    "\5\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\7\3\1\u010b\1\0\3\3\1\0"+
    "\14\3\65\0\1\u010c\35\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\10\3\1\u010d\3\3"+
    "\35\0\1\u010e\75\0\1\u010f\70\0\1\u0110\74\0\1\u0111"+
    "\54\0\1\3\1\57\1\60\1\u0112\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\2\3\1\u0113\5\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\2\3"+
    "\1\u0114\5\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\6\3\1\u0115\1\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\5\3\1\u0116\2\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\1\3\1\u0117\12\3\46\0\1\u0118\54\0"+
    "\1\3\1\57\1\60\2\3\1\0\1\3\1\u0119\6\3"+
    "\1\0\3\3\1\0\14\3\45\0\1\u011a\55\0\1\3"+
    "\1\57\1\60\2\3\1\0\5\3\1\u011b\2\3\1\0"+
    "\3\3\1\0\14\3\35\0\1\u011c\65\0\1\3\1\57"+
    "\1\60\1\u011d\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\6\3"+
    "\1\u011e\1\3\1\0\3\3\1\0\14\3\35\0\1\u011f"+
    "\65\0\1\3\1\57\1\60\1\u0120\1\3\1\0\10\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\10\3\1\0\3\3\1\u0121\1\u0122\13\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\1\3\1\u0123"+
    "\6\3\1\0\3\3\1\0\14\3\46\0\1\u0124\54\0"+
    "\1\3\1\57\1\60\2\3\1\0\6\3\1\u0125\1\3"+
    "\1\0\3\3\1\0\14\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\0\5\3\1\u0126\2\3\1\0\3\3\1\0"+
    "\14\3\35\0\1\u0127\65\0\1\3\1\57\1\60\1\u0128"+
    "\1\3\1\0\10\3\1\0\3\3\1\0\14\3\32\0"+
    "\1\3\1\57\1\60\1\u0129\1\3\1\0\10\3\1\0"+
    "\3\3\1\0\14\3\43\0\1\u012a\67\0\1\u012b\101\0"+
    "\1\u012c\47\0\1\3\1\57\1\60\2\3\1\0\3\3"+
    "\1\u012d\4\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\2\3\1\u012e\5\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\2\3\1\u012f\1\0\14\3\54\0"+
    "\2\u0130\45\0\1\3\1\57\1\60\2\3\1\0\10\3"+
    "\1\0\3\3\1\u0130\1\u0131\13\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\u0132\1\u0133\7\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\7\3"+
    "\1\u0134\1\0\3\3\1\0\14\3\47\0\1\u0135\53\0"+
    "\1\3\1\57\1\60\2\3\1\0\7\3\1\u0136\1\0"+
    "\3\3\1\0\14\3\35\0\1\u0137\65\0\1\3\1\57"+
    "\1\60\1\u0138\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\2\3\1\u0139\11\3\46\0\1\u013a"+
    "\54\0\1\3\1\57\1\60\2\3\1\0\6\3\1\u013b"+
    "\1\3\1\0\3\3\1\0\14\3\47\0\1\u013c\101\0"+
    "\1\u013d\51\0\1\u013e\111\0\1\u013f\40\0\1\3\1\57"+
    "\1\60\2\3\1\0\7\3\1\u0140\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\3\3\1\u0141\10\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\1\3\1\u0142\6\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\5\3\1\u0143\6\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\6\3\1\u0144"+
    "\1\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\2\3\1\0\5\3\1\u0145\2\3\1\0\3\3"+
    "\1\0\14\3\45\0\1\u0146\55\0\1\3\1\57\1\60"+
    "\2\3\1\0\5\3\1\u0147\2\3\1\0\3\3\1\0"+
    "\14\3\64\0\1\u0148\36\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\3\3\1\0\7\3\1\u0149\4\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\3\3\1\u014a"+
    "\4\3\1\0\3\3\1\0\14\3\41\0\1\u014b\61\0"+
    "\1\3\1\57\1\60\2\3\1\0\1\3\1\u014c\6\3"+
    "\1\0\3\3\1\0\14\3\43\0\1\u014d\57\0\1\3"+
    "\1\57\1\60\2\3\1\0\3\3\1\u014e\4\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\10\3\1\0\3\3\1\u014f\1\u0150\13\3\43\0"+
    "\1\u0151\57\0\1\3\1\57\1\60\2\3\1\0\3\3"+
    "\1\u0152\4\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\7\3\1\u0153\1\0\3\3"+
    "\1\0\14\3\44\0\1\u0154\56\0\1\3\1\57\1\60"+
    "\2\3\1\0\4\3\1\u0155\3\3\1\0\3\3\1\0"+
    "\14\3\46\0\1\u0156\54\0\1\3\1\57\1\60\2\3"+
    "\1\0\6\3\1\u0157\1\3\1\0\3\3\1\0\14\3"+
    "\56\0\1\u0158\44\0\1\3\1\57\1\60\2\3\1\0"+
    "\10\3\1\0\3\3\1\0\1\3\1\u0159\12\3\45\0"+
    "\1\u015a\55\0\1\3\1\57\1\60\2\3\1\0\5\3"+
    "\1\u015b\2\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\u015c\1\u015d\7\3\1\0\3\3"+
    "\1\0\14\3\43\0\1\u015e\62\0\1\u015f\101\0\1\u0160"+
    "\54\0\1\3\1\57\1\60\2\3\1\0\3\3\1\u0161"+
    "\4\3\1\0\3\3\1\0\14\3\32\0\1\3\1\57"+
    "\1\60\1\u0162\1\3\1\0\10\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\6\3"+
    "\1\u0163\1\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\1\3\1\u0164\6\3\1\0"+
    "\3\3\1\0\14\3\52\0\1\u0165\50\0\1\3\1\57"+
    "\1\60\2\3\1\0\10\3\1\0\1\3\1\u0166\1\3"+
    "\1\0\14\3\46\0\1\u0167\54\0\1\3\1\57\1\60"+
    "\2\3\1\0\6\3\1\u0168\1\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\1\3"+
    "\1\u0169\6\3\1\0\3\3\1\0\14\3\46\0\1\u016a"+
    "\54\0\1\3\1\57\1\60\2\3\1\0\6\3\1\u016b"+
    "\1\3\1\0\3\3\1\0\14\3\45\0\1\u016c\55\0"+
    "\1\3\1\57\1\60\2\3\1\0\5\3\1\u016d\2\3"+
    "\1\0\3\3\1\0\14\3\41\0\1\u016e\61\0\1\3"+
    "\1\57\1\60\2\3\1\0\1\3\1\u016f\6\3\1\0"+
    "\3\3\1\0\14\3\47\0\1\u0170\53\0\1\3\1\57"+
    "\1\60\2\3\1\0\7\3\1\u0171\1\0\3\3\1\0"+
    "\14\3\47\0\1\u0172\53\0\1\3\1\57\1\60\2\3"+
    "\1\0\7\3\1\u0173\1\0\3\3\1\0\14\3\46\0"+
    "\1\u0174\54\0\1\3\1\57\1\60\2\3\1\0\6\3"+
    "\1\u0175\1\3\1\0\3\3\1\0\14\3\46\0\1\u0176"+
    "\65\0\1\u0177\74\0\1\u0178\53\0\1\3\1\57\1\60"+
    "\2\3\1\0\6\3\1\u0179\1\3\1\0\3\3\1\0"+
    "\14\3\32\0\1\3\1\57\1\60\2\3\1\0\3\3"+
    "\1\u017a\4\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\7\3\1\u017b\1\0\3\3"+
    "\1\0\14\3\32\0\1\3\1\57\1\60\2\3\1\0"+
    "\6\3\1\u017c\1\3\1\0\3\3\1\0\14\3\46\0"+
    "\1\u017d\54\0\1\3\1\57\1\60\2\3\1\0\6\3"+
    "\1\u017e\1\3\1\0\3\3\1\0\14\3\54\0\2\u017f"+
    "\45\0\1\3\1\57\1\60\2\3\1\0\10\3\1\0"+
    "\3\3\1\u017f\1\u0180\13\3\41\0\1\u0181\61\0\1\3"+
    "\1\57\1\60\2\3\1\0\1\3\1\u0182\6\3\1\0"+
    "\3\3\1\0\14\3\44\0\1\u0183\72\0\1\u0184\63\0"+
    "\1\u0185\61\0\1\3\1\57\1\60\2\3\1\0\4\3"+
    "\1\u0186\3\3\1\0\3\3\1\0\14\3\32\0\1\3"+
    "\1\57\1\60\2\3\1\0\6\3\1\u0187\1\3\1\0"+
    "\3\3\1\0\14\3\32\0\1\3\1\57\1\60\2\3"+
    "\1\0\1\3\1\u0188\6\3\1\0\3\3\1\0\14\3"+
    "\32\0\1\3\1\57\1\60\2\3\1\0\10\3\1\0"+
    "\3\3\1\0\2\3\1\u0189\11\3\70\0\1\u018a\32\0"+
    "\1\3\1\57\1\60\2\3\1\0\10\3\1\0\3\3"+
    "\1\0\13\3\1\u018b\60\0\1\u018c\47\0\2\u018d\62\0"+
    "\1\3\1\57\1\60\2\3\1\0\10\3\1\0\3\3"+
    "\1\0\3\3\1\u018e\10\3\32\0\1\3\1\57\1\60"+
    "\2\3\1\u018d\1\u018f\7\3\1\0\3\3\1\0\14\3"+
    "\46\0\1\u0190\54\0\1\3\1\57\1\60\2\3\1\0"+
    "\6\3\1\u0191\1\3\1\0\3\3\1\0\14\3\57\0"+
    "\1\u0192\43\0\1\3\1\57\1\60\2\3\1\0\10\3"+
    "\1\0\3\3\1\0\2\3\1\u0193\11\3\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16929];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\33\1\2\11\5\1\2\11\1\1\7\11"+
    "\6\1\5\0\15\1\1\0\5\1\1\0\1\11\1\0"+
    "\10\1\1\0\7\1\5\11\1\1\3\11\1\1\11\11"+
    "\1\0\4\1\5\0\11\1\1\0\2\1\1\0\6\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\10\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\11\1\1\1\0\4\1\5\0\10\1\1\11\2\1"+
    "\1\11\3\1\1\0\3\1\1\0\1\1\1\11\2\1"+
    "\1\0\1\1\4\0\6\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\0\1\1\1\11\2\1\2\0\2\11\1\0"+
    "\5\1\1\0\4\1\1\0\1\1\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\4\0\6\1\1\11\3\1\1\0"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\2\1\1\0"+
    "\2\1\1\11\1\0\1\11\3\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\1\1\0\2\1\1\11\1\1\2\0"+
    "\1\11\1\0\6\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\1\1\11"+
    "\1\1\3\0\4\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\3\0\4\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\11\1\0\4\1\1\0"+
    "\1\1\2\11\2\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[403];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //Código de Sintaxe Java
    public static LinkedList<TError> TabelaER = new  LinkedList<TError>();



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analisador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Erro Léxico " + yytext() + "Linha " + yyline +  "Coluna " + yycolumn);
                                     TError dados = new TError(yytext(), yyline, yycolumn, "Erro Lexico", "Simbolo nao permitido");
                                     TabelaER.add(dados);
            }
          case 99: break;
          case 2: 
            { return new Symbol(Simbolos.IDENTIFIER, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 3: 
            { return new Symbol(Simbolos.DOT, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 4: 
            { return new Symbol(Simbolos.AMPER, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 5: 
            { return new Symbol(Simbolos.XOR, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 6: 
            { return new Symbol(Simbolos.SOR, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 7: 
            { return new Symbol(Simbolos.LTHEN, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 8: 
            { return new Symbol(Simbolos.EQU, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 9: 
            { return new Symbol(Simbolos.BTHEN, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 10: 
            { return new Symbol(Simbolos.MOD, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 11: 
            { return new Symbol(Simbolos.OPENPAR, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 12: 
            { return new Symbol(Simbolos.CLOSEPAR, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 13: 
            { return new Symbol(Simbolos.PLUS, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 14: 
            { return new Symbol(Simbolos.MINUS, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 15: 
            { return new Symbol(Simbolos.MULT, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 16: 
            { return new Symbol(Simbolos.DIV, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 17: 
            { return new Symbol(Simbolos.NE, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 18: 
            { return new Symbol(Simbolos.TIL, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 19: 
            { return new Symbol(Simbolos.QUE, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 20: 
            { return new Symbol(Simbolos.OPENBRAC, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 21: 
            { return new Symbol(Simbolos.CLOSEBRAC, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 22: 
            { return new Symbol(Simbolos.OPENKEYS, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 23: 
            { return new Symbol(Simbolos.CLOSEKEYS, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 24: 
            { return new Symbol(Simbolos.COMMA, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 25: 
            { return new Symbol(Simbolos.SEMIC, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 26: 
            { return new Symbol(Simbolos.COLON, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 27: 
            { /*Espacos em branco devem ser ignorados*/
            }
          case 125: break;
          case 28: 
            { return new Symbol(Simbolos.LITERAL, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 29: 
            { return new Symbol(Simbolos.IF, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 30: 
            { return new Symbol(Simbolos.DO, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 31: 
            { return new Symbol(Simbolos.OP_LAND, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 32: 
            { return new Symbol(Simbolos.ASS_AND, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 33: 
            { return new Symbol(Simbolos.ASS_XOR, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 34: 
            { return new Symbol(Simbolos.OP_LOR, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 35: 
            { return new Symbol(Simbolos.ASS_OR, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 36: 
            { return new Symbol(Simbolos.OP_SHL, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 37: 
            { return new Symbol(Simbolos.OP_LE, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 38: 
            { return new Symbol(Simbolos.OP_EQ, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 39: 
            { return new Symbol(Simbolos.OP_GE, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 40: 
            { return new Symbol(Simbolos.OP_SHR, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 41: 
            { return new Symbol(Simbolos.ASS_MOD, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 42: 
            { return new Symbol(Simbolos.ASS_ADD, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 43: 
            { return new Symbol(Simbolos.OP_INC, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 44: 
            { return new Symbol(Simbolos.ASS_SUB, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 45: 
            { return new Symbol(Simbolos.OP_DEC, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 46: 
            { return new Symbol(Simbolos.ASS_MUL, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 47: 
            { return new Symbol(Simbolos.ASS_DIV, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 48: 
            { return new Symbol(Simbolos.OP_NE, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 49: 
            { return new Symbol(Simbolos.OP_DIM, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 50: 
            { return new Symbol(Simbolos.TRY, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 51: 
            { return new Symbol(Simbolos.NEW, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 52: 
            { return new Symbol(Simbolos.INT, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 53: 
            { return new Symbol(Simbolos.FOR, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 54: 
            { return new Symbol(Simbolos.ASS_SHL, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 55: 
            { return new Symbol(Simbolos.ASS_SHR, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 56: 
            { return new Symbol(Simbolos.OP_SHRR, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 57: 
            { return new Symbol(Simbolos.BYTE, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 58: 
            { return new Symbol(Simbolos.BOOLLIT, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 59: 
            { return new Symbol(Simbolos.THIS, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 60: 
            { return new Symbol(Simbolos.CASE, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 61: 
            { return new Symbol(Simbolos.CHAR, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 62: 
            { return new Symbol(Simbolos.LONG, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 63: 
            { return new Symbol(Simbolos.ELSE, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 64: 
            { return new Symbol(Simbolos.VOID, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 65: 
            { return new Symbol(Simbolos.ASS_SHRR, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 66: 
            { return new Symbol(Simbolos.BREAK, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 67: 
            { return new Symbol(Simbolos.SHORT, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 68: 
            { return new Symbol(Simbolos.SUPER, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 69: 
            { return new Symbol(Simbolos.THROW, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 70: 
            { return new Symbol(Simbolos.CATCH, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 71: 
            { return new Symbol(Simbolos.CLASS, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 72: 
            { return new Symbol(Simbolos.FLOAT, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 73: 
            { return new Symbol(Simbolos.FINAL, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 74: 
            { return new Symbol(Simbolos.WHILE, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 75: 
            { return new Symbol(Simbolos.JNULL, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 76: 
            { return new Symbol(Simbolos.STATIC, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 77: 
            { return new Symbol(Simbolos.SWITCH, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 78: 
            { return new Symbol(Simbolos.THROWS, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 79: 
            { return new Symbol(Simbolos.RETURN, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 80: 
            { return new Symbol(Simbolos.NATIVE, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 81: 
            { return new Symbol(Simbolos.IMPORT, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 82: 
            { return new Symbol(Simbolos.DOUBLE, yycolumn, yyline, yytext());
            }
          case 180: break;
          case 83: 
            { return new Symbol(Simbolos.PUBLIC, yycolumn, yyline, yytext());
            }
          case 181: break;
          case 84: 
            { return new Symbol(Simbolos.BOOLEAN, yycolumn, yyline, yytext());
            }
          case 182: break;
          case 85: 
            { return new Symbol(Simbolos.EXTENDS, yycolumn, yyline, yytext());
            }
          case 183: break;
          case 86: 
            { return new Symbol(Simbolos.DEFAULT, yycolumn, yyline, yytext());
            }
          case 184: break;
          case 87: 
            { return new Symbol(Simbolos.FINALLY, yycolumn, yyline, yytext());
            }
          case 185: break;
          case 88: 
            { return new Symbol(Simbolos.PACKAGE, yycolumn, yyline, yytext());
            }
          case 186: break;
          case 89: 
            { return new Symbol(Simbolos.PRIVATE, yycolumn, yyline, yytext());
            }
          case 187: break;
          case 90: 
            { return new Symbol(Simbolos.ABSTRACT, yycolumn, yyline, yytext());
            }
          case 188: break;
          case 91: 
            { return new Symbol(Simbolos.CONTINUE, yycolumn, yyline, yytext());
            }
          case 189: break;
          case 92: 
            { return new Symbol(Simbolos.VOLATILE, yycolumn, yyline, yytext());
            }
          case 190: break;
          case 93: 
            { return new Symbol(Simbolos.TRANSIENT, yycolumn, yyline, yytext());
            }
          case 191: break;
          case 94: 
            { return new Symbol(Simbolos.INTERFACE, yycolumn, yyline, yytext());
            }
          case 192: break;
          case 95: 
            { return new Symbol(Simbolos.PROTECTED, yycolumn, yyline, yytext());
            }
          case 193: break;
          case 96: 
            { return new Symbol(Simbolos.INSTANCEOF, yycolumn, yyline, yytext());
            }
          case 194: break;
          case 97: 
            { return new Symbol(Simbolos.IMPLEMENTS, yycolumn, yyline, yytext());
            }
          case 195: break;
          case 98: 
            { return new Symbol(Simbolos.SYNCHRONIZED, yycolumn, yyline, yytext());
            }
          case 196: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
